{
    "Combat()": {
        "prefix": "Combat()",
        "body": [
            "Combat()"
        ]
    },
    "combat:execute(creature, variant)": {
        "prefix": "combat:execute(creature, variant)",
        "body": [
            "combat:execute(creature, variant)"
        ]
    },
    "combat:setArea(area)": {
        "prefix": "combat:setArea(area)",
        "body": [
            "combat:setArea(area)"
        ]
    },
    "combat:setOrigin(origin)": {
        "prefix": "combat:setOrigin(origin)",
        "body": [
            "combat:setOrigin(origin)"
        ]
    },
    "combat:setCallback(key, function)": {
        "prefix": "combat:setCallback(key, function)",
        "body": [
            "combat:setCallback(key, function)"
        ]
    },
    "combat:addCondition(condition)": {
        "prefix": "combat:addCondition(condition)",
        "body": [
            "combat:addCondition(condition)"
        ]
    },
    "combat:setFormula(type, mina, minb, maxa, maxb)": {
        "prefix": "combat:setFormula(type, mina, minb, maxa, maxb)",
        "body": [
            "combat:setFormula(type, mina, minb, maxa, maxb)"
        ]
    },
    "combat:setParameter(key, value)": {
        "prefix": "combat:setParameter(key, value)",
        "body": [
            "combat:setParameter(key, value)"
        ]
    },
    "Condition(conditionType)": {
        "prefix": "Condition(conditionType)",
        "body": [
            "Condition(conditionType)"
        ]
    },
    "Condition(conditionType, conditionId = CONDITIONID_COMBAT, subid = 0, isPersistent = false)": {
        "prefix": "Condition(conditionType, conditionId = CONDITIONID_COMBAT, subid = 0, isPersistent = false)",
        "body": [
            "Condition(conditionType, conditionId = CONDITIONID_COMBAT, subid = 0, isPersistent = false)"
        ]
    },
    "condition:addDamage(rounds, time, value)": {
        "prefix": "condition:addDamage(rounds, time, value)",
        "body": [
            "condition:addDamage(rounds, time, value)"
        ]
    },
    "condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])": {
        "prefix": "condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])",
        "body": [
            "condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])"
        ]
    },
    "condition:setOutfit(outfit)": {
        "prefix": "condition:setOutfit(outfit)",
        "body": [
            "condition:setOutfit(outfit)"
        ]
    },
    "condition:clone()": {
        "prefix": "condition:clone()",
        "body": [
            "condition:clone()"
        ]
    },
    "condition:getEndTime()": {
        "prefix": "condition:getEndTime()",
        "body": [
            "condition:getEndTime()"
        ]
    },
    "condition:getIcons()": {
        "prefix": "condition:getIcons()",
        "body": [
            "condition:getIcons()"
        ]
    },
    "condition:getId()": {
        "prefix": "condition:getId()",
        "body": [
            "condition:getId()"
        ]
    },
    "condition:getSubId()": {
        "prefix": "condition:getSubId()",
        "body": [
            "condition:getSubId()"
        ]
    },
    "condition:getTicks()": {
        "prefix": "condition:getTicks()",
        "body": [
            "condition:getTicks()"
        ]
    },
    "condition:getType()": {
        "prefix": "condition:getType()",
        "body": [
            "condition:getType()"
        ]
    },
    "condition:setFormula(mina, minb, maxa, maxb)": {
        "prefix": "condition:setFormula(mina, minb, maxa, maxb)",
        "body": [
            "condition:setFormula(mina, minb, maxa, maxb)"
        ]
    },
    "condition:setParameter(key, value)": {
        "prefix": "condition:setParameter(key, value)",
        "body": [
            "condition:setParameter(key, value)"
        ]
    },
    "condition:setTicks(ticks)": {
        "prefix": "condition:setTicks(ticks)",
        "body": [
            "condition:setTicks(ticks)"
        ]
    },
    "condition:delete()": {
        "prefix": "condition:delete()",
        "body": [
            "condition:delete()"
        ]
    },
    "Container(uid)": {
        "prefix": "Container(uid)",
        "body": [
            "Container(uid)"
        ]
    },
    "container:addItem(itemId, [count/subType = 1])": {
        "prefix": "container:addItem(itemId, [count/subType = 1])",
        "body": [
            "container:addItem(itemId, [count/subType = 1])"
        ]
    },
    "container:addItemEx(item)": {
        "prefix": "container:addItemEx(item)",
        "body": [
            "container:addItemEx(item)"
        ]
    },
    "container:getCapacity()": {
        "prefix": "container:getCapacity()",
        "body": [
            "container:getCapacity()"
        ]
    },
    "container:getEmptySlots([recursive = false])": {
        "prefix": "container:getEmptySlots([recursive = false])",
        "body": [
            "container:getEmptySlots([recursive = false])"
        ]
    },
    "container:getItem(index)": {
        "prefix": "container:getItem(index)",
        "body": [
            "container:getItem(index)"
        ]
    },
    "container:getSize()": {
        "prefix": "container:getSize()",
        "body": [
            "container:getSize()"
        ]
    },
    "container:hasItem(item)": {
        "prefix": "container:hasItem(item)",
        "body": [
            "container:hasItem(item)"
        ]
    },
    "Creature(id/name)": {
        "prefix": "Creature(id/name)",
        "body": [
            "Creature(id/name)"
        ]
    },
    "creature:addCondition(condition[, force = false])": {
        "prefix": "creature:addCondition(condition[, force = false])",
        "body": [
            "creature:addCondition(condition[, force = false])"
        ]
    },
    "creature:getEvents()": {
        "prefix": "creature:getEvents()",
        "body": [
            "creature:getEvents()"
        ]
    },
    "creature:setHealth(newHealth)": {
        "prefix": "creature:setHealth(newHealth)",
        "body": [
            "creature:setHealth(newHealth)"
        ]
    },
    "creature:addHealth(healthChange)": {
        "prefix": "creature:addHealth(healthChange)",
        "body": [
            "creature:addHealth(healthChange)"
        ]
    },
    "creature:canSee(position)": {
        "prefix": "creature:canSee(position)",
        "body": [
            "creature:canSee(position)"
        ]
    },
    "creature:changeSpeed(delta)": {
        "prefix": "creature:changeSpeed(delta)",
        "body": [
            "creature:changeSpeed(delta)"
        ]
    },
    "creature:canSeeCreature(creature)": {
        "prefix": "creature:canSeeCreature(creature)",
        "body": [
            "creature:canSeeCreature(creature)"
        ]
    },
    "creature:getBaseSpeed()": {
        "prefix": "creature:getBaseSpeed()",
        "body": [
            "creature:getBaseSpeed()"
        ]
    },
    "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])": {
        "prefix": "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])",
        "body": [
            "creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])"
        ]
    },
    "creature:getDamageMap()": {
        "prefix": "creature:getDamageMap()",
        "body": [
            "creature:getDamageMap()"
        ]
    },
    "creature:getDescription(distance)": {
        "prefix": "creature:getDescription(distance)",
        "body": [
            "creature:getDescription(distance)"
        ]
    },
    "creature:getDirection()": {
        "prefix": "creature:getDirection()",
        "body": [
            "creature:getDirection()"
        ]
    },
    "creature:getFollowCreature()": {
        "prefix": "creature:getFollowCreature()",
        "body": [
            "creature:getFollowCreature()"
        ]
    },
    "creature:getHealth()": {
        "prefix": "creature:getHealth()",
        "body": [
            "creature:getHealth()"
        ]
    },
    "creature:getId()": {
        "prefix": "creature:getId()",
        "body": [
            "creature:getId()"
        ]
    },
    "creature:getLight()": {
        "prefix": "creature:getLight()",
        "body": [
            "creature:getLight()"
        ]
    },
    "creature:getMaster()": {
        "prefix": "creature:getMaster()",
        "body": [
            "creature:getMaster()"
        ]
    },
    "creature:getMaxHealth()": {
        "prefix": "creature:getMaxHealth()",
        "body": [
            "creature:getMaxHealth()"
        ]
    },
    "creature:getName()": {
        "prefix": "creature:getName()",
        "body": [
            "creature:getName()"
        ]
    },
    "creature:getOutfit()": {
        "prefix": "creature:getOutfit()",
        "body": [
            "creature:getOutfit()"
        ]
    },
    "creature:getPosition()": {
        "prefix": "creature:getPosition()",
        "body": [
            "creature:getPosition()"
        ]
    },
    "creature:setSpeed(delta)": {
        "prefix": "creature:setSpeed(delta)",
        "body": [
            "creature:setSpeed(delta)"
        ]
    },
    "creature:getPathTo(position, minTargetDist = 0, maxTargetDist = 1, fullPathSearch = true, clearSight = true, maxSearchDist = 0)": {
        "prefix": "creature:getPathTo(position, minTargetDist = 0, maxTargetDist = 1, fullPathSearch = true, clearSight = true, maxSearchDist = 0)",
        "body": [
            "creature:getPathTo(position, minTargetDist = 0, maxTargetDist = 1, fullPathSearch = true, clearSight = true, maxSearchDist = 0)"
        ]
    },
    "creature:getSpeed()": {
        "prefix": "creature:getSpeed()",
        "body": [
            "creature:getSpeed()"
        ]
    },
    "creature:move()": {
        "prefix": "creature:move()",
        "body": [
            "creature:move()"
        ]
    },
    "creature:getSummons()": {
        "prefix": "creature:getSummons()",
        "body": [
            "creature:getSummons()"
        ]
    },
    "creature:getZoneType()": {
        "prefix": "creature:getZoneType()",
        "body": [
            "creature:getZoneType()"
        ]
    },
    "creature:getZones()": {
        "prefix": "creature:getZones()",
        "body": [
            "creature:getZones()"
        ]
    },
    "creature:getIcon(key)": {
        "prefix": "creature:getIcon(key)",
        "body": [
            "creature:getIcon(key)"
        ]
    },
    "creature:getIcons()": {
        "prefix": "creature:getIcons()",
        "body": [
            "creature:getIcons()"
        ]
    },
    "creature:removeIcon(key)": {
        "prefix": "creature:removeIcon(key)",
        "body": [
            "creature:removeIcon(key)"
        ]
    },
    "creature:clearIcons()": {
        "prefix": "creature:clearIcons()",
        "body": [
            "creature:clearIcons()"
        ]
    },
    "creature:setIcon(key, category, icon[, number])": {
        "prefix": "creature:setIcon(key, category, icon[, number])",
        "body": [
            "creature:setIcon(key, category, icon[, number])"
        ]
    },
    "creature:getTarget()": {
        "prefix": "creature:getTarget()",
        "body": [
            "creature:getTarget()"
        ]
    },
    "creature:getTypeName()": {
        "prefix": "creature:getTypeName()",
        "body": [
            "creature:getTypeName()"
        ]
    },
    "creature:getTile()": {
        "prefix": "creature:getTile()",
        "body": [
            "creature:getTile()"
        ]
    },
    "creature:isCreature()": {
        "prefix": "creature:isCreature()",
        "body": [
            "creature:isCreature()"
        ]
    },
    "creature:isHealthHidden()": {
        "prefix": "creature:isHealthHidden()",
        "body": [
            "creature:isHealthHidden()"
        ]
    },
    "creature:isInGhostMode()": {
        "prefix": "creature:isInGhostMode()",
        "body": [
            "creature:isInGhostMode()"
        ]
    },
    "creature:isMoveLocked()": {
        "prefix": "creature:isMoveLocked()",
        "body": [
            "creature:isMoveLocked()"
        ]
    },
    "creature:isDirectionLocked()": {
        "prefix": "creature:isDirectionLocked()",
        "body": [
            "creature:isDirectionLocked()"
        ]
    },
    "creature:setMoveLocked(moveLocked)": {
        "prefix": "creature:setMoveLocked(moveLocked)",
        "body": [
            "creature:setMoveLocked(moveLocked)"
        ]
    },
    "creature:setDirectionLocked(directionLocked)": {
        "prefix": "creature:setDirectionLocked(directionLocked)",
        "body": [
            "creature:setDirectionLocked(directionLocked)"
        ]
    },
    "creature:setSkillLoss(skillLoss)": {
        "prefix": "creature:setSkillLoss(skillLoss)",
        "body": [
            "creature:setSkillLoss(skillLoss)"
        ]
    },
    "creature:setSkull(skullId)": {
        "prefix": "creature:setSkull(skullId)",
        "body": [
            "creature:setSkull(skullId)"
        ]
    },
    "creature:getSkull()": {
        "prefix": "creature:getSkull()",
        "body": [
            "creature:getSkull()"
        ]
    },
    "creature:isImmune()": {
        "prefix": "creature:isImmune()",
        "body": [
            "creature:isImmune()"
        ]
    },
    "creature:hasCondition(conditionType, subId = 0)": {
        "prefix": "creature:hasCondition(conditionType, subId = 0)",
        "body": [
            "creature:hasCondition(conditionType, subId = 0)"
        ]
    },
    "creature:hasBeenSummoned()": {
        "prefix": "creature:hasBeenSummoned()",
        "body": [
            "creature:hasBeenSummoned()"
        ]
    },
    "creature:isItem()": {
        "prefix": "creature:isItem()",
        "body": [
            "creature:isItem()"
        ]
    },
    "creature:isMonster()": {
        "prefix": "creature:isMonster()",
        "body": [
            "creature:isMonster()"
        ]
    },
    "creature:isNpc()": {
        "prefix": "creature:isNpc()",
        "body": [
            "creature:isNpc()"
        ]
    },
    "creature:isPlayer()": {
        "prefix": "creature:isPlayer()",
        "body": [
            "creature:isPlayer()"
        ]
    },
    "creature:isRemoved()": {
        "prefix": "creature:isRemoved()",
        "body": [
            "creature:isRemoved()"
        ]
    },
    "creature:registerEvent(name)": {
        "prefix": "creature:registerEvent(name)",
        "body": [
            "creature:registerEvent(name)"
        ]
    },
    "creature:reload()": {
        "prefix": "creature:reload()",
        "body": [
            "creature:reload()"
        ]
    },
    "creature:remove()": {
        "prefix": "creature:remove()",
        "body": [
            "creature:remove()"
        ]
    },
    "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])": {
        "prefix": "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])",
        "body": [
            "creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])"
        ]
    },
    "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])": {
        "prefix": "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])",
        "body": [
            "creature:say(text, type[, ghost = false[, target = nullptr[, position]]])"
        ]
    },
    "creature:setDirection(direction)": {
        "prefix": "creature:setDirection(direction)",
        "body": [
            "creature:setDirection(direction)"
        ]
    },
    "creature:setDropLoot(doDrop)": {
        "prefix": "creature:setDropLoot(doDrop)",
        "body": [
            "creature:setDropLoot(doDrop)"
        ]
    },
    "creature:setFollowCreature(followedCreature)": {
        "prefix": "creature:setFollowCreature(followedCreature)",
        "body": [
            "creature:setFollowCreature(followedCreature)"
        ]
    },
    "creature:setHiddenHealth(hide)": {
        "prefix": "creature:setHiddenHealth(hide)",
        "body": [
            "creature:setHiddenHealth(hide)"
        ]
    },
    "creature:setLight(color, level)": {
        "prefix": "creature:setLight(color, level)",
        "body": [
            "creature:setLight(color, level)"
        ]
    },
    "creature:setMaster(master)": {
        "prefix": "creature:setMaster(master)",
        "body": [
            "creature:setMaster(master)"
        ]
    },
    "creature:setMaxHealth(maxHealth)": {
        "prefix": "creature:setMaxHealth(maxHealth)",
        "body": [
            "creature:setMaxHealth(maxHealth)"
        ]
    },
    "creature:setOutfit(outfit)": {
        "prefix": "creature:setOutfit(outfit)",
        "body": [
            "creature:setOutfit(outfit)"
        ]
    },
    "creature:setTarget(target)": {
        "prefix": "creature:setTarget(target)",
        "body": [
            "creature:setTarget(target)"
        ]
    },
    "creature:teleportTo(position, pushMovement = false)": {
        "prefix": "creature:teleportTo(position, pushMovement = false)",
        "body": [
            "creature:teleportTo(position, pushMovement = false)"
        ]
    },
    "creature:unregisterEvent(name)": {
        "prefix": "creature:unregisterEvent(name)",
        "body": [
            "creature:unregisterEvent(name)"
        ]
    },
    "Game.createItem(itemId or name, count, position)": {
        "prefix": "Game.createItem(itemId or name, count, position)",
        "body": [
            "Game.createItem(itemId or name, count, position)"
        ]
    },
    "Game.createTile(position[, isDynamic = false])": {
        "prefix": "Game.createTile(position[, isDynamic = false])",
        "body": [
            "Game.createTile(position[, isDynamic = false])"
        ]
    },
    "Game.createTile(x, y, z[, isDynamic = false])": {
        "prefix": "Game.createTile(x, y, z[, isDynamic = false])",
        "body": [
            "Game.createTile(x, y, z[, isDynamic = false])"
        ]
    },
    "Game.createItemClassification(id)": {
        "prefix": "Game.createItemClassification(id)",
        "body": [
            "Game.createItemClassification(id)"
        ]
    },
    "Game.createMonster(monsterName, position, extended = false, force = false)": {
        "prefix": "Game.createMonster(monsterName, position, extended = false, force = false)",
        "body": [
            "Game.createMonster(monsterName, position, extended = false, force = false)"
        ]
    },
    "Game.createNpc(npcName, position, extended = false, force = false)": {
        "prefix": "Game.createNpc(npcName, position, extended = false, force = false)",
        "body": [
            "Game.createNpc(npcName, position, extended = false, force = false)"
        ]
    },
    "Game.generateNpc(npcName)": {
        "prefix": "Game.generateNpc(npcName)",
        "body": [
            "Game.generateNpc(npcName)"
        ]
    },
    "Game.createContainer(itemId, size[, position])": {
        "prefix": "Game.createContainer(itemId, size[, position])",
        "body": [
            "Game.createContainer(itemId, size[, position])"
        ]
    },
    "Game.getGameState()": {
        "prefix": "Game.getGameState()",
        "body": [
            "Game.getGameState()"
        ]
    },
    "Game.getMonsterCount()": {
        "prefix": "Game.getMonsterCount()",
        "body": [
            "Game.getMonsterCount()"
        ]
    },
    "Game.getNpcCount()": {
        "prefix": "Game.getNpcCount()",
        "body": [
            "Game.getNpcCount()"
        ]
    },
    "Game.getBoostedCreature()": {
        "prefix": "Game.getBoostedCreature()",
        "body": [
            "Game.getBoostedCreature()"
        ]
    },
    "Game.getPlayerCount()": {
        "prefix": "Game.getPlayerCount()",
        "body": [
            "Game.getPlayerCount()"
        ]
    },
    "Game.getBestiaryList(bool or string or BestiaryType_t)": {
        "prefix": "Game.getBestiaryList(bool or string or BestiaryType_t)",
        "body": [
            "Game.getBestiaryList([bool or string or BestiaryType_t)"
        ]
    },
    "Game.getBestiaryCharm()": {
        "prefix": "Game.getBestiaryCharm()",
        "body": [
            "Game.getBestiaryCharm()"
        ]
    },
    "Game.getClientVersion()": {
        "prefix": "Game.getClientVersion()",
        "body": [
            "Game.getClientVersion()"
        ]
    },
    "Game.getOfflinePlayer(name or id)": {
        "prefix": "Game.getOfflinePlayer(name or id)",
        "body": [
            "Game.getOfflinePlayer(name or id)"
        ]
    },
    "Game.getPlayers()": {
        "prefix": "Game.getPlayers()",
        "body": [
            "Game.getPlayers()"
        ]
    },
    "Game.getNormalizedPlayerName(name[, isNewName = false])": {
        "prefix": "Game.getNormalizedPlayerName(name[, isNewName = false])",
        "body": [
            "Game.getNormalizedPlayerName(name[, isNewName = false])"
        ]
    },
    "Game.getNormalizedGuildName(name)": {
        "prefix": "Game.getNormalizedGuildName(name)",
        "body": [
            "Game.getNormalizedGuildName(name)"
        ]
    },
    "Game.hasDistanceEffect(effectId)": {
        "prefix": "Game.hasDistanceEffect(effectId)",
        "body": [
            "Game.hasDistanceEffect(effectId)"
        ]
    },
    "Game.hasEffect(effectId)": {
        "prefix": "Game.hasEffect(effectId)",
        "body": [
            "Game.hasEffect(effectId)"
        ]
    },
    "Game.addInfluencedMonster(monster)": {
        "prefix": "Game.addInfluencedMonster(monster)",
        "body": [
            "Game.addInfluencedMonster(monster)"
        ]
    },
    "Game.removeInfluencedMonster(monsterId)": {
        "prefix": "Game.removeInfluencedMonster(monsterId)",
        "body": [
            "Game.removeInfluencedMonster(monsterId)"
        ]
    },
    "Game.getInfluencedMonsters()": {
        "prefix": "Game.getInfluencedMonsters()",
        "body": [
            "Game.getInfluencedMonsters()"
        ]
    },
    "Game.makeFiendishMonster(monsterId[default= 0])": {
        "prefix": "Game.makeFiendishMonster(monsterId[default= 0])",
        "body": [
            "Game.makeFiendishMonster(monsterId[default= 0]))"
        ]
    },
    "Game.removeFiendishMonster(monsterId)": {
        "prefix": "Game.removeFiendishMonster(monsterId)",
        "body": [
            "Game.removeFiendishMonster(monsterId)"
        ]
    },
    "Game.getFiendishMonsters()": {
        "prefix": "Game.getFiendishMonsters()",
        "body": [
            "Game.getFiendishMonsters()"
        ]
    },
    "Game.getLadderIds()": {
        "prefix": "Game.getLadderIds()",
        "body": [
            "Game.getLadderIds()"
        ]
    },
    "Game.getDummies()": {
        "prefix": "Game.getDummies()",
        "body": [
            "Game.getDummies()"
        ]
    },
    "Game.getTalkActions()": {
        "prefix": "Game.getTalkActions()",
        "body": [
            "Game.getTalkActions()"
        ]
    },
    "Game.getEventCallbacks()": {
        "prefix": "Game.getEventCallbacks()",
        "body": [
            "Game.getEventCallbacks()"
        ]
    },
    "Game.registerAchievement(id, name, description, secret, grade, points)": {
        "prefix": "Game.registerAchievement(id, name, description, secret, grade, points)",
        "body": [
            "Game.registerAchievement(id, name, description, secret, grade, points)"
        ]
    },
    "Game.getAchievementInfoById(id)": {
        "prefix": "Game.getAchievementInfoById(id)",
        "body": [
            "Game.getAchievementInfoById(id)"
        ]
    },
    "Game.getAchievementInfoByName(name)": {
        "prefix": "Game.getAchievementInfoByName(name)",
        "body": [
            "Game.getAchievementInfoByName(name)"
        ]
    },
    "Game.getSecretAchievements()": {
        "prefix": "Game.getSecretAchievements()",
        "body": [
            "Game.getSecretAchievements()"
        ]
    },
    "Game.getPublicAchievements()": {
        "prefix": "Game.getPublicAchievements()",
        "body": [
            "Game.getPublicAchievements()"
        ]
    },
    "Game.reload()": {
        "prefix": "Game.reload()",
        "body": [
            "Game.reload()"
        ]
    },
    "Game.getReturnMessage(value)": {
        "prefix": "Game.getReturnMessage(value)",
        "body": [
            "Game.getReturnMessage(value)"
        ]
    },
    "Game.getSpectators(position, multifloor = false, onlyPlayer = false, minRangeX = 0, maxRangeX = 0, minRangeY = 0, maxRangeY = 0)": {
        "prefix": "Game.getSpectators(position, multifloor = false, onlyPlayer = false, minRangeX = 0, maxRangeX = 0, minRangeY = 0, maxRangeY = 0)",
        "body": [
            "Game.getSpectators(position, multifloor = false, onlyPlayer = false, minRangeX = 0, maxRangeX = 0, minRangeY = 0, maxRangeY = 0)"
        ]
    },
    "Game.getWorldType()": {
        "prefix": "Game.getWorldType()",
        "body": [
            "Game.getWorldType()"
        ]
    },
    "Game.loadMap(path)": {
        "prefix": "Game.loadMap(path)",
        "body": [
            "Game.loadMap(path)"
        ]
    },
    "Game.loadMapChunk(path, position, remove)": {
        "prefix": "Game.loadMapChunk(path, position, remove)",
        "body": [
            "Game.loadMapChunk(path, position, remove)"
        ]
    },
    "Game.setGameState(state)": {
        "prefix": "Game.setGameState(state)",
        "body": [
            "Game.setGameState(state)"
        ]
    },
    "Game.setWorldType(type)": {
        "prefix": "Game.setWorldType(type)",
        "body": [
            "Game.setWorldType(type)"
        ]
    },
    "Game.startRaid(raidName)": {
        "prefix": "Game.startRaid(raidName)",
        "body": [
            "Game.startRaid(raidName)"
        ]
    },
    "Group(id)": {
        "prefix": "Group(id)",
        "body": [
            "Group(id)"
        ]
    },
    "group:getId()": {
        "prefix": "group:getId()",
        "body": [
            "group:getId()"
        ]
    },
    "group:hasFlag(flag)": {
        "prefix": "group:hasFlag(flag)",
        "body": [
            "group:hasFlag(flag)"
        ]
    },
    "group:getAccess()": {
        "prefix": "group:getAccess()",
        "body": [
            "group:getAccess()"
        ]
    },
    "group:getFlags()": {
        "prefix": "group:getFlags()",
        "body": [
            "group:getFlags()"
        ]
    },
    "group:getMaxDepotItems()": {
        "prefix": "group:getMaxDepotItems()",
        "body": [
            "group:getMaxDepotItems()"
        ]
    },
    "group:getMaxVipEntries()": {
        "prefix": "group:getMaxVipEntries()",
        "body": [
            "group:getMaxVipEntries()"
        ]
    },
    "group:getName()": {
        "prefix": "group:getName()",
        "body": [
            "group:getName()"
        ]
    },
    "Guild(id)": {
        "prefix": "Guild(id)",
        "body": [
            "Guild(id)"
        ]
    },
    "guild:addMember(player)": {
        "prefix": "guild:addMember(player)",
        "body": [
            "guild:addMember(player)"
        ]
    },
    "guild:addRank(id, name, level)": {
        "prefix": "guild:addRank(id, name, level)",
        "body": [
            "guild:addRank(id, name, level)"
        ]
    },
    "guild:getId()": {
        "prefix": "guild:getId()",
        "body": [
            "guild:getId()"
        ]
    },
    "guild:getMembersOnline()": {
        "prefix": "guild:getMembersOnline()",
        "body": [
            "guild:getMembersOnline()"
        ]
    },
    "guild:getMotd()": {
        "prefix": "guild:getMotd()",
        "body": [
            "guild:getMotd()"
        ]
    },
    "guild:getName()": {
        "prefix": "guild:getName()",
        "body": [
            "guild:getName()"
        ]
    },
    "guild:getRankById(id)": {
        "prefix": "guild:getRankById(id)",
        "body": [
            "guild:getRankById(id)"
        ]
    },
    "guild:getRankByLevel(level)": {
        "prefix": "guild:getRankByLevel(level)",
        "body": [
            "guild:getRankByLevel(level)"
        ]
    },
    "guild:removeMember(player)": {
        "prefix": "guild:removeMember(player)",
        "body": [
            "guild:removeMember(player)"
        ]
    },
    "guild:setMotd(motd)": {
        "prefix": "guild:setMotd(motd)",
        "body": [
            "guild:setMotd(motd)"
        ]
    },
    "guild:getBankBalance()": {
        "prefix": "guild:getBankBalance()",
        "body": [
            "guild:getBankBalance()"
        ]
    },
    "guild:setBankBalance(bankBalance)": {
        "prefix": "guild:setBankBalance(bankBalance)",
        "body": [
            "guild:setBankBalance(bankBalance)"
        ]
    },
    "House(id)": {
        "prefix": "House(id)",
        "body": [
            "House(id)"
        ]
    },
    "house:getAccessList(listId)": {
        "prefix": "house:getAccessList(listId)",
        "body": [
            "house:getAccessList(listId)"
        ]
    },
    "house:getBedCount()": {
        "prefix": "house:getBedCount()",
        "body": [
            "house:getBedCount()"
        ]
    },
    "house:getBeds()": {
        "prefix": "house:getBeds()",
        "body": [
            "house:getBeds()"
        ]
    },
    "house:getDoorCount()": {
        "prefix": "house:getDoorCount()",
        "body": [
            "house:getDoorCount()"
        ]
    },
    "house:getDoorIdByPosition(position)": {
        "prefix": "house:getDoorIdByPosition(position)",
        "body": [
            "house:getDoorIdByPosition(position)"
        ]
    },
    "house:getDoors()": {
        "prefix": "house:getDoors()",
        "body": [
            "house:getDoors()"
        ]
    },
    "house:getPrice()": {
        "prefix": "house:getPrice()",
        "body": [
            "house:getPrice()"
        ]
    },
    "house:getExitPosition()": {
        "prefix": "house:getExitPosition()",
        "body": [
            "house:getExitPosition()"
        ]
    },
    "house:getId()": {
        "prefix": "house:getId()",
        "body": [
            "house:getId()"
        ]
    },
    "house:getItems()": {
        "prefix": "house:getItems()",
        "body": [
            "house:getItems()"
        ]
    },
    "house:getName()": {
        "prefix": "house:getName()",
        "body": [
            "house:getName()"
        ]
    },
    "house:getOwnerGuid()": {
        "prefix": "house:getOwnerGuid()",
        "body": [
            "house:getOwnerGuid()"
        ]
    },
    "house:getHouseOwner()": {
        "prefix": "house:getHouseOwner()",
        "body": [
            "house:getHouseOwner()"
        ]
    },
    "house:getRent()": {
        "prefix": "house:getRent()",
        "body": [
            "house:getRent()"
        ]
    },
    "house:getTileCount()": {
        "prefix": "house:getTileCount()",
        "body": [
            "house:getTileCount()"
        ]
    },
    "house:getTiles()": {
        "prefix": "house:getTiles()",
        "body": [
            "house:getTiles()"
        ]
    },
    "house:getTown()": {
        "prefix": "house:getTown()",
        "body": [
            "house:getTown()"
        ]
    },
    "house:canEditAccessList(listId, player)": {
        "prefix": "house:canEditAccessList(listId, player)",
        "body": [
            "house:canEditAccessList(listId, player)"
        ]
    },
    "house:startTrade(player, tradePartner)": {
        "prefix": "house:startTrade(player, tradePartner)",
        "body": [
            "house:startTrade(player, tradePartner)"
        ]
    },
    "house:kickPlayer(player, targetPlayer)": {
        "prefix": "house:kickPlayer(player, targetPlayer)",
        "body": [
            "house:kickPlayer(player, targetPlayer)"
        ]
    },
    "house:isInvited(player)": {
        "prefix": "house:isInvited(player)",
        "body": [
            "house:isInvited(player)"
        ]
    },
    "house:setAccessList(listId, list)": {
        "prefix": "house:setAccessList(listId, list)",
        "body": [
            "house:setAccessList(listId, list)"
        ]
    },
    "house:setNewOwnerGuid(guid, updateDatabase = true)": {
        "prefix": "house:setNewOwnerGuid(guid, updateDatabase = true)",
        "body": [
            "house:setNewOwnerGuid(guid updateDatabase = true)"
        ]
    },
    "house:setHouseOwner(guid, updateDatabase = true)": {
        "prefix": "house:setHouseOwner(guid, updateDatabase = true)",
        "body": [
            "house:setHouseOwner(guid, updateDatabase = true)"
        ]
    },
    "house:hasItemOnTile()": {
        "prefix": "house:hasItemOnTile()",
        "body": [
            "house:hasItemOnTile()"
        ]
    },
    "house:hasNewOwnership(guid)": {
        "prefix": "house:hasNewOwnership(guid)",
        "body": [
            "house:hasNewOwnership(guid)"
        ]
    },
    "Item(uid)": {
        "prefix": "Item(uid)",
        "body": [
            "Item(uid)"
        ]
    },
    "item:clone()": {
        "prefix": "item:clone()",
        "body": [
            "item:clone()"
        ]
    },
    "item:decay()": {
        "prefix": "item:decay()",
        "body": [
            "item:decay()"
        ]
    },
    "item:decay(decayId)": {
        "prefix": "item:decay(decayId)",
        "body": [
            "item:decay(decayId)"
        ]
    },
    "item:canBeMoved()": {
        "prefix": "item:canBeMoved()",
        "body": [
            "item:canBeMoved()"
        ]
    },
    "item:canReceiveAutoCarpet()": {
        "prefix": "item:canReceiveAutoCarpet()",
        "body": [
            "item:canReceiveAutoCarpet()"
        ]
    },
    "item:getActionId()": {
        "prefix": "item:getActionId()",
        "body": [
            "item:getActionId()"
        ]
    },
    "item:getArticle()": {
        "prefix": "item:getArticle()",
        "body": [
            "item:getArticle()"
        ]
    },
    "item:getAttribute(key)": {
        "prefix": "item:getAttribute(key)",
        "body": [
            "item:getAttribute(key)"
        ]
    },
    "item:getCustomAttribute(key)": {
        "prefix": "item:getCustomAttribute(key)",
        "body": [
            "item:getCustomAttribute(key)"
        ]
    },
    "item:getCharges()": {
        "prefix": "item:getCharges()",
        "body": [
            "item:getCharges()"
        ]
    },
    "item:getCount()": {
        "prefix": "item:getCount()",
        "body": [
            "item:getCount()"
        ]
    },
    "item:getContainer()": {
        "prefix": "item:getContainer()",
        "body": [
            "item:getContainer()"
        ]
    },
    "item:getDescription(distance)": {
        "prefix": "item:getDescription(distance)",
        "body": [
            "item:getDescription(distance)"
        ]
    },
    "item:getFluidType()": {
        "prefix": "item:getFluidType()",
        "body": [
            "item:getFluidType()"
        ]
    },
    "item:getId()": {
        "prefix": "item:getId()",
        "body": [
            "item:getId()"
        ]
    },
    "item:getWeight()": {
        "prefix": "item:getWeight()",
        "body": [
            "item:getWeight()"
        ]
    },
    "item:getName()": {
        "prefix": "item:getName()",
        "body": [
            "item:getName()"
        ]
    },
    "item:getPluralName()": {
        "prefix": "item:getPluralName()",
        "body": [
            "item:getPluralName()"
        ]
    },
    "item:getPosition()": {
        "prefix": "item:getPosition()",
        "body": [
            "item:getPosition()"
        ]
    },
    "item:getSubType()": {
        "prefix": "item:getSubType()",
        "body": [
            "item:getSubType()"
        ]
    },
    "item:getTile()": {
        "prefix": "item:getTile()",
        "body": [
            "item:getTile()"
        ]
    },
    "item:getTier()": {
        "prefix": "item:getTier()",
        "body": [
            "item:getTier()"
        ]
    },
    "item:setTier(tier)": {
        "prefix": "item:setTier(tier)",
        "body": [
            "item:setTier(tier)"
        ]
    },
    "item:getClassification()": {
        "prefix": "item:getClassification()",
        "body": [
            "item:getClassification()"
        ]
    },
    "item:getType()": {
        "prefix": "item:getType()",
        "body": [
            "item:getType()"
        ]
    },
    "item:getUniqueId()": {
        "prefix": "item:getUniqueId()",
        "body": [
            "item:getUniqueId()"
        ]
    },
    "item:getImbuementSlot()": {
        "prefix": "item:getImbuementSlot()",
        "body": [
            "item:getImbuementSlot()"
        ]
    },
    "item:getImbuement()": {
        "prefix": "item:getImbuement()",
        "body": [
            "item:getImbuement()"
        ]
    },
    "item:isCreature()": {
        "prefix": "item:isCreature()",
        "body": [
            "item:isCreature()"
        ]
    },
    "item:isItem()": {
        "prefix": "item:isItem()",
        "body": [
            "item:isItem()"
        ]
    },
    "item:isOwner()": {
        "prefix": "item:isOwner()",
        "body": [
            "item:isOwner()"
        ]
    },
    "item:isInsideDepot(includeInbox = false)": {
        "prefix": "item:isInsideDepot(includeInbox = false)",
        "body": [
            "item:isInsideDepot(includeInbox = false)"
        ]
    },
    "item:moveTo(position)": {
        "prefix": "item:moveTo(position)",
        "body": [
            "item:moveTo(position)"
        ]
    },
    "item:moveToSlot(player, slot)": {
        "prefix": "item:moveToSlot(player, slot)",
        "body": [
            "item:moveToSlot(player, slot)"
        ]
    },
    "item:remove([count = -1])": {
        "prefix": "item:remove([count = -1])",
        "body": [
            "item:remove([count = -1])"
        ]
    },
    "item:removeAttribute(key)": {
        "prefix": "item:removeAttribute(key)",
        "body": [
            "item:removeAttribute(key)"
        ]
    },
    "item:removeCustomAttribute(key)": {
        "prefix": "item:removeCustomAttribute(key)",
        "body": [
            "item:removeCustomAttribute(key)"
        ]
    },
    "item:setActionId(actionId)": {
        "prefix": "item:setActionId(actionId)",
        "body": [
            "item:setActionId(actionId)"
        ]
    },
    "item:setDuration(minDuration, maxDuration = 0, decayTo = 0, showDuration = true)": {
        "prefix": "item:setDuration(minDuration, maxDuration = 0, decayTo = 0, showDuration = true)",
        "body": [
            "item:setDuration(minDuration, maxDuration = 0, decayTo = 0, showDuration = true)"
        ]
    },
    "item:setOwner(creature | creatureId)": {
        "prefix": "item:setOwner(creature | creatureId)",
        "body": [
            "item:setOwner(creature | creatureId)"
        ]
    },
    "item:getOwnerId()": {
        "prefix": "item:getOwnerId()",
        "body": [
            "item:getOwnerId()"
        ]
    },
    "item:getOwnerName()": {
        "prefix": "item:getOwnerName()",
        "body": [
            "item:getOwnerName()"
        ]
    },
    "item:hasOwner()": {
        "prefix": "item:hasOwner()",
        "body": [
            "item:hasOwner()"
        ]
    },
    "item:hasProperty(property)": {
        "prefix": "item:hasProperty(property)",
        "body": [
            "item:hasProperty(property)"
        ]
    },
    "item:hasAttribute(key)": {
        "prefix": "item:hasAttribute(key)",
        "body": [
            "item:hasAttribute(key)"
        ]
    },
    "item:setAttribute(key, value)": {
        "prefix": "item:setAttribute(key, value)",
        "body": [
            "item:setAttribute(key, value)"
        ]
    },
    "item:setCustomAttribute(key, value)": {
        "prefix": "item:setCustomAttribute(key, value)",
        "body": [
            "item:setCustomAttribute(key, value)"
        ]
    },
    "item:serializeAttributes(key, value)": {
        "prefix": "item:serializeAttributes(key, value)",
        "body": [
            "item:serializeAttributes(key, value)"
        ]
    },
    "item:split([count = 1])": {
        "prefix": "item:split([count = 1])",
        "body": [
            "item:split([count = 1])"
        ]
    },
    "item:transform(itemId, count/subType = -1)": {
        "prefix": "item:transform(itemId, count/subType = -1)",
        "body": [
            "item:transform(itemId, count/subType = -1)"
        ]
    },
    "ItemType(id or name)": {
        "prefix": "ItemType(id or name)",
        "body": [
            "ItemType(id or name)"
        ]
    },
    "itemType:isCorpse()": {
        "prefix": "itemType:isCorpse()",
        "body": [
            "itemType:isCorpse()"
        ]
    },
    "itemType:isDoor()": {
        "prefix": "itemType:isDoor()",
        "body": [
            "itemType:isDoor()"
        ]
    },
    "itemType:isContainer()": {
        "prefix": "itemType:isContainer()",
        "body": [
            "itemType:isContainer()"
        ]
    },
    "itemType:isFluidContainer()": {
        "prefix": "itemType:isFluidContainer()",
        "body": [
            "itemType:isFluidContainer()"
        ]
    },
    "itemType:isMovable()": {
        "prefix": "itemType:isMovable()",
        "body": [
            "itemType:isMovable()"
        ]
    },
    "itemType:isRune()": {
        "prefix": "itemType:isRune()",
        "body": [
            "itemType:isRune()"
        ]
    },
    "itemType:isStackable()": {
        "prefix": "itemType:isStackable()",
        "body": [
            "itemType:isStackable()"
        ]
    },
    "itemType:isStowable()": {
        "prefix": "itemType:isStowable()",
        "body": [
            "itemType:isStowable()"
        ]
    },
    "itemType:isReadable()": {
        "prefix": "itemType:isReadable()",
        "body": [
            "itemType:isReadable()"
        ]
    },
    "itemType:isWritable()": {
        "prefix": "itemType:isWritable()",
        "body": [
            "itemType:isWritable()"
        ]
    },
    "itemType:isBlocking()": {
        "prefix": "itemType:isBlocking()",
        "body": [
            "itemType:isBlocking()"
        ]
    },
    "itemType:isGroundTile()": {
        "prefix": "itemType:isGroundTile()",
        "body": [
            "itemType:isGroundTile()"
        ]
    },
    "itemType:isMagicField()": {
        "prefix": "itemType:isMagicField()",
        "body": [
            "itemType:isMagicField()"
        ]
    },
    "itemType:isMultiUse()": {
        "prefix": "itemType:isMultiUse()",
        "body": [
            "itemType:isMultiUse()"
        ]
    },
    "itemType:isPickupable()": {
        "prefix": "itemType:isPickupable()",
        "body": [
            "itemType:isPickupable()"
        ]
    },
    "itemType:isKey()": {
        "prefix": "itemType:isKey()",
        "body": [
            "itemType:isKey()"
        ]
    },
    "itemType:isQuiver()": {
        "prefix": "itemType:isQuiver()",
        "body": [
            "itemType:isQuiver()"
        ]
    },
    "itemType:getType()": {
        "prefix": "itemType:getType()",
        "body": [
            "itemType:getType()"
        ]
    },
    "itemType:getId()": {
        "prefix": "itemType:getId()",
        "body": [
            "itemType:getId()"
        ]
    },
    "itemType:getName()": {
        "prefix": "itemType:getName()",
        "body": [
            "itemType:getName()"
        ]
    },
    "itemType:getPluralName()": {
        "prefix": "itemType:getPluralName()",
        "body": [
            "itemType:getPluralName()"
        ]
    },
    "itemType:getArticle()": {
        "prefix": "itemType:getArticle()",
        "body": [
            "itemType:getArticle()"
        ]
    },
    "itemType:getDescription([count])": {
        "prefix": "itemType:getDescription([count])",
        "body": [
            "itemType:getDescription([count])"
        ]
    },
    "itemType:getSlotPosition()": {
        "prefix": "itemType:getSlotPosition()",
        "body": [
            "itemType:getSlotPosition()"
        ]
    },
    "itemType:getCharges()": {
        "prefix": "itemType:getCharges()",
        "body": [
            "itemType:getCharges()"
        ]
    },
    "itemType:getFluidSource()": {
        "prefix": "itemType:getFluidSource()",
        "body": [
            "itemType:getFluidSource()"
        ]
    },
    "itemType:getCapacity()": {
        "prefix": "itemType:getCapacity()",
        "body": [
            "itemType:getCapacity()"
        ]
    },
    "itemType:getWeight([count = 1])": {
        "prefix": "itemType:getWeight([count = 1])",
        "body": [
            "itemType:getWeight([count = 1])"
        ]
    },
    "itemType:getStackSize()": {
        "prefix": "itemType:getStackSize()",
        "body": [
            "itemType:getStackSize()"
        ]
    },
    "itemType:getHitChance()": {
        "prefix": "itemType:getHitChance()",
        "body": [
            "itemType:getHitChance()"
        ]
    },
    "itemType:getShootRange()": {
        "prefix": "itemType:getShootRange()",
        "body": [
            "itemType:getShootRange()"
        ]
    },
    "itemType:getAttack()": {
        "prefix": "itemType:getAttack()",
        "body": [
            "itemType:getAttack()"
        ]
    },
    "itemType:getDefense()": {
        "prefix": "itemType:getDefense()",
        "body": [
            "itemType:getDefense()"
        ]
    },
    "itemType:getExtraDefense()": {
        "prefix": "itemType:getExtraDefense()",
        "body": [
            "itemType:getExtraDefense()"
        ]
    },
    "itemType:getImbuementSlot()": {
        "prefix": "itemType:getImbuementSlot()",
        "body": [
            "itemType:getImbuementSlot()"
        ]
    },
    "itemType:getArmor()": {
        "prefix": "itemType:getArmor()",
        "body": [
            "itemType:getArmor()"
        ]
    },
    "itemType:getWeaponType()": {
        "prefix": "itemType:getWeaponType()",
        "body": [
            "itemType:getWeaponType()"
        ]
    },
    "itemType:getAmmoType()": {
        "prefix": "itemType:getAmmoType()",
        "body": [
            "itemType:getAmmoType()"
        ]
    },
    "itemType:getElementType()": {
        "prefix": "itemType:getElementType()",
        "body": [
            "itemType:getElementType()"
        ]
    },
    "itemType:getElementDamage()": {
        "prefix": "itemType:getElementDamage()",
        "body": [
            "itemType:getElementDamage()"
        ]
    },
    "itemType:getTransformEquipId()": {
        "prefix": "itemType:getTransformEquipId()",
        "body": [
            "itemType:getTransformEquipId()"
        ]
    },
    "itemType:getTransformDeEquipId()": {
        "prefix": "itemType:getTransformDeEquipId()",
        "body": [
            "itemType:getTransformDeEquipId()"
        ]
    },
    "itemType:getDestroyId()": {
        "prefix": "itemType:getDestroyId()",
        "body": [
            "itemType:getDestroyId()"
        ]
    },
    "itemType:getDecayId()": {
        "prefix": "itemType:getDecayId()",
        "body": [
            "itemType:getDecayId()"
        ]
    },
    "itemType:getRequiredLevel()": {
        "prefix": "itemType:getRequiredLevel()",
        "body": [
            "itemType:getRequiredLevel()"
        ]
    },
    "itemType:getSpeed()": {
        "prefix": "itemType:getSpeed()",
        "body": [
            "itemType:getSpeed()"
        ]
    },
    "itemType:getBaseSpeed()": {
        "prefix": "itemType:getBaseSpeed()",
        "body": [
            "itemType:getBaseSpeed()"
        ]
    },
    "itemType:getDecayTime()": {
        "prefix": "itemType:getDecayTime()",
        "body": [
            "itemType:getDecayTime()"
        ]
    },
    "itemType:getShowDuration()": {
        "prefix": "itemType:getShowDuration()",
        "body": [
            "itemType:getShowDuration()"
        ]
    },
    "itemType:getWrapableTo()": {
        "prefix": "itemType:getWrapableTo()",
        "body": [
            "itemType:getWrapableTo()"
        ]
    },
    "itemType:hasSubType()": {
        "prefix": "itemType:hasSubType()",
        "body": [
            "itemType:hasSubType()"
        ]
    },
    "itemType:getVocationString()": {
        "prefix": "itemType:getVocationString()",
        "body": [
            "itemType:getVocationString()"
        ]
    },
    "ModalWindow(id, title, message)": {
        "prefix": "ModalWindow(id, title, message)",
        "body": [
            "ModalWindow(id, title, message)"
        ]
    },
    "modalWindow:getId()": {
        "prefix": "modalWindow:getId()",
        "body": [
            "modalWindow:getId()"
        ]
    },
    "modalWindow:getTitle()": {
        "prefix": "modalWindow:getTitle()",
        "body": [
            "modalWindow:getTitle()"
        ]
    },
    "modalWindow:getMessage()": {
        "prefix": "modalWindow:getMessage()",
        "body": [
            "modalWindow:getMessage()"
        ]
    },
    "modalWindow:setTitle(text)": {
        "prefix": "modalWindow:setTitle(text)",
        "body": [
            "modalWindow:setTitle(text)"
        ]
    },
    "modalWindow:setMessage(text)": {
        "prefix": "modalWindow:setMessage(text)",
        "body": [
            "modalWindow:setMessage(text)"
        ]
    },
    "modalWindow:getButtonCount()": {
        "prefix": "modalWindow:getButtonCount()",
        "body": [
            "modalWindow:getButtonCount()"
        ]
    },
    "modalWindow:getChoiceCount()": {
        "prefix": "modalWindow:getChoiceCount()",
        "body": [
            "modalWindow:getChoiceCount()"
        ]
    },
    "modalWindow:addButton(id, text)": {
        "prefix": "modalWindow:addButton(id, text)",
        "body": [
            "modalWindow:addButton(id, text)"
        ]
    },
    "modalWindow:addChoice(id, text)": {
        "prefix": "modalWindow:addChoice(id, text)",
        "body": [
            "modalWindow:addChoice(id, text)"
        ]
    },
    "modalWindow:getDefaultEnterButton()": {
        "prefix": "modalWindow:getDefaultEnterButton()",
        "body": [
            "modalWindow:getDefaultEnterButton()"
        ]
    },
    "modalWindow:setDefaultEnterButton(buttonId)": {
        "prefix": "modalWindow:setDefaultEnterButton(buttonId)",
        "body": [
            "modalWindow:setDefaultEnterButton(buttonId)"
        ]
    },
    "modalWindow:getDefaultEscapeButton()": {
        "prefix": "modalWindow:getDefaultEscapeButton()",
        "body": [
            "modalWindow:getDefaultEscapeButton()"
        ]
    },
    "modalWindow:setDefaultEscapeButton(buttonId)": {
        "prefix": "modalWindow:setDefaultEscapeButton(buttonId)",
        "body": [
            "modalWindow:setDefaultEscapeButton(buttonId)"
        ]
    },
    "modalWindow:hasPriority()": {
        "prefix": "modalWindow:hasPriority()",
        "body": [
            "modalWindow:hasPriority()"
        ]
    },
    "modalWindow:setPriority(priority)": {
        "prefix": "modalWindow:setPriority(priority)",
        "body": [
            "modalWindow:setPriority(priority)"
        ]
    },
    "modalWindow:sendToPlayer(player)": {
        "prefix": "modalWindow:sendToPlayer(player)",
        "body": [
            "modalWindow:sendToPlayer(player)"
        ]
    },
    "Monster(id)": {
        "prefix": "Monster(id)",
        "body": [
            "Monster(id)"
        ]
    },
    "monster:isMonster()": {
        "prefix": "monster:isMonster()",
        "body": [
            "monster:isMonster()"
        ]
    },
    "monster:getType()": {
        "prefix": "monster:getType()",
        "body": [
            "monster:getType()"
        ]
    },
    "monster:setType(name or raceid, restoreHealth = false)": {
        "prefix": "monster:setType(name or raceid, restoreHealth = false)",
        "body": [
            "monster:setType(name or raceid, restoreHealth = false)"
        ]
    },
    "monster:getSpawnPosition()": {
        "prefix": "monster:getSpawnPosition()",
        "body": [
            "monster:getSpawnPosition()"
        ]
    },
    "monster:isInSpawnRange([position])": {
        "prefix": "monster:isInSpawnRange([position])",
        "body": [
            "monster:isInSpawnRange([position])"
        ]
    },
    "monster:isIdle()": {
        "prefix": "monster:isIdle()",
        "body": [
            "monster:isIdle()"
        ]
    },
    "monster:setIdle(idle)": {
        "prefix": "monster:setIdle(idle)",
        "body": [
            "monster:setIdle(idle)"
        ]
    },
    "monster:isTarget(creature)": {
        "prefix": "monster:isTarget(creature)",
        "body": [
            "monster:isTarget(creature)"
        ]
    },
    "monster:isOpponent(creature)": {
        "prefix": "monster:isOpponent(creature)",
        "body": [
            "monster:isOpponent(creature)"
        ]
    },
    "monster:isFriend(creature)": {
        "prefix": "monster:isFriend(creature)",
        "body": [
            "monster:isFriend(creature)"
        ]
    },
    "monster:addFriend(creature)": {
        "prefix": "monster:addFriend(creature)",
        "body": [
            "monster:addFriend(creature)"
        ]
    },
    "monster:removeFriend(creature)": {
        "prefix": "monster:removeFriend(creature)",
        "body": [
            "monster:removeFriend(creature)"
        ]
    },
    "monster:getFriendList()": {
        "prefix": "monster:getFriendList()",
        "body": [
            "monster:getFriendList()"
        ]
    },
    "monster:getFriendCount()": {
        "prefix": "monster:getFriendCount()",
        "body": [
            "monster:getFriendCount()"
        ]
    },
    "monster:addTarget(creature[, pushFront = false])": {
        "prefix": "monster:addTarget(creature[, pushFront = false])",
        "body": [
            "monster:addTarget(creature[, pushFront = false])"
        ]
    },
    "monster:removeTarget(creature)": {
        "prefix": "monster:removeTarget(creature)",
        "body": [
            "monster:removeTarget(creature)"
        ]
    },
    "monster:getTargetList()": {
        "prefix": "monster:getTargetList()",
        "body": [
            "monster:getTargetList()"
        ]
    },
    "monster:getTargetCount()": {
        "prefix": "monster:getTargetCount()",
        "body": [
            "monster:getTargetCount()"
        ]
    },
    "monster:changeTargetDistance(distance[, duration = 12000])": {
        "prefix": "monster:changeTargetDistance(distance[, duration = 12000])",
        "body": [
            "monster:changeTargetDistance(distance[, duration = 12000])"
        ]
    },
    "monster:isChallenged()": {
        "prefix": "monster:isChallenged()",
        "body": [
            "monster:isChallenged()"
        ]
    },
    "monster:selectTarget(creature)": {
        "prefix": "monster:selectTarget(creature)",
        "body": [
            "monster:selectTarget(creature)"
        ]
    },
    "monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])": {
        "prefix": "monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])",
        "body": [
            "monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])"
        ]
    },
    "monster:setSpawnPosition(interval)": {
        "prefix": "monster:setSpawnPosition(interval)",
        "body": [
            "monster:setSpawnPosition(interval)"
        ]
    },
    "monster:getRespawnType()": {
        "prefix": "monster:getRespawnType()",
        "body": [
            "monster:getRespawnType()"
        ]
    },
    "monster:getTimeToChangeFiendish()": {
        "prefix": "monster:getTimeToChangeFiendish()",
        "body": [
            "monster:getTimeToChangeFiendish()"
        ]
    },
    "monster:setTimeToChangeFiendish(endTime)": {
        "prefix": "monster:setTimeToChangeFiendish(endTime)",
        "body": [
            "monster:setTimeToChangeFiendish(endTime)"
        ]
    },
    "monster:getMonsterForgeClassification()": {
        "prefix": "monster:getMonsterForgeClassification()",
        "body": [
            "monster:getMonsterForgeClassification()"
        ]
    },
    "monster:setMonsterForgeClassification(classication)": {
        "prefix": "monster:setMonsterForgeClassification(classication)",
        "body": [
            "monster:setMonsterForgeClassification(classication)"
        ]
    },
    "monster:getForgeStack()": {
        "prefix": "monster:getForgeStack()",
        "body": [
            "monster:getForgeStack()"
        ]
    },
    "monster:setForgeStack(stack)": {
        "prefix": "monster:setForgeStack(stack)",
        "body": [
            "monster:setForgeStack(stack)"
        ]
    },
    "monster:configureForgeSystem()": {
        "prefix": "monster:configureForgeSystem()",
        "body": [
            "monster:configureForgeSystem()"
        ]
    },
    "monster:clearFiendishStatus()": {
        "prefix": "monster:clearFiendishStatus()",
        "body": [
            "monster:clearFiendishStatus()"
        ]
    },
    "monster:isForgeable()": {
        "prefix": "monster:isForgeable()",
        "body": [
            "monster:isForgeable()"
        ]
    },
    "monster:getName()": {
        "prefix": "monster:getName()",
        "body": [
            "monster:getName()"
        ]
    },
    "monster:setName(name[, nameDescription])": {
        "prefix": "monster:setName(name[, nameDescription])",
        "body": [
            "monster:setName(name[, nameDescription])"
        ]
    },
    "monster:addReflectElement(type, percent)": {
        "prefix": "monster:addReflectElement(type, percent)",
        "body": [
            "monster:addReflectElement(type, percent)"
        ]
    },
    "monster:addDefense(defense)": {
        "prefix": "monster:addDefense(defense)",
        "body": [
            "monster:addDefense(defense)"
        ]
    },
    "monster:getDefense(defense)": {
        "prefix": "monster:getDefense(defense)",
        "body": [
            "monster:getDefense(defense)"
        ]
    },
    "monster:isDead()": {
        "prefix": "monster:isDead()",
        "body": [
            "monster:isDead()"
        ]
    },
    "MonsterType(id or name)": {
        "prefix": "MonsterType(id or name)",
        "body": [
            "MonsterType(id or name)"
        ]
    },
    "MonsterType.new(id or name)": {
        "prefix": "MonsterType.new(id or name)",
        "body": [
            "MonsterType.new(id or name)"
        ]
    },
    "monsterType:canPushCreatures()": {
        "prefix": "monsterType:canPushCreatures()",
        "body": [
            "monsterType:canPushCreatures()"
        ]
    },
    "monsterType:canPushItems()": {
        "prefix": "monsterType:canPushItems()",
        "body": [
            "monsterType:canPushItems()"
        ]
    },
    "monsterType:getArmor()": {
        "prefix": "monsterType:getArmor()",
        "body": [
            "monsterType:getArmor()"
        ]
    },
    "monsterType:getAttackList()": {
        "prefix": "monsterType:getAttackList()",
        "body": [
            "monsterType:getAttackList()"
        ]
    },
    "monsterType:getBaseSpeed()": {
        "prefix": "monsterType:getBaseSpeed()",
        "body": [
            "monsterType:getBaseSpeed()"
        ]
    },
    "monsterType:getChangeTargetChance()": {
        "prefix": "monsterType:getChangeTargetChance()",
        "body": [
            "monsterType:getChangeTargetChance()"
        ]
    },
    "monsterType:getChangeTargetSpeed()": {
        "prefix": "monsterType:getChangeTargetSpeed()",
        "body": [
            "monsterType:getChangeTargetSpeed()"
        ]
    },
    "monsterType:getCombatImmunities()": {
        "prefix": "monsterType:getCombatImmunities()",
        "body": [
            "monsterType:getCombatImmunities()"
        ]
    },
    "monsterType:getConditionImmunities()": {
        "prefix": "monsterType:getConditionImmunities()",
        "body": [
            "monsterType:getConditionImmunities()"
        ]
    },
    "monsterType:getCorpseId()": {
        "prefix": "monsterType:getCorpseId()",
        "body": [
            "monsterType:getCorpseId()"
        ]
    },
    "monsterType:getCreatureEvents()": {
        "prefix": "monsterType:getCreatureEvents()",
        "body": [
            "monsterType:getCreatureEvents()"
        ]
    },
    "monsterType:getDefense()": {
        "prefix": "monsterType:getDefense()",
        "body": [
            "monsterType:getDefense()"
        ]
    },
    "monsterType:getDefenseList()": {
        "prefix": "monsterType:getDefenseList()",
        "body": [
            "monsterType:getDefenseList()"
        ]
    },
    "monsterType:getElementList()": {
        "prefix": "monsterType:getElementList()",
        "body": [
            "monsterType:getElementList()"
        ]
    },
    "monsterType:getExperience()": {
        "prefix": "monsterType:getExperience()",
        "body": [
            "monsterType:getExperience()"
        ]
    },
    "monsterType:getExperienceForLevel(level)": {
        "prefix": "monsterType:getExperienceForLevel(level)",
        "body": [
            "monsterType:getExperienceForLevel(level)"
        ]
    },
    "monsterType:getHealth()": {
        "prefix": "monsterType:getHealth()",
        "body": [
            "monsterType:getHealth()"
        ]
    },
    "monsterType:getLight()": {
        "prefix": "monsterType:getLight()",
        "body": [
            "monsterType:getLight()"
        ]
    },
    "monsterType:getLoot()": {
        "prefix": "monsterType:getLoot()",
        "body": [
            "monsterType:getLoot()"
        ]
    },
    "monsterType:getManaCost()": {
        "prefix": "monsterType:getManaCost()",
        "body": [
            "monsterType:getManaCost()"
        ]
    },
    "monsterType:getMaxHealth()": {
        "prefix": "monsterType:getMaxHealth()",
        "body": [
            "monsterType:getMaxHealth()"
        ]
    },
    "monsterType:getMaxSummons()": {
        "prefix": "monsterType:getMaxSummons()",
        "body": [
            "monsterType:getMaxSummons()"
        ]
    },
    "monsterType:getName()": {
        "prefix": "monsterType:getName()",
        "body": [
            "monsterType:getName()"
        ]
    },
    "monsterType:getNameDescription()": {
        "prefix": "monsterType:getNameDescription()",
        "body": [
            "monsterType:getNameDescription()"
        ]
    },
    "monsterType:getOutfit()": {
        "prefix": "monsterType:getOutfit()",
        "body": [
            "monsterType:getOutfit()"
        ]
    },
    "monsterType:getRace()": {
        "prefix": "monsterType:getRace()",
        "body": [
            "monsterType:getRace()"
        ]
    },
    "monsterType:getRunHealth()": {
        "prefix": "monsterType:getRunHealth()",
        "body": [
            "monsterType:getRunHealth()"
        ]
    },
    "monsterType:getStaticAttackChance()": {
        "prefix": "monsterType:getStaticAttackChance()",
        "body": [
            "monsterType:getStaticAttackChance()"
        ]
    },
    "monsterType:getSummonList()": {
        "prefix": "monsterType:getSummonList()",
        "body": [
            "monsterType:getSummonList()"
        ]
    },
    "monsterType:getTargetDistance()": {
        "prefix": "monsterType:getTargetDistance()",
        "body": [
            "monsterType:getTargetDistance()"
        ]
    },
    "monsterType:getVoices()": {
        "prefix": "monsterType:getVoices()",
        "body": [
            "monsterType:getVoices()"
        ]
    },
    "monsterType:getYellChance()": {
        "prefix": "monsterType:getYellChance()",
        "body": [
            "monsterType:getYellChance()"
        ]
    },
    "monsterType:getYellSpeedTicks()": {
        "prefix": "monsterType:getYellSpeedTicks()",
        "body": [
            "monsterType:getYellSpeedTicks()"
        ]
    },
    "monsterType:isAttackable()": {
        "prefix": "monsterType:isAttackable()",
        "body": [
            "monsterType:isAttackable()"
        ]
    },
    "monsterType:isConvinceable()": {
        "prefix": "monsterType:isConvinceable()",
        "body": [
            "monsterType:isConvinceable()"
        ]
    },
    "monsterType:isHealthShown()": {
        "prefix": "monsterType:isHealthShown()",
        "body": [
            "monsterType:isHealthShown()"
        ]
    },
    "monsterType:isHostile()": {
        "prefix": "monsterType:isHostile()",
        "body": [
            "monsterType:isHostile()"
        ]
    },
    "monsterType:isIllusionable()": {
        "prefix": "monsterType:isIllusionable()",
        "body": [
            "monsterType:isIllusionable()"
        ]
    },
    "monsterType:isPushable()": {
        "prefix": "monsterType:isPushable()",
        "body": [
            "monsterType:isPushable()"
        ]
    },
    "monsterType:isSummonable()": {
        "prefix": "monsterType:isSummonable()",
        "body": [
            "monsterType:isSummonable()"
        ]
    },
    "NetworkMessage.new()": {
        "prefix": "NetworkMessage.new()",
        "body": [
            "NetworkMessage.new()"
        ]
    },
    "networkMessage:addByte(number)": {
        "prefix": "networkMessage:addByte(number)",
        "body": [
            "networkMessage:addByte(number)"
        ]
    },
    "networkMessage:addDouble(number)": {
        "prefix": "networkMessage:addDouble(number)",
        "body": [
            "networkMessage:addDouble(number)"
        ]
    },
    "networkMessage:addItem(item[, protocolVersion = CLIENT_VERSION_MIN])": {
        "prefix": "networkMessage:addItem(item[, protocolVersion = CLIENT_VERSION_MIN])",
        "body": [
            "networkMessage:addItem(item[, protocolVersion = CLIENT_VERSION_MIN])"
        ]
    },
    "networkMessage:addItemId(itemId[, protocolVersion = CLIENT_VERSION_MIN])": {
        "prefix": "networkMessage:addItemId(itemId[, protocolVersion = CLIENT_VERSION_MIN])",
        "body": [
            "networkMessage:addItemId(itemId[, protocolVersion = CLIENT_VERSION_MIN])"
        ]
    },
    "networkMessage:addPosition(position)": {
        "prefix": "networkMessage:addPosition(position)",
        "body": [
            "networkMessage:addPosition(position)"
        ]
    },
    "networkMessage:addString(string)": {
        "prefix": "networkMessage:addString(string)",
        "body": [
            "networkMessage:addString(string)"
        ]
    },
    "networkMessage:addU16(number)": {
        "prefix": "networkMessage:addU16(number)",
        "body": [
            "networkMessage:addU16(number)"
        ]
    },
    "networkMessage:addU32(number)": {
        "prefix": "networkMessage:addU32(number)",
        "body": [
            "networkMessage:addU32(number)"
        ]
    },
    "networkMessage:addU64(number)": {
        "prefix": "networkMessage:addU64(number)",
        "body": [
            "networkMessage:addU64(number)"
        ]
    },
    "networkMessage:getByte()": {
        "prefix": "networkMessage:getByte()",
        "body": [
            "networkMessage:getByte()"
        ]
    },
    "networkMessage:getPosition()": {
        "prefix": "networkMessage:getPosition()",
        "body": [
            "networkMessage:getPosition()"
        ]
    },
    "networkMessage:getString()": {
        "prefix": "networkMessage:getString()",
        "body": [
            "networkMessage:getString()"
        ]
    },
    "networkMessage:getU16()": {
        "prefix": "networkMessage:getU16()",
        "body": [
            "networkMessage:getU16()"
        ]
    },
    "networkMessage:getU32()": {
        "prefix": "networkMessage:getU32()",
        "body": [
            "networkMessage:getU32()"
        ]
    },
    "networkMessage:getU64()": {
        "prefix": "networkMessage:getU64()",
        "body": [
            "networkMessage:getU64()"
        ]
    },
    "networkMessage:reset()": {
        "prefix": "networkMessage:reset()",
        "body": [
            "networkMessage:reset()"
        ]
    },
    "networkMessage:sendToPlayer(player)": {
        "prefix": "networkMessage:sendToPlayer(player)",
        "body": [
            "networkMessage:sendToPlayer(player)"
        ]
    },
    "networkMessage:skipBytes(number)": {
        "prefix": "networkMessage:skipBytes(number)",
        "body": [
            "networkMessage:skipBytes(number)"
        ]
    },
    "Npc([id])": {
        "prefix": "Npc([id])",
        "body": [
            "Npc([id])"
        ]
    },
    "Npc.new([id])": {
        "prefix": "Npc.new([id])",
        "body": [
            "Npc.new([id])"
        ]
    },
    "npc:isNpc()": {
        "prefix": "npc:isNpc()",
        "body": [
            "npc:isNpc()"
        ]
    },
    "party:addInvite(player)": {
        "prefix": "party:addInvite(player)",
        "body": [
            "party:addInvite(player)"
        ]
    },
    "party:addMember(player)": {
        "prefix": "party:addMember(player)",
        "body": [
            "party:addMember(player)"
        ]
    },
    "party:disband()": {
        "prefix": "party:disband()",
        "body": [
            "party:disband()"
        ]
    },
    "party:getInviteeCount()": {
        "prefix": "party:getInviteeCount()",
        "body": [
            "party:getInviteeCount()"
        ]
    },
    "party:getInvitees()": {
        "prefix": "party:getInvitees()",
        "body": [
            "party:getInvitees()"
        ]
    },
    "party:getLeader()": {
        "prefix": "party:getLeader()",
        "body": [
            "party:getLeader()"
        ]
    },
    "party:getMemberCount()": {
        "prefix": "party:getMemberCount()",
        "body": [
            "party:getMemberCount()"
        ]
    },
    "party:getMembers()": {
        "prefix": "party:getMembers()",
        "body": [
            "party:getMembers()"
        ]
    },
    "party:isSharedExperienceActive()": {
        "prefix": "party:isSharedExperienceActive()",
        "body": [
            "party:isSharedExperienceActive()"
        ]
    },
    "party:isSharedExperienceEnabled()": {
        "prefix": "party:isSharedExperienceEnabled()",
        "body": [
            "party:isSharedExperienceEnabled()"
        ]
    },
    "party:removeInvite(player)": {
        "prefix": "party:removeInvite(player)",
        "body": [
            "party:removeInvite(player)"
        ]
    },
    "party:removeMember(player)": {
        "prefix": "party:removeMember(player)",
        "body": [
            "party:removeMember(player)"
        ]
    },
    "party:setLeader(player)": {
        "prefix": "party:setLeader(player)",
        "body": [
            "party:setLeader(player)"
        ]
    },
    "party:setSharedExperience(active)": {
        "prefix": "party:setSharedExperience(active)",
        "body": [
            "party:setSharedExperience(active)"
        ]
    },
    "party:shareExperience(experience)": {
        "prefix": "party:shareExperience(experience)",
        "body": [
            "party:shareExperience(experience)"
        ]
    },
    "Player(id or name or userdata)": {
        "prefix": "Player(id or name or userdata)",
        "body": [
            "Player(id or name or userdata)"
        ]
    },
    "player:sendInventory()": {
        "prefix": "player:sendInventory()",
        "body": [
            "player:sendInventory()"
        ]
    },
    "player:sendLootStats(item, count)": {
        "prefix": "player:sendLootStats(item, count)",
        "body": [
            "player:sendLootStats(item, count)"
        ]
    },
    "player:updateSupplyTracker(item)": {
        "prefix": "player:updateSupplyTracker(item)",
        "body": [
            "player:updateSupplyTracker(item)"
        ]
    },
    "player:updateKillTracker(creature, corpse)": {
        "prefix": "player:updateKillTracker(creature, corpse)",
        "body": [
            "player:updateKillTracker(creature, corpse)"
        ]
    },
    "player:resetCharmsBestiary()": {
        "prefix": "player:resetCharmsBestiary()",
        "body": [
            "player:resetCharmsBestiary()"
        ]
    },
    "player:unlockAllCharmRunes()": {
        "prefix": "player:unlockAllCharmRunes()",
        "body": [
            "player:unlockAllCharmRunes()"
        ]
    },
    "player:addCharmPoints()": {
        "prefix": "player:addCharmPoints()",
        "body": [
            "player:addCharmPoints()"
        ]
    },
    "player:isPlayer()": {
        "prefix": "player:isPlayer()",
        "body": [
            "player:isPlayer()"
        ]
    },
    "player:getGuid()": {
        "prefix": "player:getGuid()",
        "body": [
            "player:getGuid()"
        ]
    },
    "player:getIp()": {
        "prefix": "player:getIp()",
        "body": [
            "player:getIp()"
        ]
    },
    "player:getAccountId()": {
        "prefix": "player:getAccountId()",
        "body": [
            "player:getAccountId()"
        ]
    },
    "player:getLastLoginSaved()": {
        "prefix": "player:getLastLoginSaved()",
        "body": [
            "player:getLastLoginSaved()"
        ]
    },
    "player:getLastLogout()": {
        "prefix": "player:getLastLogout()",
        "body": [
            "player:getLastLogout()"
        ]
    },
    "player:getAccountType()": {
        "prefix": "player:getAccountType()",
        "body": [
            "player:getAccountType()"
        ]
    },
    "player:setAccountType(accountType)": {
        "prefix": "player:setAccountType(accountType)",
        "body": [
            "player:setAccountType(accountType)"
        ]
    },
    "player:addBestiaryKill(name[, amount = 1])": {
        "prefix": "player:addBestiaryKill(name[, amount = 1])",
        "body": [
            "player:addBestiaryKill(name[, amount = 1])"
        ]
    },
    "player:isMonsterBestiaryUnlocked(raceId)": {
        "prefix": "player:isMonsterBestiaryUnlocked(raceId)",
        "body": [
            "player:isMonsterBestiaryUnlocked(raceId)"
        ]
    },
    "player:getCharmMonsterType(charmRune_t)": {
        "prefix": "player:getCharmMonsterType(charmRune_t)",
        "body": [
            "player:getCharmMonsterType(charmRune_t)"
        ]
    },
    "player:removePreyStamina(amount)": {
        "prefix": "player:removePreyStamina(amount)",
        "body": [
            "player:removePreyStamina(amount)"
        ]
    },
    "player:addPreyCards(amount)": {
        "prefix": "player:addPreyCards(amount)",
        "body": [
            "player:addPreyCards(amount)"
        ]
    },
    "player:getPreyCards()": {
        "prefix": "player:getPreyCards()",
        "body": [
            "player:getPreyCards()"
        ]
    },
    "player:getPreyExperiencePercentage(raceId)": {
        "prefix": "player:getPreyExperiencePercentage(raceId)",
        "body": [
            "player:getPreyExperiencePercentage(raceId)"
        ]
    },
    "player:removeTaskHuntingPoints(amount)": {
        "prefix": "player:removeTaskHuntingPoints(amount)",
        "body": [
            "player:removeTaskHuntingPoints(amount)"
        ]
    },
    "player:getTaskHuntingPoints()": {
        "prefix": "player:getTaskHuntingPoints()",
        "body": [
            "player:getTaskHuntingPoints()"
        ]
    },
    "player:addTaskHuntingPoints(amount)": {
        "prefix": "player:addTaskHuntingPoints(amount)",
        "body": [
            "player:addTaskHuntingPoints(amount)"
        ]
    },
    "player:getPreyLootPercentage(raceid)": {
        "prefix": "player:getPreyLootPercentage(raceid)",
        "body": [
            "player:getPreyLootPercentage(raceid)"
        ]
    },
    "player:isMonsterPrey(raceid)": {
        "prefix": "player:isMonsterPrey(raceid)",
        "body": [
            "player:isMonsterPrey(raceid)"
        ]
    },
    "player:getCapacity()": {
        "prefix": "player:getCapacity()",
        "body": [
            "player:getCapacity()"
        ]
    },
    "player:setCapacity(capacity)": {
        "prefix": "player:setCapacity(capacity)",
        "body": [
            "player:setCapacity(capacity)"
        ]
    },
    "player:setTraining(value)": {
        "prefix": "player:setTraining(value)",
        "body": [
            "player:setTraining(value)"
        ]
    },
    "player:isTraining()": {
        "prefix": "player:isTraining()",
        "body": [
            "player:isTraining()"
        ]
    },
    "player:getFreeCapacity()": {
        "prefix": "player:getFreeCapacity()",
        "body": [
            "player:getFreeCapacity()"
        ]
    },
    "player:getKills()": {
        "prefix": "player:getKills()",
        "body": [
            "player:getKills()"
        ]
    },
    "player:setKills(kills)": {
        "prefix": "player:setKills(kills)",
        "body": [
            "player:setKills(kills)"
        ]
    },
    "player:getReward(rewardId[, autoCreate = false])": {
        "prefix": "player:getReward(rewardId[, autoCreate = false])",
        "body": [
            "player:getReward(rewardId[, autoCreate = false])"
        ]
    },
    "player:removeReward(rewardId)": {
        "prefix": "player:removeReward(rewardId)",
        "body": [
            "player:removeReward(rewardId)"
        ]
    },
    "player:getRewardList()": {
        "prefix": "player:getRewardList()",
        "body": [
            "player:getRewardList()"
        ]
    },
    "player:setDailyReward(value)": {
        "prefix": "player:setDailyReward(value)",
        "body": [
            "player:setDailyReward(value)"
        ]
    },
    "player:getDepotLocker(depotId)": {
        "prefix": "player:getDepotLocker(depotId)",
        "body": [
            "player:getDepotLocker(depotId)"
        ]
    },
    "player:getStashCount()": {
        "prefix": "player:getStashCount()",
        "body": [
            "player:getStashCount()"
        ]
    },
    "player:getDepotChest(depotId[, autoCreate = false])": {
        "prefix": "player:getDepotChest(depotId[, autoCreate = false])",
        "body": [
            "player:getDepotChest(depotId[, autoCreate = false])"
        ]
    },
    "player:getInbox()": {
        "prefix": "player:getInbox()",
        "body": [
            "player:getInbox()"
        ]
    },
    "player:getSkullTime()": {
        "prefix": "player:getSkullTime()",
        "body": [
            "player:getSkullTime()"
        ]
    },
    "player:setSkullTime(skullTime)": {
        "prefix": "player:setSkullTime(skullTime)",
        "body": [
            "player:setSkullTime(skullTime)"
        ]
    },
    "player:getDeathPenalty()": {
        "prefix": "player:getDeathPenalty()",
        "body": [
            "player:getDeathPenalty()"
        ]
    },
    "player:getExperience()": {
        "prefix": "player:getExperience()",
        "body": [
            "player:getExperience()"
        ]
    },
    "player:addExperience(experience[, sendText = false])": {
        "prefix": "player:addExperience(experience[, sendText = false])",
        "body": [
            "player:addExperience(experience[, sendText = false])"
        ]
    },
    "player:removeExperience(experience[, sendText = false])": {
        "prefix": "player:removeExperience(experience[, sendText = false])",
        "body": [
            "player:removeExperience(experience[, sendText = false])"
        ]
    },
    "player:getLevel()": {
        "prefix": "player:getLevel()",
        "body": [
            "player:getLevel()"
        ]
    },
    "player:getMagicShieldCapacityFlat(useCharges)": {
        "prefix": "player:getMagicShieldCapacityFlat(useCharges)",
        "body": [
            "player:getMagicShieldCapacityFlat(useCharges)"
        ]
    },
    "player:getMagicShieldCapacityPercent(useCharges)": {
        "prefix": "player:getMagicShieldCapacityPercent(useCharges)",
        "body": [
            "player:getMagicShieldCapacityPercent(useCharges)"
        ]
    },
    "player:sendSpellCooldown(spellId, time)": {
        "prefix": "player:sendSpellCooldown(spellId, time)",
        "body": [
            "player:sendSpellCooldown(spellId, time)"
        ]
    },
    "player:sendSpellGroupCooldown(groupId, time)": {
        "prefix": "player:sendSpellGroupCooldown(groupId, time)",
        "body": [
            "player:sendSpellGroupCooldown(groupId, time)"
        ]
    },
    "player:getMagicLevel()": {
        "prefix": "player:getMagicLevel()",
        "body": [
            "player:getMagicLevel()"
        ]
    },
    "player:getBaseMagicLevel()": {
        "prefix": "player:getBaseMagicLevel()",
        "body": [
            "player:getBaseMagicLevel()"
        ]
    },
    "player:getMana()": {
        "prefix": "player:getMana()",
        "body": [
            "player:getMana()"
        ]
    },
    "player:addMana(manaChange[, animationOnLoss = false])": {
        "prefix": "player:addMana(manaChange[, animationOnLoss = false])",
        "body": [
            "player:addMana(manaChange[, animationOnLoss = false])"
        ]
    },
    "player:getMaxMana()": {
        "prefix": "player:getMaxMana()",
        "body": [
            "player:getMaxMana()"
        ]
    },
    "player:setMaxMana(maxMana)": {
        "prefix": "player:setMaxMana(maxMana)",
        "body": [
            "player:setMaxMana(maxMana)"
        ]
    },
    "player:getManaSpent()": {
        "prefix": "player:getManaSpent()",
        "body": [
            "player:getManaSpent()"
        ]
    },
    "player:addManaSpent(amount)": {
        "prefix": "player:addManaSpent(amount)",
        "body": [
            "player:addManaSpent(amount)"
        ]
    },
    "player:getBaseMaxHealth()": {
        "prefix": "player:getBaseMaxHealth()",
        "body": [
            "player:getBaseMaxHealth()"
        ]
    },
    "player:getBaseMaxMana()": {
        "prefix": "player:getBaseMaxMana()",
        "body": [
            "player:getBaseMaxMana()"
        ]
    },
    "player:getSkillLevel(skillType)": {
        "prefix": "player:getSkillLevel(skillType)",
        "body": [
            "player:getSkillLevel(skillType)"
        ]
    },
    "player:getEffectiveSkillLevel(skillType)": {
        "prefix": "player:getEffectiveSkillLevel(skillType)",
        "body": [
            "player:getEffectiveSkillLevel(skillType)"
        ]
    },
    "player:getSkillPercent(skillType)": {
        "prefix": "player:getSkillPercent(skillType)",
        "body": [
            "player:getSkillPercent(skillType)"
        ]
    },
    "player:getSkillTries(skillType)": {
        "prefix": "player:getSkillTries(skillType)",
        "body": [
            "player:getSkillTries(skillType)"
        ]
    },
    "player:addSkillTries(skillType, tries)": {
        "prefix": "player:addSkillTries(skillType, tries)",
        "body": [
            "player:addSkillTries(skillType, tries)"
        ]
    },
    "player:setLevel(level)": {
        "prefix": "player:setLevel(level)",
        "body": [
            "player:setLevel(level)"
        ]
    },
    "player:setMagicLevel(level[, manaSpent])": {
        "prefix": "player:setMagicLevel(level[, manaSpent])",
        "body": [
            "player:setMagicLevel(level[, manaSpent])"
        ]
    },
    "player:setSkillLevel(skillType, level[, tries])": {
        "prefix": "player:setSkillLevel(skillType, level[, tries])",
        "body": [
            "player:setSkillLevel(skillType, level[, tries])"
        ]
    },
    "player:addOfflineTrainingTime(time)": {
        "prefix": "player:addOfflineTrainingTime(time)",
        "body": [
            "player:addOfflineTrainingTime(time)"
        ]
    },
    "player:getOfflineTrainingTime()": {
        "prefix": "player:getOfflineTrainingTime()",
        "body": [
            "player:getOfflineTrainingTime()"
        ]
    },
    "player:removeOfflineTrainingTime(time)": {
        "prefix": "player:removeOfflineTrainingTime(time)",
        "body": [
            "player:removeOfflineTrainingTime(time)"
        ]
    },
    "player:addOfflineTrainingTries(skillType, tries)": {
        "prefix": "player:addOfflineTrainingTries(skillType, tries)",
        "body": [
            "player:addOfflineTrainingTries(skillType, tries)"
        ]
    },
    "player:getOfflineTrainingSkill()": {
        "prefix": "player:getOfflineTrainingSkill()",
        "body": [
            "player:getOfflineTrainingSkill()"
        ]
    },
    "player:setOfflineTrainingSkill(skillId)": {
        "prefix": "player:setOfflineTrainingSkill(skillId)",
        "body": [
            "player:setOfflineTrainingSkill(skillId)"
        ]
    },
    "player:openStash(isNpc)": {
        "prefix": "player:openStash(isNpc)",
        "body": [
            "player:openStash(isNpc)"
        ]
    },
    "player:getItemCount(itemId[, subType = -1])": {
        "prefix": "player:getItemCount(itemId[, subType = -1])",
        "body": [
            "player:getItemCount(itemId[, subType = -1])"
        ]
    },
    "player:getStashItemCount(itemId)": {
        "prefix": "player:getStashItemCount(itemId)",
        "body": [
            "player:getStashItemCount(itemId)"
        ]
    },
    "player:getItemById(itemId, deepSearch[, subType = -1])": {
        "prefix": "player:getItemById(itemId, deepSearch[, subType = -1])",
        "body": [
            "player:getItemById(itemId, deepSearch[, subType = -1])"
        ]
    },
    "player:getVocation()": {
        "prefix": "player:getVocation()",
        "body": [
            "player:getVocation()"
        ]
    },
    "player:setVocation(id or name or userdata)": {
        "prefix": "player:setVocation(id or name or userdata)",
        "body": [
            "player:setVocation(id or name or userdata)"
        ]
    },
    "player:isPromoted()": {
        "prefix": "player:isPromoted()",
        "body": [
            "player:isPromoted()"
        ]
    },
    "player:getSex()": {
        "prefix": "player:getSex()",
        "body": [
            "player:getSex()"
        ]
    },
    "player:setSex(newSex)": {
        "prefix": "player:setSex(newSex)",
        "body": [
            "player:setSex(newSex)"
        ]
    },
    "player:getPronoun()": {
        "prefix": "player:getPronoun()",
        "body": [
            "player:getPronoun()"
        ]
    },
    "player:setPronoun(newPronoun)": {
        "prefix": "player:setPronoun(newPronoun)",
        "body": [
            "player:setPronoun(newPronoun)"
        ]
    },
    "player:getTown()": {
        "prefix": "player:getTown()",
        "body": [
            "player:getTown()"
        ]
    },
    "player:setTown(town)": {
        "prefix": "player:setTown(town)",
        "body": [
            "player:setTown(town)"
        ]
    },
    "player:getGuild()": {
        "prefix": "player:getGuild()",
        "body": [
            "player:getGuild()"
        ]
    },
    "player:setGuild(guild)": {
        "prefix": "player:setGuild(guild)",
        "body": [
            "player:setGuild(guild)"
        ]
    },
    "player:getGuildLevel()": {
        "prefix": "player:getGuildLevel()",
        "body": [
            "player:getGuildLevel()"
        ]
    },
    "player:setGuildLevel(level)": {
        "prefix": "player:setGuildLevel(level)",
        "body": [
            "player:setGuildLevel(level)"
        ]
    },
    "player:getGuildNick()": {
        "prefix": "player:getGuildNick()",
        "body": [
            "player:getGuildNick()"
        ]
    },
    "player:setGuildNick(nick)": {
        "prefix": "player:setGuildNick(nick)",
        "body": [
            "player:setGuildNick(nick)"
        ]
    },
    "player:getGroup()": {
        "prefix": "player:getGroup()",
        "body": [
            "player:getGroup()"
        ]
    },
    "player:setGroup(group)": {
        "prefix": "player:setGroup(group)",
        "body": [
            "player:setGroup(group)"
        ]
    },
    "player:setSpecialContainersAvailable(stashMenu, marketMenu, depotSearchMenu)": {
        "prefix": "player:setSpecialContainersAvailable(stashMenu, marketMenu, depotSearchMenu)",
        "body": [
            "player:setSpecialContainersAvailable(stashMenu, marketMenu, depotSearchMenu)"
        ]
    },
    "player:getStamina()": {
        "prefix": "player:getStamina()",
        "body": [
            "player:getStamina()"
        ]
    },
    "player:setStamina(stamina)": {
        "prefix": "player:setStamina(stamina)",
        "body": [
            "player:setStamina(stamina)"
        ]
    },
    "player:getSoul()": {
        "prefix": "player:getSoul()",
        "body": [
            "player:getSoul()"
        ]
    },
    "player:addSoul(soulChange)": {
        "prefix": "player:addSoul(soulChange)",
        "body": [
            "player:addSoul(soulChange)"
        ]
    },
    "player:getMaxSoul()": {
        "prefix": "player:getMaxSoul()",
        "body": [
            "player:getMaxSoul()"
        ]
    },
    "player:getBankBalance()": {
        "prefix": "player:getBankBalance()",
        "body": [
            "player:getBankBalance()"
        ]
    },
    "player:setBankBalance(bankBalance)": {
        "prefix": "player:setBankBalance(bankBalance)",
        "body": [
            "player:setBankBalance(bankBalance)"
        ]
    },
    "player:getStorageValue(key)": {
        "prefix": "player:getStorageValue(key)",
        "body": [
            "player:getStorageValue(key)"
        ]
    },
    "player:setStorageValue(key, value)": {
        "prefix": "player:setStorageValue(key, value)",
        "body": [
            "player:setStorageValue(key, value)"
        ]
    },
    "player:getStorageValueByName(name)": {
        "prefix": "player:getStorageValueByName(name)",
        "body": [
            "player:getStorageValueByName(name)"
        ]
    },
    "player:setStorageValueByName(storageName, value)": {
        "prefix": "player:setStorageValueByName(storageName, value)",
        "body": [
            "player:setStorageValueByName(storageName, value)"
        ]
    },
    "player:addItem(itemId, count = 1, canDropOnMap = true, subType = 1, slot = CONST_SLOT_WHEREEVER, tier = 0)": {
        "prefix": "player:addItem(itemId, count = 1, canDropOnMap = true, subType = 1, slot = CONST_SLOT_WHEREEVER, tier = 0)",
        "body": [
            "player:addItem(itemId, count = 1, canDropOnMap = true, subType = 1, slot = CONST_SLOT_WHEREEVER, tier = 0)"
        ]
    },
    "player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])": {
        "prefix": "player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])",
        "body": [
            "player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])"
        ]
    },
    "player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])": {
        "prefix": "player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])",
        "body": [
            "player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])"
        ]
    },
    "player:addItemStash(itemId, count = 1)": {
        "prefix": "player:addItemStash(itemId, count = 1)",
        "body": [
            "player:addItemStash(itemId, count = 1)"
        ]
    },
    "player:removeStashItem(itemId, count)": {
        "prefix": "player:removeStashItem(itemId, count)",
        "body": [
            "player:removeStashItem(itemId, count)"
        ]
    },
    "player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])": {
        "prefix": "player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])",
        "body": [
            "player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])"
        ]
    },
    "player:sendContainer(container)": {
        "prefix": "player:sendContainer(container)",
        "body": [
            "player:sendContainer(container)"
        ]
    },
    "player:sendUpdateContainer(container)": {
        "prefix": "player:sendUpdateContainer(container)",
        "body": [
            "player:sendUpdateContainer(container)"
        ]
    },
    "player:getMoney()": {
        "prefix": "player:getMoney()",
        "body": [
            "player:getMoney()"
        ]
    },
    "player:addMoney(money)": {
        "prefix": "player:addMoney(money)",
        "body": [
            "player:addMoney(money)"
        ]
    },
    "player:removeMoney(money[, flags = 0[, useBank = true]])": {
        "prefix": "player:removeMoney(money[, flags = 0[, useBank = true]])",
        "body": [
            "player:removeMoney(money[, flags = 0[, useBank = true]])"
        ]
    },
    "player:showTextDialog(id or name or userdata[, text[, canWrite[, length]]])": {
        "prefix": "player:showTextDialog(id or name or userdata[, text[, canWrite[, length]]])",
        "body": [
            "player:showTextDialog(id or name or userdata[, text[, canWrite[, length]]])"
        ]
    },
    "player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])": {
        "prefix": "player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])",
        "body": [
            "player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])"
        ]
    },
    "player:sendTextMessage(type, text, channelId)": {
        "prefix": "player:sendTextMessage(type, text, channelId)",
        "body": [
            "player:sendTextMessage(type, text, channelId)"
        ]
    },
    "player:sendChannelMessage(author, text, type, channelId)": {
        "prefix": "player:sendChannelMessage(author, text, type, channelId)",
        "body": [
            "player:sendChannelMessage(author, text, type, channelId)"
        ]
    },
    "player:sendPrivateMessage(speaker, text[, type])": {
        "prefix": "player:sendPrivateMessage(speaker, text[, type])",
        "body": [
            "player:sendPrivateMessage(speaker, text[, type])"
        ]
    },
    "player:channelSay(speaker, type, text, channelId)": {
        "prefix": "player:channelSay(speaker, type, text, channelId)",
        "body": [
            "player:channelSay(speaker, type, text, channelId)"
        ]
    },
    "player:openChannel(channelId)": {
        "prefix": "player:openChannel(channelId)",
        "body": [
            "player:openChannel(channelId)"
        ]
    },
    "player:getSlotItem(slot)": {
        "prefix": "player:getSlotItem(slot)",
        "body": [
            "player:getSlotItem(slot)"
        ]
    },
    "player:getParty()": {
        "prefix": "player:getParty()",
        "body": [
            "player:getParty()"
        ]
    },
    "player:addOutfit(lookType or name, addon = 0)": {
        "prefix": "player:addOutfit(lookType or name, addon = 0)",
        "body": [
            "player:addOutfit(lookType or name, addon = 0)"
        ]
    },
    "player:addOutfitAddon(lookType, addon)": {
        "prefix": "player:addOutfitAddon(lookType, addon)",
        "body": [
            "player:addOutfitAddon(lookType, addon)"
        ]
    },
    "player:removeOutfit(lookType)": {
        "prefix": "player:removeOutfit(lookType)",
        "body": [
            "player:removeOutfit(lookType)"
        ]
    },
    "player:removeOutfitAddon(lookType, addon)": {
        "prefix": "player:removeOutfitAddon(lookType, addon)",
        "body": [
            "player:removeOutfitAddon(lookType, addon)"
        ]
    },
    "player:hasOutfit(lookType[, addon = 0])": {
        "prefix": "player:hasOutfit(lookType[, addon = 0])",
        "body": [
            "player:hasOutfit(lookType[, addon = 0])"
        ]
    },
    "player:sendOutfitWindow()": {
        "prefix": "player:sendOutfitWindow()",
        "body": [
            "player:sendOutfitWindow()"
        ]
    },
    "player:addMount(mountId or mountName)": {
        "prefix": "player:addMount(mountId or mountName)",
        "body": [
            "player:addMount(mountId or mountName)"
        ]
    },
    "player:removeMount(mountId or mountName)": {
        "prefix": "player:removeMount(mountId or mountName)",
        "body": [
            "player:removeMount(mountId or mountName)"
        ]
    },
    "player:hasMount(mountId or mountName)": {
        "prefix": "player:hasMount(mountId or mountName)",
        "body": [
            "player:hasMount(mountId or mountName)"
        ]
    },
    "player:addFamiliar(lookType)": {
        "prefix": "player:addFamiliar(lookType)",
        "body": [
            "player:addFamiliar(lookType)"
        ]
    },
    "player:removeFamiliar(lookType)": {
        "prefix": "player:removeFamiliar(lookType)",
        "body": [
            "player:removeFamiliar(lookType)"
        ]
    },
    "player:hasFamiliar(lookType)": {
        "prefix": "player:hasFamiliar(lookType)",
        "body": [
            "player:hasFamiliar(lookType)"
        ]
    },
    "player:setFamiliarLooktype(lookType)": {
        "prefix": "player:setFamiliarLooktype(lookType)",
        "body": [
            "player:setFamiliarLooktype(lookType)"
        ]
    },
    "player:getFamiliarLooktype()": {
        "prefix": "player:getFamiliarLooktype()",
        "body": [
            "player:getFamiliarLooktype()"
        ]
    },
    "player:getPremiumDays()": {
        "prefix": "player:getPremiumDays()",
        "body": [
            "player:getPremiumDays()"
        ]
    },
    "player:addPremiumDays(days)": {
        "prefix": "player:addPremiumDays(days)",
        "body": [
            "player:addPremiumDays(days)"
        ]
    },
    "player:removePremiumDays(days)": {
        "prefix": "player:removePremiumDays(days)",
        "body": [
            "player:removePremiumDays(days)"
        ]
    },
    "player:getTibiaCoins()": {
        "prefix": "player:getTibiaCoins()",
        "body": [
            "player:getTibiaCoins()"
        ]
    },
    "player:addTibiaCoins(coins)": {
        "prefix": "player:addTibiaCoins(coins)",
        "body": [
            "player:addTibiaCoins(coins)"
        ]
    },
    "player:removeTibiaCoins(coins)": {
        "prefix": "player:removeTibiaCoins(coins)",
        "body": [
            "player:removeTibiaCoins(coins)"
        ]
    },
    "player:getTransferableCoins()": {
        "prefix": "player:getTransferableCoins()",
        "body": [
            "player:getTransferableCoins()"
        ]
    },
    "player:addTransferableCoins(coins)": {
        "prefix": "player:addTransferableCoins(coins)",
        "body": [
            "player:addTransferableCoins(coins)"
        ]
    },
    "player:removeTransferableCoins(coins)": {
        "prefix": "player:removeTransferableCoins(coins)",
        "body": [
            "player:removeTransferableCoins(coins)"
        ]
    },
    "player:hasBlessing(blessing)": {
        "prefix": "player:hasBlessing(blessing)",
        "body": [
            "player:hasBlessing(blessing)"
        ]
    },
    "player:addBlessing(blessing)": {
        "prefix": "player:addBlessing(blessing)",
        "body": [
            "player:addBlessing(blessing)"
        ]
    },
    "player:removeBlessing(blessing)": {
        "prefix": "player:removeBlessing(blessing)",
        "body": [
            "player:removeBlessing(blessing)"
        ]
    },
    "player:getBlessingCount(index[, storeCount = false])": {
        "prefix": "player:getBlessingCount(index[, storeCount = false])",
        "body": [
            "player:getBlessingCount(index[, storeCount = false])"
        ]
    },
    "player:canLearnSpell(spellName)": {
        "prefix": "player:canLearnSpell(spellName)",
        "body": [
            "player:canLearnSpell(spellName)"
        ]
    },
    "player:learnSpell(spellName)": {
        "prefix": "player:learnSpell(spellName)",
        "body": [
            "player:learnSpell(spellName)"
        ]
    },
    "player:forgetSpell(spellName)": {
        "prefix": "player:forgetSpell(spellName)",
        "body": [
            "player:forgetSpell(spellName)"
        ]
    },
    "player:hasLearnedSpell(spellName)": {
        "prefix": "player:hasLearnedSpell(spellName)",
        "body": [
            "player:hasLearnedSpell(spellName)"
        ]
    },
    "player:sendTutorial(tutorialId)": {
        "prefix": "player:sendTutorial(tutorialId)",
        "body": [
            "player:sendTutorial(tutorialId)"
        ]
    },
    "player:openImbuementWindow(item)": {
        "prefix": "player:openImbuementWindow(item)",
        "body": [
            "player:openImbuementWindow(item)"
        ]
    },
    "player:closeImbuementWindow()": {
        "prefix": "player:closeImbuementWindow()",
        "body": [
            "player:closeImbuementWindow()"
        ]
    },
    "player:addMapMark(position, type, description)": {
        "prefix": "player:addMapMark(position, type, description)",
        "body": [
            "player:addMapMark(position, type, description)"
        ]
    },
    "player:save()": {
        "prefix": "player:save()",
        "body": [
            "player:save()"
        ]
    },
    "player:popupFYI(message)": {
        "prefix": "player:popupFYI(message)",
        "body": [
            "player:popupFYI(message)"
        ]
    },
    "player:isPzLocked()": {
        "prefix": "player:isPzLocked()",
        "body": [
            "player:isPzLocked()"
        ]
    },
    "player:getClient()": {
        "prefix": "player:getClient()",
        "body": [
            "player:getClient()"
        ]
    },
    "player:getHouse()": {
        "prefix": "player:getHouse()",
        "body": [
            "player:getHouse()"
        ]
    },
    "player:sendHouseWindow(house, listId)": {
        "prefix": "player:sendHouseWindow(house, listId)",
        "body": [
            "player:sendHouseWindow(house, listId)"
        ]
    },
    "player:setEditHouse(house, listId)": {
        "prefix": "player:setEditHouse(house, listId)",
        "body": [
            "player:setEditHouse(house, listId)"
        ]
    },
    "player:setGhostMode(enabled)": {
        "prefix": "player:setGhostMode(enabled)",
        "body": [
            "player:setGhostMode(enabled)"
        ]
    },
    "player:getContainerId(container)": {
        "prefix": "player:getContainerId(container)",
        "body": [
            "player:getContainerId(container)"
        ]
    },
    "player:getContainerById(id)": {
        "prefix": "player:getContainerById(id)",
        "body": [
            "player:getContainerById(id)"
        ]
    },
    "player:getContainerIndex(id)": {
        "prefix": "player:getContainerIndex(id)",
        "body": [
            "player:getContainerIndex(id)"
        ]
    },
    "player:getInstantSpells()": {
        "prefix": "player:getInstantSpells()",
        "body": [
            "player:getInstantSpells()"
        ]
    },
    "player:canCast(spell)": {
        "prefix": "player:canCast(spell)",
        "body": [
            "player:canCast(spell)"
        ]
    },
    "player:hasChaseMode()": {
        "prefix": "player:hasChaseMode()",
        "body": [
            "player:hasChaseMode()"
        ]
    },
    "player:hasSecureMode()": {
        "prefix": "player:hasSecureMode()",
        "body": [
            "player:hasSecureMode()"
        ]
    },
    "player:getFightMode()": {
        "prefix": "player:getFightMode()",
        "body": [
            "player:getFightMode()"
        ]
    },
    "player:getBaseXpGain()": {
        "prefix": "player:getBaseXpGain()",
        "body": [
            "player:getBaseXpGain()"
        ]
    },
    "player:setBaseXpGain(value)": {
        "prefix": "player:setBaseXpGain(value)",
        "body": [
            "player:setBaseXpGain(value)"
        ]
    },
    "player:getVoucherXpBoost()": {
        "prefix": "player:getVoucherXpBoost()",
        "body": [
            "player:getVoucherXpBoost()"
        ]
    },
    "player:setVoucherXpBoost(value)": {
        "prefix": "player:setVoucherXpBoost(value)",
        "body": [
            "player:setVoucherXpBoost(value)"
        ]
    },
    "player:getGrindingXpBoost()": {
        "prefix": "player:getGrindingXpBoost()",
        "body": [
            "player:getGrindingXpBoost()"
        ]
    },
    "player:setGrindingXpBoost(value)": {
        "prefix": "player:setGrindingXpBoost(value)",
        "body": [
            "player:setGrindingXpBoost(value)"
        ]
    },
    "player:getXpBoostPercent()": {
        "prefix": "player:getXpBoostPercent()",
        "body": [
            "player:getXpBoostPercent()"
        ]
    },
    "player:setXpBoostPercent(value)": {
        "prefix": "player:setXpBoostPercent(value)",
        "body": [
            "player:setXpBoostPercent(value)"
        ]
    },
    "player:getStaminaXpBoost()": {
        "prefix": "player:getStaminaXpBoost()",
        "body": [
            "player:getStaminaXpBoost()"
        ]
    },
    "player:setStaminaXpBoost(value)": {
        "prefix": "player:setStaminaXpBoost(value)",
        "body": [
            "player:setStaminaXpBoost(value)"
        ]
    },
    "player:setXpBoostTime(timeLeft)": {
        "prefix": "player:setXpBoostTime(timeLeft)",
        "body": [
            "player:setXpBoostTime(timeLeft)"
        ]
    },
    "player:getXpBoostTime()": {
        "prefix": "player:getXpBoostTime()",
        "body": [
            "player:getXpBoostTime()"
        ]
    },
    "player:getIdleTime()": {
        "prefix": "player:getIdleTime()",
        "body": [
            "player:getIdleTime()"
        ]
    },
    "player:getFreeBackpackSlots()": {
        "prefix": "player:getFreeBackpackSlots()",
        "body": [
            "player:getFreeBackpackSlots()"
        ]
    },
    "player:openMarket()": {
        "prefix": "player:openMarket()",
        "body": [
            "player:openMarket()"
        ]
    },
    "player:openForge()": {
        "prefix": "player:openForge()",
        "body": [
            "player:openForge()"
        ]
    },
    "player:closeForge()": {
        "prefix": "player:closeForge()",
        "body": [
            "player:closeForge()"
        ]
    },
    "player:addForgeDusts(amount)": {
        "prefix": "player:addForgeDusts(amount)",
        "body": [
            "player:addForgeDusts(amount)"
        ]
    },
    "player:removeForgeDusts(amount)": {
        "prefix": "player:removeForgeDusts(amount)",
        "body": [
            "player:removeForgeDusts(amount)"
        ]
    },
    "player:getForgeDusts()": {
        "prefix": "player:getForgeDusts()",
        "body": [
            "player:getForgeDusts()"
        ]
    },
    "player:setForgeDusts()": {
        "prefix": "player:setForgeDusts()",
        "body": [
            "player:setForgeDusts()"
        ]
    },
    "player:addForgeDustLevel(amount)": {
        "prefix": "player:addForgeDustLevel(amount)",
        "body": [
            "player:addForgeDustLevel(amount)"
        ]
    },
    "player:removeForgeDustLevel(amount)": {
        "prefix": "player:removeForgeDustLevel(amount)",
        "body": [
            "player:removeForgeDustLevel(amount)"
        ]
    },
    "player:getForgeDustLevel()": {
        "prefix": "player:getForgeDustLevel()",
        "body": [
            "player:getForgeDustLevel()"
        ]
    },
    "player:getForgeSlivers()": {
        "prefix": "player:getForgeSlivers()",
        "body": [
            "player:getForgeSlivers()"
        ]
    },
    "player:getForgeCores()": {
        "prefix": "player:getForgeCores()",
        "body": [
            "player:getForgeCores()"
        ]
    },
    "player:setFaction(factionId)": {
        "prefix": "player:setFaction(factionId)",
        "body": [
            "player:setFaction(factionId)"
        ]
    },
    "player:getFaction()": {
        "prefix": "player:getFaction()",
        "body": [
            "player:getFaction()"
        ]
    },
    "player:isUIExhausted()": {
        "prefix": "player:isUIExhausted()",
        "body": [
            "player:isUIExhausted()"
        ]
    },
    "player:updateUIExhausted(exhaustionTime = 250)": {
        "prefix": "player:updateUIExhausted(exhaustionTime = 250)",
        "body": [
            "player:updateUIExhausted(exhaustionTime = 250)"
        ]
    },
    "player:sendBosstiaryCooldownTimer()": {
        "prefix": "player:sendBosstiaryCooldownTimer()",
        "body": [
            "player:sendBosstiaryCooldownTimer()"
        ]
    },
    "player:getBosstiaryLevel(name)": {
        "prefix": "player:getBosstiaryLevel(name)",
        "body": [
            "player:getBosstiaryLevel(name)"
        ]
    },
    "player:getBosstiaryKills(name)": {
        "prefix": "player:getBosstiaryKills(name)",
        "body": [
            "player:getBosstiaryKills(name)"
        ]
    },
    "player:addBosstiaryKill(name[, amount = 1])": {
        "prefix": "player:addBosstiaryKill(name[, amount = 1])",
        "body": [
            "player:addBosstiaryKill(name[, amount = 1])"
        ]
    },
    "player:setBossPoints()": {
        "prefix": "player:setBossPoints()",
        "body": [
            "player:setBossPoints()"
        ]
    },
    "player:setRemoveBossTime()": {
        "prefix": "player:setRemoveBossTime()",
        "body": [
            "player:setRemoveBossTime()"
        ]
    },
    "player:getSlotBossId(slotId)": {
        "prefix": "player:getSlotBossId(slotId)",
        "body": [
            "player:getSlotBossId(slotId)"
        ]
    },
    "player:getBossBonus(slotId)": {
        "prefix": "player:getBossBonus(slotId)",
        "body": [
            "player:getBossBonus(slotId)"
        ]
    },
    "player:sendSingleSoundEffect(soundId[, actor = true])": {
        "prefix": "player:sendSingleSoundEffect(soundId[, actor = true])",
        "body": [
            "player:sendSingleSoundEffect(soundId[, actor = true])"
        ]
    },
    "player:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = true])": {
        "prefix": "player:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = true])",
        "body": [
            "player:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = true])"
        ]
    },
    "player:getName()": {
        "prefix": "player:getName()",
        "body": [
            "player:getName()"
        ]
    },
    "player:changeName(newName)": {
        "prefix": "player:changeName(newName)",
        "body": [
            "player:changeName(newName)"
        ]
    },
    "player:hasGroupFlag(flag)": {
        "prefix": "player:hasGroupFlag(flag)",
        "body": [
            "player:hasGroupFlag(flag)"
        ]
    },
    "player:setGroupFlag(flag)": {
        "prefix": "player:setGroupFlag(flag)",
        "body": [
            "player:setGroupFlag(flag)"
        ]
    },
    "player:removeGroupFlag(flag)": {
        "prefix": "player:removeGroupFlag(flag)",
        "body": [
            "player:removeGroupFlag(flag)"
        ]
    },
    "player:setHazardSystemPoints(amount)": {
        "prefix": "player:setHazardSystemPoints(amount)",
        "body": [
            "player:setHazardSystemPoints(amount)"
        ]
    },
    "player:getHazardSystemPoints()": {
        "prefix": "player:getHazardSystemPoints()",
        "body": [
            "player:getHazardSystemPoints()"
        ]
    },
    "player:setLoyaltyBonus(amount)": {
        "prefix": "player:setLoyaltyBonus(amount)",
        "body": [
            "player:setLoyaltyBonus(amount)"
        ]
    },
    "player:getLoyaltyBonus()": {
        "prefix": "player:getLoyaltyBonus()",
        "body": [
            "player:getLoyaltyBonus()"
        ]
    },
    "player:getLoyaltyPoints()": {
        "prefix": "player:getLoyaltyPoints()",
        "body": [
            "player:getLoyaltyPoints()"
        ]
    },
    "player:getLoyaltyTitle()": {
        "prefix": "player:getLoyaltyTitle()",
        "body": [
            "player:getLoyaltyTitle()"
        ]
    },
    "player:setLoyaltyTitle(name)": {
        "prefix": "player:setLoyaltyTitle(name)",
        "body": [
            "player:setLoyaltyTitle(name)"
        ]
    },
    "player:instantSkillWOD(name[, value])": {
        "prefix": "player:instantSkillWOD(name[, value])",
        "body": [
            "player:instantSkillWOD(name[, value])"
        ]
    },
    "player:upgradeSpellsWOD([name[, add]])": {
        "prefix": "player:upgradeSpellsWOD([name[, add]])",
        "body": [
            "player:upgradeSpellsWOD([name[, add]])"
        ]
    },
    "player:revelationStageWOD([name[, set]])": {
        "prefix": "player:revelationStageWOD([name[, set]])",
        "body": [
            "player:revelationStageWOD([name[, set]])"
        ]
    },
    "player:reloadData()": {
        "prefix": "player:reloadData()",
        "body": [
            "player:reloadData()"
        ]
    },
    "player:onThinkWheelOfDestiny([force = false])": {
        "prefix": "player:onThinkWheelOfDestiny([force = false])",
        "body": [
            "player:onThinkWheelOfDestiny([force = false])"
        ]
    },
    "player:avatarTimer([value])": {
        "prefix": "player:avatarTimer([value])",
        "body": [
            "player:avatarTimer([value])"
        ]
    },
    "player:getWheelSpellAdditionalArea(spellname)": {
        "prefix": "player:getWheelSpellAdditionalArea(spellname)",
        "body": [
            "player:getWheelSpellAdditionalArea(spellname)"
        ]
    },
    "player:getWheelSpellAdditionalTarget(spellname)": {
        "prefix": "player:getWheelSpellAdditionalTarget(spellname)",
        "body": [
            "player:getWheelSpellAdditionalTarget(spellname)"
        ]
    },
    "player:getWheelSpellAdditionalDuration(spellname)": {
        "prefix": "player:getWheelSpellAdditionalDuration(spellname)",
        "body": [
            "player:getWheelSpellAdditionalDuration(spellname)"
        ]
    },
    "player:updateConcoction(itemid, timeLeft)": {
        "prefix": "player:updateConcoction(itemid, timeLeft)",
        "body": [
            "player:updateConcoction(itemid, timeLeft)"
        ]
    },
    "player:clearSpellCooldowns()": {
        "prefix": "player:clearSpellCooldowns()",
        "body": [
            "player:clearSpellCooldowns()"
        ]
    },
    "player:isVip()": {
        "prefix": "player:isVip()",
        "body": [
            "player:isVip()"
        ]
    },
    "player:getVipDays()": {
        "prefix": "player:getVipDays()",
        "body": [
            "player:getVipDays()"
        ]
    },
    "player:getVipTime()": {
        "prefix": "player:getVipTime()",
        "body": [
            "player:getVipTime()"
        ]
    },
    "player:kv()": {
        "prefix": "player:kv()",
        "body": [
            "player:kv()"
        ]
    },
    "player:getStoreInbox()": {
        "prefix": "player:getStoreInbox()",
        "body": [
            "player:getStoreInbox()"
        ]
    },
    "player:hasAchievement(id or name)": {
        "prefix": "player:hasAchievement(id or name)",
        "body": [
            "player:hasAchievement(id or name)"
        ]
    },
    "player:addAchievement(id or name[, sendMessage = true])": {
        "prefix": "player:addAchievement(id or name[, sendMessage = true])",
        "body": [
            "player:addAchievement(id or name[, sendMessage = true])"
        ]
    },
    "player:removeAchievement(id or name)": {
        "prefix": "player:removeAchievement(id or name)",
        "body": [
            "player:removeAchievement(id or name)"
        ]
    },
    "player:getAchievementPoints()": {
        "prefix": "player:getAchievementPoints()",
        "body": [
            "player:getAchievementPoints()"
        ]
    },
    "player:addAchievementPoints(amount)": {
        "prefix": "player:addAchievementPoints(amount)",
        "body": [
            "player:addAchievementPoints(amount)"
        ]
    },
    "player:removeAchievementPoints(amount)": {
        "prefix": "player:removeAchievementPoints(amount)",
        "body": [
            "player:removeAchievementPoints(amount)"
        ]
    },
    "player:addBadge(id)": {
        "prefix": "player:addBadge(id)",
        "body": [
            "player:addBadge(id)"
        ]
    },
    "player:addTitle(id)": {
        "prefix": "player:addTitle(id)",
        "body": [
            "player:addTitle(id)"
        ]
    },
    "player:getTitles()": {
        "prefix": "player:getTitles()",
        "body": [
            "player:getTitles()"
        ]
    },
    "player:setCurrentTitle(id)": {
        "prefix": "player:setCurrentTitle(id)",
        "body": [
            "player:setCurrentTitle(id)"
        ]
    },
    "player:createTransactionSummary(type, amount[, id = 0])": {
        "prefix": "player:createTransactionSummary(type, amount[, id = 0])",
        "body": [
            "player:createTransactionSummary(type, amount[, id = 0])"
        ]
    },
    "player:takeScreenshot(screenshotType)": {
        "prefix": "player:takeScreenshot(screenshotType)",
        "body": [
            "player:takeScreenshot(screenshotType)"
        ]
    },
    "player:sendIconBakragore()": {
        "prefix": "player:sendIconBakragore()",
        "body": [
            "player:sendIconBakragore()"
        ]
    },
    "player:removeIconBakragore(iconType or nil for remove all bakragore icons)": {
        "prefix": "player:removeIconBakragore(iconType or nil for remove all bakragore icons)",
        "body": [
            "player:removeIconBakragore(iconType or nil for remove all bakragore icons)"
        ]
    },
    "position:getDistance(positionEx)": {
        "prefix": "position:getDistance(positionEx)",
        "body": [
            "position:getDistance(positionEx)"
        ]
    },
    "position:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])": {
        "prefix": "position:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])",
        "body": [
            "position:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])"
        ]
    },
    "position:isSightClear(positionEx[, sameFloor = true])": {
        "prefix": "position:isSightClear(positionEx[, sameFloor = true])",
        "body": [
            "position:isSightClear(positionEx[, sameFloor = true])"
        ]
    },
    "position:getTile()": {
        "prefix": "position:getTile()",
        "body": [
            "position:getTile()"
        ]
    },
    "position:getZones()": {
        "prefix": "position:getZones()",
        "body": [
            "position:getZones()"
        ]
    },
    "position:sendMagicEffect(magicEffect[, player = nullptr])": {
        "prefix": "position:sendMagicEffect(magicEffect[, player = nullptr])",
        "body": [
            "position:sendMagicEffect(magicEffect[, player = nullptr])"
        ]
    },
    "position:removeMagicEffect(magicEffect[, player = nullptr])": {
        "prefix": "position:removeMagicEffect(magicEffect[, player = nullptr])",
        "body": [
            "position:removeMagicEffect(magicEffect[, player = nullptr])"
        ]
    },
    "position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])": {
        "prefix": "position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])",
        "body": [
            "position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])"
        ]
    },
    "position:sendSingleSoundEffect(soundId[, actor = nullptr])": {
        "prefix": "position:sendSingleSoundEffect(soundId[, actor = nullptr])",
        "body": [
            "position:sendSingleSoundEffect(soundId[, actor = nullptr])"
        ]
    },
    "position:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = nullptr])": {
        "prefix": "position:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = nullptr])",
        "body": [
            "position:sendDoubleSoundEffect(mainSoundId, secondarySoundId[, actor = nullptr])"
        ]
    },
    "position:toString()": {
        "prefix": "position:toString()",
        "body": [
            "position:toString()"
        ]
    },
    "Position()": {
        "prefix": "Position()",
        "body": [
            "Position()"
        ]
    },
    "kv.scoped(key)": {
        "prefix": "kv.scoped(key)",
        "body": [
            "kv.scoped(key)"
        ]
    },
    "scopedKv:set(key, value)": {
        "prefix": "scopedKv:set(key, value)",
        "body": [
            "scopedKv:set(key, value)"
        ]
    },
    "scopedKv:get(key, forceLoad = false)": {
        "prefix": "scopedKv:get(key, forceLoad = false)",
        "body": [
            "scopedKv:get(key, forceLoad = false)"
        ]
    },
    "tile:getPosition()": {
        "prefix": "tile:getPosition()",
        "body": [
            "tile:getPosition()"
        ]
    },
    "tile:getGround()": {
        "prefix": "tile:getGround()",
        "body": [
            "tile:getGround()"
        ]
    },
    "tile:getThing(index)": {
        "prefix": "tile:getThing(index)",
        "body": [
            "tile:getThing(index)"
        ]
    },
    "tile:getThingCount()": {
        "prefix": "tile:getThingCount()",
        "body": [
            "tile:getThingCount()"
        ]
    },
    "tile:getTopVisibleThing(creature)": {
        "prefix": "tile:getTopVisibleThing(creature)",
        "body": [
            "tile:getTopVisibleThing(creature)"
        ]
    },
    "tile:getTopTopItem()": {
        "prefix": "tile:getTopTopItem()",
        "body": [
            "tile:getTopTopItem()"
        ]
    },
    "tile:getTopDownItem()": {
        "prefix": "tile:getTopDownItem()",
        "body": [
            "tile:getTopDownItem()"
        ]
    },
    "tile:getFieldItem()": {
        "prefix": "tile:getFieldItem()",
        "body": [
            "tile:getFieldItem()"
        ]
    },
    "tile:getItemById(itemId[, subType = -1])": {
        "prefix": "tile:getItemById(itemId[, subType = -1])",
        "body": [
            "tile:getItemById(itemId[, subType = -1])"
        ]
    },
    "tile:getItemByType(itemType)": {
        "prefix": "tile:getItemByType(itemType)",
        "body": [
            "tile:getItemByType(itemType)"
        ]
    },
    "tile:getItemByTopOrder(topOrder)": {
        "prefix": "tile:getItemByTopOrder(topOrder)",
        "body": [
            "tile:getItemByTopOrder(topOrder)"
        ]
    },
    "tile:getItemCountById(itemId[, subType = -1])": {
        "prefix": "tile:getItemCountById(itemId[, subType = -1])",
        "body": [
            "tile:getItemCountById(itemId[, subType = -1])"
        ]
    },
    "tile:getBottomCreature()": {
        "prefix": "tile:getBottomCreature()",
        "body": [
            "tile:getBottomCreature()"
        ]
    },
    "tile:getTopCreature()": {
        "prefix": "tile:getTopCreature()",
        "body": [
            "tile:getTopCreature()"
        ]
    },
    "tile:getBottomVisibleCreature(creature)": {
        "prefix": "tile:getBottomVisibleCreature(creature)",
        "body": [
            "tile:getBottomVisibleCreature(creature)"
        ]
    },
    "tile:getTopVisibleCreature(creature)": {
        "prefix": "tile:getTopVisibleCreature(creature)",
        "body": [
            "tile:getTopVisibleCreature(creature)"
        ]
    },
    "tile:getItems()": {
        "prefix": "tile:getItems()",
        "body": [
            "tile:getItems()"
        ]
    },
    "tile:getItemCount()": {
        "prefix": "tile:getItemCount()",
        "body": [
            "tile:getItemCount()"
        ]
    },
    "tile:getDownItemCount()": {
        "prefix": "tile:getDownItemCount()",
        "body": [
            "tile:getDownItemCount()"
        ]
    },
    "tile:getTopItemCount()": {
        "prefix": "tile:getTopItemCount()",
        "body": [
            "tile:getTopItemCount()"
        ]
    },
    "tile:getCreatures()": {
        "prefix": "tile:getCreatures()",
        "body": [
            "tile:getCreatures()"
        ]
    },
    "tile:getCreatureCount()": {
        "prefix": "tile:getCreatureCount()",
        "body": [
            "tile:getCreatureCount()"
        ]
    },
    "tile:hasProperty(property[, item])": {
        "prefix": "tile:hasProperty(property[, item])",
        "body": [
            "tile:hasProperty(property[, item])"
        ]
    },
    "tile:getThingIndex(thing)": {
        "prefix": "tile:getThingIndex(thing)",
        "body": [
            "tile:getThingIndex(thing)"
        ]
    },
    "tile:hasFlag(flag)": {
        "prefix": "tile:hasFlag(flag)",
        "body": [
            "tile:hasFlag(flag)"
        ]
    },
    "tile:queryAdd(thing[, flags])": {
        "prefix": "tile:queryAdd(thing[, flags])",
        "body": [
            "tile:queryAdd(thing[, flags])"
        ]
    },
    "tile:addItem(itemId[, count/subType = 1[, flags = 0]])": {
        "prefix": "tile:addItem(itemId[, count/subType = 1[, flags = 0]])",
        "body": [
            "tile:addItem(itemId[, count/subType = 1[, flags = 0]])"
        ]
    },
    "tile:addItemEx(item[, flags = 0])": {
        "prefix": "tile:addItemEx(item[, flags = 0])",
        "body": [
            "tile:addItemEx(item[, flags = 0])"
        ]
    },
    "tile:getHouse()": {
        "prefix": "tile:getHouse()",
        "body": [
            "tile:getHouse()"
        ]
    },
    "tile:sweep(actor)": {
        "prefix": "tile:sweep(actor)",
        "body": [
            "tile:sweep(actor)"
        ]
    },
    "Town(id or name)": {
        "prefix": "Town(id or name)",
        "body": [
            "Town(id or name)"
        ]
    },
    "town:getId()": {
        "prefix": "town:getId()",
        "body": [
            "town:getId()"
        ]
    },
    "town:getName()": {
        "prefix": "town:getName()",
        "body": [
            "town:getName()"
        ]
    },
    "town:getTemplePosition()": {
        "prefix": "town:getTemplePosition()",
        "body": [
            "town:getTemplePosition()"
        ]
    },
    "Vocation(id)": {
        "prefix": "Vocation(id)",
        "body": [
            "Vocation(id)"
        ]
    },
    "Vocation.new(id)": {
        "prefix": "Vocation.new(id)",
        "body": [
            "Vocation.new(id)"
        ]
    },
    "vocation:getAttackSpeed()": {
        "prefix": "vocation:getAttackSpeed()",
        "body": [
            "vocation:getAttackSpeed()"
        ]
    },
    "vocation:getBaseSpeed()": {
        "prefix": "vocation:getBaseSpeed()",
        "body": [
            "vocation:getBaseSpeed()"
        ]
    },
    "vocation:getCapacityGain()": {
        "prefix": "vocation:getCapacityGain()",
        "body": [
            "vocation:getCapacityGain()"
        ]
    },
    "vocation:getClientId()": {
        "prefix": "vocation:getClientId()",
        "body": [
            "vocation:getClientId()"
        ]
    },
    "vocation:getDemotion()": {
        "prefix": "vocation:getDemotion()",
        "body": [
            "vocation:getDemotion()"
        ]
    },
    "vocation:getDescription()": {
        "prefix": "vocation:getDescription()",
        "body": [
            "vocation:getDescription()"
        ]
    },
    "vocation:getHealthGain()": {
        "prefix": "vocation:getHealthGain()",
        "body": [
            "vocation:getHealthGain()"
        ]
    },
    "vocation:getHealthGainAmount()": {
        "prefix": "vocation:getHealthGainAmount()",
        "body": [
            "vocation:getHealthGainAmount()"
        ]
    },
    "vocation:getHealthGainTicks()": {
        "prefix": "vocation:getHealthGainTicks()",
        "body": [
            "vocation:getHealthGainTicks()"
        ]
    },
    "vocation:getId()": {
        "prefix": "vocation:getId()",
        "body": [
            "vocation:getId()"
        ]
    },
    "vocation:getManaGain()": {
        "prefix": "vocation:getManaGain()",
        "body": [
            "vocation:getManaGain()"
        ]
    },
    "vocation:getManaGainAmount()": {
        "prefix": "vocation:getManaGainAmount()",
        "body": [
            "vocation:getManaGainAmount()"
        ]
    },
    "vocation:getManaGainTicks()": {
        "prefix": "vocation:getManaGainTicks()",
        "body": [
            "vocation:getManaGainTicks()"
        ]
    },
    "vocation:getMaxSoul()": {
        "prefix": "vocation:getMaxSoul()",
        "body": [
            "vocation:getMaxSoul()"
        ]
    },
    "vocation:getName()": {
        "prefix": "vocation:getName()",
        "body": [
            "vocation:getName()"
        ]
    },
    "vocation:getPromotion()": {
        "prefix": "vocation:getPromotion()",
        "body": [
            "vocation:getPromotion()"
        ]
    },
    "vocation:getRequiredManaSpent(magicLevel)": {
        "prefix": "vocation:getRequiredManaSpent(magicLevel)",
        "body": [
            "vocation:getRequiredManaSpent(magicLevel)"
        ]
    },
    "vocation:getRequiredSkillTries(skillType, skillLevel)": {
        "prefix": "vocation:getRequiredSkillTries(skillType, skillLevel)",
        "body": [
            "vocation:getRequiredSkillTries(skillType, skillLevel)"
        ]
    },
    "vocation:getSoulGainTicks()": {
        "prefix": "vocation:getSoulGainTicks()",
        "body": [
            "vocation:getSoulGainTicks()"
        ]
    },
    "": {
        "prefix": "",
        "body": [
            ""
        ]
    },
    "addDamageCondition(condition, rounds, time, value)": {
        "prefix": "addDamageCondition(condition, rounds, time, value)",
        "body": [
            "addDamageCondition(condition, rounds, time, value)"
        ]
    },
    "addEvent(callback, delay, ...)": {
        "prefix": "addEvent(callback, delay, ...)",
        "body": [
            "addEvent(callback, delay, ...)"
        ]
    },
    "addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)": {
        "prefix": "addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)",
        "body": [
            "addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)"
        ]
    },
    "broadcastMessage(message, type)": {
        "prefix": "broadcastMessage(message, type)",
        "body": [
            "broadcastMessage(message, type)"
        ]
    },
    "canPlayerLearnInstantSpell(cid, name)": {
        "prefix": "canPlayerLearnInstantSpell(cid, name)",
        "body": [
            "canPlayerLearnInstantSpell(cid, name)"
        ]
    },
    "canPlayerWearOutfit(cid, lookType, addons)": {
        "prefix": "canPlayerWearOutfit(cid, lookType, addons)",
        "body": [
            "canPlayerWearOutfit(cid, lookType, addons)"
        ]
    },
    "cleanMap()": {
        "prefix": "cleanMap()",
        "body": [
            "cleanMap()"
        ]
    },
    "createCombatArea( {area}, <optional> {extArea} )": {
        "prefix": "createCombatArea( {area}, <optional> {extArea} )",
        "body": [
            "createCombatArea( {area}, <optional> {extArea} )"
        ]
    },
    "createCombatObject()": {
        "prefix": "createCombatObject()",
        "body": [
            "createCombatObject()"
        ]
    },
    "createConditionObject(type)": {
        "prefix": "createConditionObject(type)",
        "body": [
            "createConditionObject(type)"
        ]
    },
    "Creature.getClosestFreePosition(self, position, extended)": {
        "prefix": "Creature.getClosestFreePosition(self, position, extended)",
        "body": [
            "Creature.getClosestFreePosition(self, position, extended)"
        ]
    },
    "debugPrint(text)": {
        "prefix": "debugPrint(text)",
        "body": [
            "debugPrint(text)"
        ]
    },
    "doAddCondition(cid, condition)": {
        "prefix": "doAddCondition(cid, condition)",
        "body": [
            "doAddCondition(cid, condition)"
        ]
    },
    "doAddContainerItem(uid, itemid, <optional> count/subtype)": {
        "prefix": "doAddContainerItem(uid, itemid, <optional> count/subtype)",
        "body": [
            "doAddContainerItem(uid, itemid, <optional> count/subtype)"
        ]
    },
    "doAddContainerItemEx(uid, virtualId)": {
        "prefix": "doAddContainerItemEx(uid, virtualId)",
        "body": [
            "doAddContainerItemEx(uid, virtualId)"
        ]
    },
    "doAddMapMark(cid, pos, type, description)": {
        "prefix": "doAddMapMark(cid, pos, type, description)",
        "body": [
            "doAddMapMark(cid, pos, type, description)"
        ]
    },
    "doAreaCombatCondition(cid, pos, area, condition, effect)": {
        "prefix": "doAreaCombatCondition(cid, pos, area, condition, effect)",
        "body": [
            "doAreaCombatCondition(cid, pos, area, condition, effect)"
        ]
    },
    "doAreaCombatDispel(cid, pos, area, type, effect)": {
        "prefix": "doAreaCombatDispel(cid, pos, area, type, effect)",
        "body": [
            "doAreaCombatDispel(cid, pos, area, type, effect)"
        ]
    },
    "doAreaCombatHealth(cid, type, pos, area, min, max, effect)": {
        "prefix": "doAreaCombatHealth(cid, type, pos, area, min, max, effect)",
        "body": [
            "doAreaCombatHealth(cid, type, pos, area, min, max, effect)"
        ]
    },
    "doAreaCombatMana(cid, pos, area, min, max, effect)": {
        "prefix": "doAreaCombatMana(cid, pos, area, min, max, effect)",
        "body": [
            "doAreaCombatMana(cid, pos, area, min, max, effect)"
        ]
    },
    "doChallengeCreature(cid, target)": {
        "prefix": "doChallengeCreature(cid, target)",
        "body": [
            "doChallengeCreature(cid, target)"
        ]
    },
    "doChangeSpeed(cid, delta)": {
        "prefix": "doChangeSpeed(cid, delta)",
        "body": [
            "doChangeSpeed(cid, delta)"
        ]
    },
    "doChangeTypeItem(uid, newtype)": {
        "prefix": "doChangeTypeItem(uid, newtype)",
        "body": [
            "doChangeTypeItem(uid, newtype)"
        ]
    },
    "doCombat(cid, combat, param)": {
        "prefix": "doCombat(cid, combat, param)",
        "body": [
            "doCombat(cid, combat, param)"
        ]
    },
    "doConvinceCreature(cid, target)": {
        "prefix": "doConvinceCreature(cid, target)",
        "body": [
            "doConvinceCreature(cid, target)"
        ]
    },
    "doCreateItem(itemid, type/count, pos)": {
        "prefix": "doCreateItem(itemid, type/count, pos)",
        "body": [
            "doCreateItem(itemid, type/count, pos)"
        ]
    },
    "doCreateItemEx(itemid, <optional> count/subtype)": {
        "prefix": "doCreateItemEx(itemid, <optional> count/subtype)",
        "body": [
            "doCreateItemEx(itemid, <optional> count/subtype)"
        ]
    },
    "doCreateNpc(name, pos)": {
        "prefix": "doCreateNpc(name, pos)",
        "body": [
            "doCreateNpc(name, pos)"
        ]
    },
    "doCreateTeleport(itemid, topos, createpos)": {
        "prefix": "doCreateTeleport(itemid, topos, createpos)",
        "body": [
            "doCreateTeleport(itemid, topos, createpos)"
        ]
    },
    "doCreatureAddHealth(cid, health)": {
        "prefix": "doCreatureAddHealth(cid, health)",
        "body": [
            "doCreatureAddHealth(cid, health)"
        ]
    },
    "doCreatureChangeOutfit(cid, outfit)": {
        "prefix": "doCreatureChangeOutfit(cid, outfit)",
        "body": [
            "doCreatureChangeOutfit(cid, outfit)"
        ]
    },
    "doCreatureSay(cid, text, type, ...)": {
        "prefix": "doCreatureSay(cid, text, type, ...)",
        "body": [
            "doCreatureSay(cid, text, type, ...)"
        ]
    },
    "doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)": {
        "prefix": "doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)",
        "body": [
            "doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)"
        ]
    },
    "doCreatureSetLookDir(cid, direction)": {
        "prefix": "doCreatureSetLookDir(cid, direction)",
        "body": [
            "doCreatureSetLookDir(cid, direction)"
        ]
    },
    "doDecayItem(uid)": {
        "prefix": "doDecayItem(uid)",
        "body": [
            "doDecayItem(uid)"
        ]
    },
    "doForceSummonCreature(name, pos)": {
        "prefix": "doForceSummonCreature(name, pos)",
        "body": [
            "doForceSummonCreature(name, pos)"
        ]
    },
    "doMonsterChangeTarget(cid)": {
        "prefix": "doMonsterChangeTarget(cid)",
        "body": [
            "doMonsterChangeTarget(cid)"
        ]
    },
    "doMoveCreature(cid, direction)": {
        "prefix": "doMoveCreature(cid, direction)",
        "body": [
            "doMoveCreature(cid, direction)"
        ]
    },
    "doPlayerAddBlessing(cid, blessing)": {
        "prefix": "doPlayerAddBlessing(cid, blessing)",
        "body": [
            "doPlayerAddBlessing(cid, blessing)"
        ]
    },
    "doPlayerAddExp(cid, exp, useMult, ...)": {
        "prefix": "doPlayerAddExp(cid, exp, useMult, ...)",
        "body": [
            "doPlayerAddExp(cid, exp, useMult, ...)"
        ]
    },
    "doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)": {
        "prefix": "doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)",
        "body": [
            "doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)"
        ]
    },
    "doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)": {
        "prefix": "doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)",
        "body": [
            "doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)"
        ]
    },
    "doPlayerAddItemEx(cid, uid, ...)": {
        "prefix": "doPlayerAddItemEx(cid, uid, ...)",
        "body": [
            "doPlayerAddItemEx(cid, uid, ...)"
        ]
    },
    "doPlayerAddMana(cid, mana, ...)": {
        "prefix": "doPlayerAddMana(cid, mana, ...)",
        "body": [
            "doPlayerAddMana(cid, mana, ...)"
        ]
    },
    "doPlayerAddManaSpent(cid, mana)": {
        "prefix": "doPlayerAddManaSpent(cid, mana)",
        "body": [
            "doPlayerAddManaSpent(cid, mana)"
        ]
    },
    "doPlayerAddMoney(cid, money)": {
        "prefix": "doPlayerAddMoney(cid, money)",
        "body": [
            "doPlayerAddMoney(cid, money)"
        ]
    },
    "doPlayerAddMount(cid, mountId)": {
        "prefix": "doPlayerAddMount(cid, mountId)",
        "body": [
            "doPlayerAddMount(cid, mountId)"
        ]
    },
    "doPlayerAddOutfit(cid, lookType, addons)": {
        "prefix": "doPlayerAddOutfit(cid, lookType, addons)",
        "body": [
            "doPlayerAddOutfit(cid, lookType, addons)"
        ]
    },
    "doPlayerAddPremiumDays(cid, days)": {
        "prefix": "doPlayerAddPremiumDays(cid, days)",
        "body": [
            "doPlayerAddPremiumDays(cid, days)"
        ]
    },
    "doPlayerAddSkillTry(cid, skillid, n)": {
        "prefix": "doPlayerAddSkillTry(cid, skillid, n)",
        "body": [
            "doPlayerAddSkillTry(cid, skillid, n)"
        ]
    },
    "doPlayerAddSoul(cid, soul)": {
        "prefix": "doPlayerAddSoul(cid, soul)",
        "body": [
            "doPlayerAddSoul(cid, soul)"
        ]
    },
    "doPlayerFeed(cid, food)": {
        "prefix": "doPlayerFeed(cid, food)",
        "body": [
            "doPlayerFeed(cid, food)"
        ]
    },
    "doPlayerJoinParty(cid, leaderId)": {
        "prefix": "doPlayerJoinParty(cid, leaderId)",
        "body": [
            "doPlayerJoinParty(cid, leaderId)"
        ]
    },
    "doPlayerPopupFYI(cid, message)": {
        "prefix": "doPlayerPopupFYI(cid, message)",
        "body": [
            "doPlayerPopupFYI(cid, message)"
        ]
    },
    "doPlayerRemOutfit(cid, lookType, addons)": {
        "prefix": "doPlayerRemOutfit(cid, lookType, addons)",
        "body": [
            "doPlayerRemOutfit(cid, lookType, addons)"
        ]
    },
    "doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)": {
        "prefix": "doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)",
        "body": [
            "doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)"
        ]
    },
    "doPlayerRemoveMoney(cid, money)": {
        "prefix": "doPlayerRemoveMoney(cid, money)",
        "body": [
            "doPlayerRemoveMoney(cid, money)"
        ]
    },
    "doPlayerRemoveMount(cid, mountId)": {
        "prefix": "doPlayerRemoveMount(cid, mountId)",
        "body": [
            "doPlayerRemoveMount(cid, mountId)"
        ]
    },
    "doPlayerRemovePremiumDays(cid, days)": {
        "prefix": "doPlayerRemovePremiumDays(cid, days)",
        "body": [
            "doPlayerRemovePremiumDays(cid, days)"
        ]
    },
    "doPlayerSendCancel(cid, text)": {
        "prefix": "doPlayerSendCancel(cid, text)",
        "body": [
            "doPlayerSendCancel(cid, text)"
        ]
    },
    "doPlayerSendTextMessage(cid, type, text, ...)": {
        "prefix": "doPlayerSendTextMessage(cid, type, text, ...)",
        "body": [
            "doPlayerSendTextMessage(cid, type, text, ...)"
        ]
    },
    "doPlayerSetBalance(cid, balance)": {
        "prefix": "doPlayerSetBalance(cid, balance)",
        "body": [
            "doPlayerSetBalance(cid, balance)"
        ]
    },
    "doPlayerSetGuildLevel(cid, level)": {
        "prefix": "doPlayerSetGuildLevel(cid, level)",
        "body": [
            "doPlayerSetGuildLevel(cid, level)"
        ]
    },
    "doPlayerSetGuildNick(cid, nick)": {
        "prefix": "doPlayerSetGuildNick(cid, nick)",
        "body": [
            "doPlayerSetGuildNick(cid, nick)"
        ]
    },
    "doPlayerSetOfflineTrainingSkill(cid, skill)": {
        "prefix": "doPlayerSetOfflineTrainingSkill(cid, skill)",
        "body": [
            "doPlayerSetOfflineTrainingSkill(cid, skill)"
        ]
    },
    "doPlayerSetSex(cid, sex)": {
        "prefix": "doPlayerSetSex(cid, sex)",
        "body": [
            "doPlayerSetSex(cid, sex)"
        ]
    },
    "doPlayerSetTown(cid, town)": {
        "prefix": "doPlayerSetTown(cid, town)",
        "body": [
            "doPlayerSetTown(cid, town)"
        ]
    },
    "doPlayerSetVocation(cid, vocation)": {
        "prefix": "doPlayerSetVocation(cid, vocation)",
        "body": [
            "doPlayerSetVocation(cid, vocation)"
        ]
    },
    "doRelocate(pos, posTo)": {
        "prefix": "doRelocate(pos, posTo)",
        "body": [
            "doRelocate(pos, posTo)"
        ]
    },
    "doRemoveCondition(cid, type[, subId])": {
        "prefix": "doRemoveCondition(cid, type[, subId])",
        "body": [
            "doRemoveCondition(cid, type[, subId])"
        ]
    },
    "doRemoveCreature(cid)": {
        "prefix": "doRemoveCreature(cid)",
        "body": [
            "doRemoveCreature(cid)"
        ]
    },
    "doRemoveItem(uid, ...)": {
        "prefix": "doRemoveItem(uid, ...)",
        "body": [
            "doRemoveItem(uid, ...)"
        ]
    },
    "doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)": {
        "prefix": "doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)",
        "body": [
            "doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)"
        ]
    },
    "doSendMagicEffect(pos, magicEffect, ...)": {
        "prefix": "doSendMagicEffect(pos, magicEffect, ...)",
        "body": [
            "doSendMagicEffect(pos, magicEffect, ...)"
        ]
    },
    "doSendTutorial(cid, tutorialId)": {
        "prefix": "doSendTutorial(cid, tutorialId)",
        "body": [
            "doSendTutorial(cid, tutorialId)"
        ]
    },
    "doSetCreatureDropLoot(cid, doDrop)": {
        "prefix": "doSetCreatureDropLoot(cid, doDrop)",
        "body": [
            "doSetCreatureDropLoot(cid, doDrop)"
        ]
    },
    "doSetCreatureLight(cid, lightLevel, lightColor, time)": {
        "prefix": "doSetCreatureLight(cid, lightLevel, lightColor, time)",
        "body": [
            "doSetCreatureLight(cid, lightLevel, lightColor, time)"
        ]
    },
    "doSetCreatureOutfit(cid, outfit, time)": {
        "prefix": "doSetCreatureOutfit(cid, outfit, time)",
        "body": [
            "doSetCreatureOutfit(cid, outfit, time)"
        ]
    },
    "doSetItemActionId(uid, actionId)": {
        "prefix": "doSetItemActionId(uid, actionId)",
        "body": [
            "doSetItemActionId(uid, actionId)"
        ]
    },
    "doSetItemOutfit(cid, item, time)": {
        "prefix": "doSetItemOutfit(cid, item, time)",
        "body": [
            "doSetItemOutfit(cid, item, time)"
        ]
    },
    "doSetItemSpecialDescription(uid, desc)": {
        "prefix": "doSetItemSpecialDescription(uid, desc)",
        "body": [
            "doSetItemSpecialDescription(uid, desc)"
        ]
    },
    "doSetItemText(uid, text)": {
        "prefix": "doSetItemText(uid, text)",
        "body": [
            "doSetItemText(uid, text)"
        ]
    },
    "doSetMonsterOutfit(cid, name, time)": {
        "prefix": "doSetMonsterOutfit(cid, name, time)",
        "body": [
            "doSetMonsterOutfit(cid, name, time)"
        ]
    },
    "doSetMonsterTarget(cid, target)": {
        "prefix": "doSetMonsterTarget(cid, target)",
        "body": [
            "doSetMonsterTarget(cid, target)"
        ]
    },
    "doShowTextDialog(cid, itemId, text)": {
        "prefix": "doShowTextDialog(cid, itemId, text)",
        "body": [
            "doShowTextDialog(cid, itemId, text)"
        ]
    },
    "doSummonCreature(name, pos)": {
        "prefix": "doSummonCreature(name, pos)",
        "body": [
            "doSummonCreature(name, pos)"
        ]
    },
    "doTargetCombatCondition(cid, target, condition, effect)": {
        "prefix": "doTargetCombatCondition(cid, target, condition, effect)",
        "body": [
            "doTargetCombatCondition(cid, target, condition, effect)"
        ]
    },
    "doTargetCombatDispel(cid, target, type, effect)": {
        "prefix": "doTargetCombatDispel(cid, target, type, effect)",
        "body": [
            "doTargetCombatDispel(cid, target, type, effect)"
        ]
    },
    "doTargetCombatHealth(cid, target, type, min, max, effect)": {
        "prefix": "doTargetCombatHealth(cid, target, type, min, max, effect)",
        "body": [
            "doTargetCombatHealth(cid, target, type, min, max, effect)"
        ]
    },
    "doTargetCombatMana(cid, target, min, max, effect)": {
        "prefix": "doTargetCombatMana(cid, target, min, max, effect)",
        "body": [
            "doTargetCombatMana(cid, target, min, max, effect)"
        ]
    },
    "doTeleportThing(uid, dest, pushMovement)": {
        "prefix": "doTeleportThing(uid, dest, pushMovement)",
        "body": [
            "doTeleportThing(uid, dest, pushMovement)"
        ]
    },
    "doTileAddItemEx(pos, uid)": {
        "prefix": "doTileAddItemEx(pos, uid)",
        "body": [
            "doTileAddItemEx(pos, uid)"
        ]
    },
    "doTransformItem(uid, newItemId, ...)": {
        "prefix": "doTransformItem(uid, newItemId, ...)",
        "body": [
            "doTransformItem(uid, newItemId, ...)"
        ]
    },
    "Game.convertIpToString(ip)": {
        "prefix": "Game.convertIpToString(ip)",
        "body": [
            "Game.convertIpToString(ip)"
        ]
    },
    "Game.getStorageValue(key)": {
        "prefix": "Game.getStorageValue(key)",
        "body": [
            "Game.getStorageValue(key)"
        ]
    },
    "Game.getTowns()": {
        "prefix": "Game.getTowns()",
        "body": [
            "Game.getTowns()"
        ]
    },
    "Game.getHouses()": {
        "prefix": "Game.getHouses()",
        "body": [
            "Game.getHouses()"
        ]
    },
    "Game.setStorageValue(key, value)": {
        "prefix": "Game.setStorageValue(key, value)",
        "body": [
            "Game.setStorageValue(key, value)"
        ]
    },
    "getAccountNumberByPlayerName(name)": {
        "prefix": "getAccountNumberByPlayerName(name)",
        "body": [
            "getAccountNumberByPlayerName(name)"
        ]
    },
    "getBlessingsCost(level)": {
        "prefix": "getBlessingsCost(level)",
        "body": [
            "getBlessingsCost(level)"
        ]
    },
    "getConfigInfo(info)": {
        "prefix": "getConfigInfo(info)",
        "body": [
            "getConfigInfo(info)"
        ]
    },
    "getContainerCap(uid)": {
        "prefix": "getContainerCap(uid)",
        "body": [
            "getContainerCap(uid)"
        ]
    },
    "getContainerCapById(itemId)": {
        "prefix": "getContainerCapById(itemId)",
        "body": [
            "getContainerCapById(itemId)"
        ]
    },
    "getContainerItem(uid, slot)": {
        "prefix": "getContainerItem(uid, slot)",
        "body": [
            "getContainerItem(uid, slot)"
        ]
    },
    "getContainerSize(uid)": {
        "prefix": "getContainerSize(uid)",
        "body": [
            "getContainerSize(uid)"
        ]
    },
    "getCreatureBaseSpeed(cid)": {
        "prefix": "getCreatureBaseSpeed(cid)",
        "body": [
            "getCreatureBaseSpeed(cid)"
        ]
    },
    "getCreatureCondition(cid, condition[, subId])": {
        "prefix": "getCreatureCondition(cid, condition[, subId])",
        "body": [
            "getCreatureCondition(cid, condition[, subId])"
        ]
    },
    "getCreatureHealth(cid)": {
        "prefix": "getCreatureHealth(cid)",
        "body": [
            "getCreatureHealth(cid)"
        ]
    },
    "getCreatureMaster(cid)": {
        "prefix": "getCreatureMaster(cid)",
        "body": [
            "getCreatureMaster(cid)"
        ]
    },
    "getCreatureMaxHealth(cid)": {
        "prefix": "getCreatureMaxHealth(cid)",
        "body": [
            "getCreatureMaxHealth(cid)"
        ]
    },
    "getCreatureName(cid)": {
        "prefix": "getCreatureName(cid)",
        "body": [
            "getCreatureName(cid)"
        ]
    },
    "getCreatureOutfit(cid)": {
        "prefix": "getCreatureOutfit(cid)",
        "body": [
            "getCreatureOutfit(cid)"
        ]
    },
    "getCreaturePosition(cid)": {
        "prefix": "getCreaturePosition(cid)",
        "body": [
            "getCreaturePosition(cid)"
        ]
    },
    "getCreatureSpeed(cid)": {
        "prefix": "getCreatureSpeed(cid)",
        "body": [
            "getCreatureSpeed(cid)"
        ]
    },
    "getCreatureSummons(cid)": {
        "prefix": "getCreatureSummons(cid)",
        "body": [
            "getCreatureSummons(cid)"
        ]
    },
    "getCreatureTarget(cid)": {
        "prefix": "getCreatureTarget(cid)",
        "body": [
            "getCreatureTarget(cid)"
        ]
    },
    "getDepotId(uid)": {
        "prefix": "getDepotId(uid)",
        "body": [
            "getDepotId(uid)"
        ]
    },
    "getDistanceBetween(firstPosition, secondPosition)": {
        "prefix": "getDistanceBetween(firstPosition, secondPosition)",
        "body": [
            "getDistanceBetween(firstPosition, secondPosition)"
        ]
    },
    "getFluidSourceType(itemId)": {
        "prefix": "getFluidSourceType(itemId)",
        "body": [
            "getFluidSourceType(itemId)"
        ]
    },
    "getGlobalStorageValue(key)": {
        "prefix": "getGlobalStorageValue(key)",
        "body": [
            "getGlobalStorageValue(key)"
        ]
    },
    "getGuildId(guildName)": {
        "prefix": "getGuildId(guildName)",
        "body": [
            "getGuildId(guildName)"
        ]
    },
    "getHouseAccessList(id, listId)": {
        "prefix": "getHouseAccessList(id, listId)",
        "body": [
            "getHouseAccessList(id, listId)"
        ]
    },
    "getHouseByPlayerGUID(playerGUID)": {
        "prefix": "getHouseByPlayerGUID(playerGUID)",
        "body": [
            "getHouseByPlayerGUID(playerGUID)"
        ]
    },
    "getHouseEntry(houseId)": {
        "prefix": "getHouseEntry(houseId)",
        "body": [
            "getHouseEntry(houseId)"
        ]
    },
    "getHouseName(houseId)": {
        "prefix": "getHouseName(houseId)",
        "body": [
            "getHouseName(houseId)"
        ]
    },
    "getHouseOwner(houseId)": {
        "prefix": "getHouseOwner(houseId)",
        "body": [
            "getHouseOwner(houseId)"
        ]
    },
    "getHouseRent(id)": {
        "prefix": "getHouseRent(id)",
        "body": [
            "getHouseRent(id)"
        ]
    },
    "getHouseTilesSize(houseId)": {
        "prefix": "getHouseTilesSize(houseId)",
        "body": [
            "getHouseTilesSize(houseId)"
        ]
    },
    "getHouseTown(houseId)": {
        "prefix": "getHouseTown(houseId)",
        "body": [
            "getHouseTown(houseId)"
        ]
    },
    "getInstantSpellInfoByName(cid, name)": {
        "prefix": "getInstantSpellInfoByName(cid, name)",
        "body": [
            "getInstantSpellInfoByName(cid, name)"
        ]
    },
    "getInstantSpellWords(name)": {
        "prefix": "getInstantSpellWords(name)",
        "body": [
            "getInstantSpellWords(name)"
        ]
    },
    "getIPByPlayerName(name)": {
        "prefix": "getIPByPlayerName(name)",
        "body": [
            "getIPByPlayerName(name)"
        ]
    },
    "getItemDescriptions(itemId)": {
        "prefix": "getItemDescriptions(itemId)",
        "body": [
            "getItemDescriptions(itemId)"
        ]
    },
    "getItemIdByName(name)": {
        "prefix": "getItemIdByName(name)",
        "body": [
            "getItemIdByName(name)"
        ]
    },
    "getItemName(itemId)": {
        "prefix": "getItemName(itemId)",
        "body": [
            "getItemName(itemId)"
        ]
    },
    "getItemRWInfo(uid)": {
        "prefix": "getItemRWInfo(uid)",
        "body": [
            "getItemRWInfo(uid)"
        ]
    },
    "getItemWeight(itemId, ...)": {
        "prefix": "getItemWeight(itemId, ...)",
        "body": [
            "getItemWeight(itemId, ...)"
        ]
    },
    "getItemWeightByUID(uid, ...)": {
        "prefix": "getItemWeightByUID(uid, ...)",
        "body": [
            "getItemWeightByUID(uid, ...)"
        ]
    },
    "getMonsterFriendList(cid)": {
        "prefix": "getMonsterFriendList(cid)",
        "body": [
            "getMonsterFriendList(cid)"
        ]
    },
    "getMonsterTargetList(cid)": {
        "prefix": "getMonsterTargetList(cid)",
        "body": [
            "getMonsterTargetList(cid)"
        ]
    },
    "getOnlinePlayers()": {
        "prefix": "getOnlinePlayers()",
        "body": [
            "getOnlinePlayers()"
        ]
    },
    "getPartyMembers(cid)": {
        "prefix": "getPartyMembers(cid)",
        "body": [
            "getPartyMembers(cid)"
        ]
    },
    "getPlayerAccess(cid)": {
        "prefix": "getPlayerAccess(cid)",
        "body": [
            "getPlayerAccess(cid)"
        ]
    },
    "getPlayerAccountType(cid)": {
        "prefix": "getPlayerAccountType(cid)",
        "body": [
            "getPlayerAccountType(cid)"
        ]
    },
    "getPlayerBalance(cid)": {
        "prefix": "getPlayerBalance(cid)",
        "body": [
            "getPlayerBalance(cid)"
        ]
    },
    "getPlayerBlessing(cid, blessing)": {
        "prefix": "getPlayerBlessing(cid, blessing)",
        "body": [
            "getPlayerBlessing(cid, blessing)"
        ]
    },
    "getPlayerByName(name)": {
        "prefix": "getPlayerByName(name)",
        "body": [
            "getPlayerByName(name)"
        ]
    },
    "getPlayerDepotItems(cid, depotId)": {
        "prefix": "getPlayerDepotItems(cid, depotId)",
        "body": [
            "getPlayerDepotItems(cid, depotId)"
        ]
    },
    "getPlayerFlagValue(cid, flag)": {
        "prefix": "getPlayerFlagValue(cid, flag)",
        "body": [
            "getPlayerFlagValue(cid, flag)"
        ]
    },
    "getPlayerFood(cid)": {
        "prefix": "getPlayerFood(cid)",
        "body": [
            "getPlayerFood(cid)"
        ]
    },
    "getPlayerFreeCap(cid)": {
        "prefix": "getPlayerFreeCap(cid)",
        "body": [
            "getPlayerFreeCap(cid)"
        ]
    },
    "getPlayerGroupId(cid)": {
        "prefix": "getPlayerGroupId(cid)",
        "body": [
            "getPlayerGroupId(cid)"
        ]
    },
    "getPlayerGUID(cid)": {
        "prefix": "getPlayerGUID(cid)",
        "body": [
            "getPlayerGUID(cid)"
        ]
    },
    "getPlayerGUIDByName(name)": {
        "prefix": "getPlayerGUIDByName(name)",
        "body": [
            "getPlayerGUIDByName(name)"
        ]
    },
    "getPlayerGuildId(cid)": {
        "prefix": "getPlayerGuildId(cid)",
        "body": [
            "getPlayerGuildId(cid)"
        ]
    },
    "getPlayerGuildLevel(cid)": {
        "prefix": "getPlayerGuildLevel(cid)",
        "body": [
            "getPlayerGuildLevel(cid)"
        ]
    },
    "getPlayerGuildName(cid)": {
        "prefix": "getPlayerGuildName(cid)",
        "body": [
            "getPlayerGuildName(cid)"
        ]
    },
    "getPlayerGuildNick(cid)": {
        "prefix": "getPlayerGuildNick(cid)",
        "body": [
            "getPlayerGuildNick(cid)"
        ]
    },
    "getPlayerGuildRank(cid)": {
        "prefix": "getPlayerGuildRank(cid)",
        "body": [
            "getPlayerGuildRank(cid)"
        ]
    },
    "getPlayerInstantSpellCount(cid)": {
        "prefix": "getPlayerInstantSpellCount(cid)",
        "body": [
            "getPlayerInstantSpellCount(cid)"
        ]
    },
    "getPlayerInstantSpellInfo(cid, index)": {
        "prefix": "getPlayerInstantSpellInfo(cid, index)",
        "body": [
            "getPlayerInstantSpellInfo(cid, index)"
        ]
    },
    "getPlayerIp(cid)": {
        "prefix": "getPlayerIp(cid)",
        "body": [
            "getPlayerIp(cid)"
        ]
    },
    "getPlayerItemById(cid, deepSearch, itemId, ...)": {
        "prefix": "getPlayerItemById(cid, deepSearch, itemId, ...)",
        "body": [
            "getPlayerItemById(cid, deepSearch, itemId, ...)"
        ]
    },
    "getPlayerItemCount(cid, itemId, ...)": {
        "prefix": "getPlayerItemCount(cid, itemId, ...)",
        "body": [
            "getPlayerItemCount(cid, itemId, ...)"
        ]
    },
    "getPlayerLastLoginSaved(cid)": {
        "prefix": "getPlayerLastLoginSaved(cid)",
        "body": [
            "getPlayerLastLoginSaved(cid)"
        ]
    },
    "getPlayerLearnedInstantSpell(cid, name)": {
        "prefix": "getPlayerLearnedInstantSpell(cid, name)",
        "body": [
            "getPlayerLearnedInstantSpell(cid, name)"
        ]
    },
    "getPlayerLevel(cid)": {
        "prefix": "getPlayerLevel(cid)",
        "body": [
            "getPlayerLevel(cid)"
        ]
    },
    "getPlayerLight(cid)": {
        "prefix": "getPlayerLight(cid)",
        "body": [
            "getPlayerLight(cid)"
        ]
    },
    "getPlayerLookDir(cid)": {
        "prefix": "getPlayerLookDir(cid)",
        "body": [
            "getPlayerLookDir(cid)"
        ]
    },
    "getPlayerLossPercent(cid)": {
        "prefix": "getPlayerLossPercent(cid)",
        "body": [
            "getPlayerLossPercent(cid)"
        ]
    },
    "getPlayerMagLevel(cid)": {
        "prefix": "getPlayerMagLevel(cid)",
        "body": [
            "getPlayerMagLevel(cid)"
        ]
    },
    "getPlayerMana(cid)": {
        "prefix": "getPlayerMana(cid)",
        "body": [
            "getPlayerMana(cid)"
        ]
    },
    "getPlayerMasterPos(cid)": {
        "prefix": "getPlayerMasterPos(cid)",
        "body": [
            "getPlayerMasterPos(cid)"
        ]
    },
    "getPlayerMaxMana(cid)": {
        "prefix": "getPlayerMaxMana(cid)",
        "body": [
            "getPlayerMaxMana(cid)"
        ]
    },
    "getPlayerMoney(cid)": {
        "prefix": "getPlayerMoney(cid)",
        "body": [
            "getPlayerMoney(cid)"
        ]
    },
    "getPlayerMount(cid, mountId)": {
        "prefix": "getPlayerMount(cid, mountId)",
        "body": [
            "getPlayerMount(cid, mountId)"
        ]
    },
    "getPlayerName(cid)": {
        "prefix": "getPlayerName(cid)",
        "body": [
            "getPlayerName(cid)"
        ]
    },
    "getPlayerParty(cid)": {
        "prefix": "getPlayerParty(cid)",
        "body": [
            "getPlayerParty(cid)"
        ]
    },
    "getPlayerPosition(cid)": {
        "prefix": "getPlayerPosition(cid)",
        "body": [
            "getPlayerPosition(cid)"
        ]
    },
    "getPlayerPremiumDays(cid)": {
        "prefix": "getPlayerPremiumDays(cid)",
        "body": [
            "getPlayerPremiumDays(cid)"
        ]
    },
    "getPlayersByAccountNumber(accountNumber)": {
        "prefix": "getPlayersByAccountNumber(accountNumber)",
        "body": [
            "getPlayersByAccountNumber(accountNumber)"
        ]
    },
    "getPlayersByIPAddress(ip, mask)": {
        "prefix": "getPlayersByIPAddress(ip, mask)",
        "body": [
            "getPlayersByIPAddress(ip, mask)"
        ]
    },
    "getPlayerSex(cid)": {
        "prefix": "getPlayerSex(cid)",
        "body": [
            "getPlayerSex(cid)"
        ]
    },
    "getPlayerSkill(cid, skillId)": {
        "prefix": "getPlayerSkill(cid, skillId)",
        "body": [
            "getPlayerSkill(cid, skillId)"
        ]
    },
    "getPlayerSkullType(cid)": {
        "prefix": "getPlayerSkullType(cid)",
        "body": [
            "getPlayerSkullType(cid)"
        ]
    },
    "getPlayerSlotItem(cid, slot)": {
        "prefix": "getPlayerSlotItem(cid, slot)",
        "body": [
            "getPlayerSlotItem(cid, slot)"
        ]
    },
    "getPlayerSoul(cid)": {
        "prefix": "getPlayerSoul(cid)",
        "body": [
            "getPlayerSoul(cid)"
        ]
    },
    "getPlayerStorageValue(cid, key)": {
        "prefix": "getPlayerStorageValue(cid, key)",
        "body": [
            "getPlayerStorageValue(cid, key)"
        ]
    },
    "getPlayerTown(cid)": {
        "prefix": "getPlayerTown(cid)",
        "body": [
            "getPlayerTown(cid)"
        ]
    },
    "getPlayerVocation(cid)": {
        "prefix": "getPlayerVocation(cid)",
        "body": [
            "getPlayerVocation(cid)"
        ]
    },
    "getPromotedVocation(vocationId)": {
        "prefix": "getPromotedVocation(vocationId)",
        "body": [
            "getPromotedVocation(vocationId)"
        ]
    },
    "getPvpBlessingCost(level)": {
        "prefix": "getPvpBlessingCost(level)",
        "body": [
            "getPvpBlessingCost(level)"
        ]
    },
    "getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)": {
        "prefix": "getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)",
        "body": [
            "getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)"
        ]
    },
    "getThing(uid)": {
        "prefix": "getThing(uid)",
        "body": [
            "getThing(uid)"
        ]
    },
    "getThingfromPos(pos)": {
        "prefix": "getThingfromPos(pos)",
        "body": [
            "getThingfromPos(pos)"
        ]
    },
    "getThingPos(uid)": {
        "prefix": "getThingPos(uid)",
        "body": [
            "getThingPos(uid)"
        ]
    },
    "getTibianTime()": {
        "prefix": "getTibianTime()",
        "body": [
            "getTibianTime()"
        ]
    },
    "getTileHouseInfo(pos)": {
        "prefix": "getTileHouseInfo(pos)",
        "body": [
            "getTileHouseInfo(pos)"
        ]
    },
    "getTileInfo(position)": {
        "prefix": "getTileInfo(position)",
        "body": [
            "getTileInfo(position)"
        ]
    },
    "getTileItemById(position, itemId, ...)": {
        "prefix": "getTileItemById(position, itemId, ...)",
        "body": [
            "getTileItemById(position, itemId, ...)"
        ]
    },
    "getTileItemByType(position, itemType)": {
        "prefix": "getTileItemByType(position, itemType)",
        "body": [
            "getTileItemByType(position, itemType)"
        ]
    },
    "getTilePzInfo(position)": {
        "prefix": "getTilePzInfo(position)",
        "body": [
            "getTilePzInfo(position)"
        ]
    },
    "getTileThingByPos(position)": {
        "prefix": "getTileThingByPos(position)",
        "body": [
            "getTileThingByPos(position)"
        ]
    },
    "getTileThingByTopOrder(position, topOrder)": {
        "prefix": "getTileThingByTopOrder(position, topOrder)",
        "body": [
            "getTileThingByTopOrder(position, topOrder)"
        ]
    },
    "getTopCreature(position)": {
        "prefix": "getTopCreature(position)",
        "body": [
            "getTopCreature(position)"
        ]
    },
    "getTownId(townName)": {
        "prefix": "getTownId(townName)",
        "body": [
            "getTownId(townName)"
        ]
    },
    "getTownName(townId)": {
        "prefix": "getTownName(townId)",
        "body": [
            "getTownName(townId)"
        ]
    },
    "getTownTemplePosition(townId)": {
        "prefix": "getTownTemplePosition(townId)",
        "body": [
            "getTownTemplePosition(townId)"
        ]
    },
    "getWaypointPosition(name)": {
        "prefix": "getWaypointPosition(name)",
        "body": [
            "getWaypointPosition(name)"
        ]
    },
    "getWorldCreatures(type)": {
        "prefix": "getWorldCreatures(type)",
        "body": [
            "getWorldCreatures(type)"
        ]
    },
    "getWorldLight()": {
        "prefix": "getWorldLight()",
        "body": [
            "getWorldLight()"
        ]
    },
    "getWorldTime()": {
        "prefix": "getWorldTime()",
        "body": [
            "getWorldTime()"
        ]
    },
    "getWorldUpTime()": {
        "prefix": "getWorldUpTime()",
        "body": [
            "getWorldUpTime()"
        ]
    },
    "hasProperty(uid, prop)": {
        "prefix": "hasProperty(uid, prop)",
        "body": [
            "hasProperty(uid, prop)"
        ]
    },
    "isContainer(uid)": {
        "prefix": "isContainer(uid)",
        "body": [
            "isContainer(uid)"
        ]
    },
    "isCorpse(uid)": {
        "prefix": "isCorpse(uid)",
        "body": [
            "isCorpse(uid)"
        ]
    },
    "isCreature(cid)": {
        "prefix": "isCreature(cid)",
        "body": [
            "isCreature(cid)"
        ]
    },
    "isDepot(uid)": {
        "prefix": "isDepot(uid)",
        "body": [
            "isDepot(uid)"
        ]
    },
    "isDruid(cid)": {
        "prefix": "isDruid(cid)",
        "body": [
            "isDruid(cid)"
        ]
    },
    "isInArray(array, value)": {
        "prefix": "isInArray(array, value)",
        "body": [
            "isInArray(array, value)"
        ]
    },
    "isInRange(pos, fromPos, toPos)": {
        "prefix": "isInRange(pos, fromPos, toPos)",
        "body": [
            "isInRange(pos, fromPos, toPos)"
        ]
    },
    "isInWar(cid, target)": {
        "prefix": "isInWar(cid, target)",
        "body": [
            "isInWar(cid, target)"
        ]
    },
    "isItem(uid)": {
        "prefix": "isItem(uid)",
        "body": [
            "isItem(uid)"
        ]
    },
    "isItemContainer(itemId)": {
        "prefix": "isItemContainer(itemId)",
        "body": [
            "isItemContainer(itemId)"
        ]
    },
    "isItemDoor(itemId)": {
        "prefix": "isItemDoor(itemId)",
        "body": [
            "isItemDoor(itemId)"
        ]
    },
    "isItemFluidContainer(itemId)": {
        "prefix": "isItemFluidContainer(itemId)",
        "body": [
            "isItemFluidContainer(itemId)"
        ]
    },
    "isItemMovable(itemId)": {
        "prefix": "isItemMovable(itemId)",
        "body": [
            "isItemMovable(itemId)"
        ]
    },
    "isItemRune(itemId)": {
        "prefix": "isItemRune(itemId)",
        "body": [
            "isItemRune(itemId)"
        ]
    },
    "isItemStackable(itemId)": {
        "prefix": "isItemStackable(itemId)",
        "body": [
            "isItemStackable(itemId)"
        ]
    },
    "isKnight(cid)": {
        "prefix": "isKnight(cid)",
        "body": [
            "isKnight(cid)"
        ]
    },
    "isMonster(cid)": {
        "prefix": "isMonster(cid)",
        "body": [
            "isMonster(cid)"
        ]
    },
    "isMovable(uid)": {
        "prefix": "isMovable(uid)",
        "body": [
            "isMovable(uid)"
        ]
    },
    "isNpc(cid)": {
        "prefix": "isNpc(cid)",
        "body": [
            "isNpc(cid)"
        ]
    },
    "isNumber(str)": {
        "prefix": "isNumber(str)",
        "body": [
            "isNumber(str)"
        ]
    },
    "isPaladin(cid)": {
        "prefix": "isPaladin(cid)",
        "body": [
            "isPaladin(cid)"
        ]
    },
    "isPlayer(cid)": {
        "prefix": "isPlayer(cid)",
        "body": [
            "isPlayer(cid)"
        ]
    },
    "isPlayerGhost(cid)": {
        "prefix": "isPlayerGhost(cid)",
        "body": [
            "isPlayerGhost(cid)"
        ]
    },
    "isPlayerPzLocked(cid)": {
        "prefix": "isPlayerPzLocked(cid)",
        "body": [
            "isPlayerPzLocked(cid)"
        ]
    },
    "isPremium(cid)": {
        "prefix": "isPremium(cid)",
        "body": [
            "isPremium(cid)"
        ]
    },
    "isSightClear(fromPos, toPos, floorCheck)": {
        "prefix": "isSightClear(fromPos, toPos, floorCheck)",
        "body": [
            "isSightClear(fromPos, toPos, floorCheck)"
        ]
    },
    "isSorcerer(cid)": {
        "prefix": "isSorcerer(cid)",
        "body": [
            "isSorcerer(cid)"
        ]
    },
    "isSummon(cid)": {
        "prefix": "isSummon(cid)",
        "body": [
            "isSummon(cid)"
        ]
    },
    "isValidUID(uid)": {
        "prefix": "isValidUID(uid)",
        "body": [
            "isValidUID(uid)"
        ]
    },
    "mayNotMove(cid, value)": {
        "prefix": "mayNotMove(cid, value)",
        "body": [
            "mayNotMove(cid, value)"
        ]
    },
    "numberToVariant(number)": {
        "prefix": "numberToVariant(number)",
        "body": [
            "numberToVariant(number)"
        ]
    },
    "Player.feed(self, food)": {
        "prefix": "Player.feed(self, food)",
        "body": [
            "Player.feed(self, food)"
        ]
    },
    "Player.isUsingOtClient(self)": {
        "prefix": "Player.isUsingOtClient(self)",
        "body": [
            "Player.isUsingOtClient(self)"
        ]
    },
    "Player.sendCancelMessage(self, message)": {
        "prefix": "Player.sendCancelMessage(self, message)",
        "body": [
            "Player.sendCancelMessage(self, message)"
        ]
    },
    "Player.sendExtendedOpcode(self, opcode, buffer)": {
        "prefix": "Player.sendExtendedOpcode(self, opcode, buffer)",
        "body": [
            "Player.sendExtendedOpcode(self, opcode, buffer)"
        ]
    },
    "playerLearnInstantSpell(cid, name)": {
        "prefix": "playerLearnInstantSpell(cid, name)",
        "body": [
            "playerLearnInstantSpell(cid, name)"
        ]
    },
    "Position.getNextPosition(self, direction, steps)": {
        "prefix": "Position.getNextPosition(self, direction, steps)",
        "body": [
            "Position.getNextPosition(self, direction, steps)"
        ]
    },
    "positionToVariant(pos)": {
        "prefix": "positionToVariant(pos)",
        "body": [
            "positionToVariant(pos)"
        ]
    },
    "pushThing(thing)": {
        "prefix": "pushThing(thing)",
        "body": [
            "pushThing(thing)"
        ]
    },
    "queryTileAddThing(thing, position, ...)": {
        "prefix": "queryTileAddThing(thing, position, ...)",
        "body": [
            "queryTileAddThing(thing, position, ...)"
        ]
    },
    "registerClass(className, baseClass, newFunction)": {
        "prefix": "registerClass(className, baseClass, newFunction)",
        "body": [
            "registerClass(className, baseClass, newFunction)"
        ]
    },
    "registerCreatureEvent(cid, name)": {
        "prefix": "registerCreatureEvent(cid, name)",
        "body": [
            "registerCreatureEvent(cid, name)"
        ]
    },
    "registerEnum(value)": {
        "prefix": "registerEnum(value)",
        "body": [
            "registerEnum(value)"
        ]
    },
    "registerEnumIn(tableName, value)": {
        "prefix": "registerEnumIn(tableName, value)",
        "body": [
            "registerEnumIn(tableName, value)"
        ]
    },
    "registerGlobalMethod(functionName, function)": {
        "prefix": "registerGlobalMethod(functionName, function)",
        "body": [
            "registerGlobalMethod(functionName, function)"
        ]
    },
    "registerGlobalVariable(name, value)": {
        "prefix": "registerGlobalVariable(name, value)",
        "body": [
            "registerGlobalVariable(name, value)"
        ]
    },
    "registerMetaMethod(className, functionName, function)": {
        "prefix": "registerMetaMethod(className, functionName, function)",
        "body": [
            "registerMetaMethod(className, functionName, function)"
        ]
    },
    "registerMethod(className, functionName, function)": {
        "prefix": "registerMethod(className, functionName, function)",
        "body": [
            "registerMethod(className, functionName, function)"
        ]
    },
    "registerTable(tableName)": {
        "prefix": "registerTable(tableName)",
        "body": [
            "registerTable(tableName)"
        ]
    },
    "registerVariable(tableName, name, value)": {
        "prefix": "registerVariable(tableName, name, value)",
        "body": [
            "registerVariable(tableName, name, value)"
        ]
    },
    "saveServer()": {
        "prefix": "saveServer()",
        "body": [
            "saveServer()"
        ]
    },
    "sendChannelMessage(channelId, type, message)": {
        "prefix": "sendChannelMessage(channelId, type, message)",
        "body": [
            "sendChannelMessage(channelId, type, message)"
        ]
    },
    "sendGuildChannelMessage(guildId, type, message)": {
        "prefix": "sendGuildChannelMessage(guildId, type, message)",
        "body": [
            "sendGuildChannelMessage(guildId, type, message)"
        ]
    },
    "setCombatArea(combat, area)": {
        "prefix": "setCombatArea(combat, area)",
        "body": [
            "setCombatArea(combat, area)"
        ]
    },
    "setCombatCallBack(combat, key, function_name)": {
        "prefix": "setCombatCallBack(combat, key, function_name)",
        "body": [
            "setCombatCallBack(combat, key, function_name)"
        ]
    },
    "setCombatCondition(combat, condition)": {
        "prefix": "setCombatCondition(combat, condition)",
        "body": [
            "setCombatCondition(combat, condition)"
        ]
    },
    "setCombatFormula(combat, type, mina, minb, maxa, maxb)": {
        "prefix": "setCombatFormula(combat, type, mina, minb, maxa, maxb)",
        "body": [
            "setCombatFormula(combat, type, mina, minb, maxa, maxb)"
        ]
    },
    "setCombatParam(combat, key, value)": {
        "prefix": "setCombatParam(combat, key, value)",
        "body": [
            "setCombatParam(combat, key, value)"
        ]
    },
    "setConditionFormula(combat, mina, minb, maxa, maxb)": {
        "prefix": "setConditionFormula(combat, mina, minb, maxa, maxb)",
        "body": [
            "setConditionFormula(combat, mina, minb, maxa, maxb)"
        ]
    },
    "setConditionParam(condition, key, value)": {
        "prefix": "setConditionParam(condition, key, value)",
        "body": [
            "setConditionParam(condition, key, value)"
        ]
    },
    "setGlobalStorageValue(key, value)": {
        "prefix": "setGlobalStorageValue(key, value)",
        "body": [
            "setGlobalStorageValue(key, value)"
        ]
    },
    "setHouseAccessList(id, listId, listText)": {
        "prefix": "setHouseAccessList(id, listId, listText)",
        "body": [
            "setHouseAccessList(id, listId, listText)"
        ]
    },
    "setHouseOwner(id, guid)": {
        "prefix": "setHouseOwner(id, guid)",
        "body": [
            "setHouseOwner(id, guid)"
        ]
    },
    "setPlayerGroupId(cid, groupId)": {
        "prefix": "setPlayerGroupId(cid, groupId)",
        "body": [
            "setPlayerGroupId(cid, groupId)"
        ]
    },
    "setPlayerStorageValue(cid, key, value)": {
        "prefix": "setPlayerStorageValue(cid, key, value)",
        "body": [
            "setPlayerStorageValue(cid, key, value)"
        ]
    },
    "stopEvent(eventid)": {
        "prefix": "stopEvent(eventid)",
        "body": [
            "stopEvent(eventid)"
        ]
    },
    "string.split(str, sep)": {
        "prefix": "string.split(str, sep)",
        "body": [
            "string.split(str, sep)"
        ]
    },
    "stringToVariant(string)": {
        "prefix": "stringToVariant(string)",
        "body": [
            "stringToVariant(string)"
        ]
    },
    "targetPositionToVariant(pos)": {
        "prefix": "targetPositionToVariant(pos)",
        "body": [
            "targetPositionToVariant(pos)"
        ]
    },
    "unregisterCreatureEvent(cid, name)": {
        "prefix": "unregisterCreatureEvent(cid, name)",
        "body": [
            "unregisterCreatureEvent(cid, name)"
        ]
    },
    "variantToNumber(var)": {
        "prefix": "variantToNumber(var)",
        "body": [
            "variantToNumber(var)"
        ]
    },
    "variantToPosition(var)": {
        "prefix": "variantToPosition(var)",
        "body": [
            "variantToPosition(var)"
        ]
    },
    "variantToString(var)": {
        "prefix": "variantToString(var)",
        "body": [
            "variantToString(var)"
        ]
    },
    "ACCOUNT_TYPE_NORMAL": {
        "prefix": "ACCOUNT_TYPE_NORMAL",
        "body": [
            "ACCOUNT_TYPE_NORMAL"
        ]
    },
    "ACCOUNT_TYPE_TUTOR": {
        "prefix": "ACCOUNT_TYPE_TUTOR",
        "body": [
            "ACCOUNT_TYPE_TUTOR"
        ]
    },
    "ACCOUNT_TYPE_SENIORTUTOR": {
        "prefix": "ACCOUNT_TYPE_SENIORTUTOR",
        "body": [
            "ACCOUNT_TYPE_SENIORTUTOR"
        ]
    },
    "ACCOUNT_TYPE_GAMEMASTER": {
        "prefix": "ACCOUNT_TYPE_GAMEMASTER",
        "body": [
            "ACCOUNT_TYPE_GAMEMASTER"
        ]
    },
    "ACCOUNT_TYPE_GOD": {
        "prefix": "ACCOUNT_TYPE_GOD",
        "body": [
            "ACCOUNT_TYPE_GOD"
        ]
    },
    "CALLBACK_PARAM_LEVELMAGICVALUE": {
        "prefix": "CALLBACK_PARAM_LEVELMAGICVALUE",
        "body": [
            "CALLBACK_PARAM_LEVELMAGICVALUE"
        ]
    },
    "CALLBACK_PARAM_SKILLVALUE": {
        "prefix": "CALLBACK_PARAM_SKILLVALUE",
        "body": [
            "CALLBACK_PARAM_SKILLVALUE"
        ]
    },
    "CALLBACK_PARAM_TARGETTILE": {
        "prefix": "CALLBACK_PARAM_TARGETTILE",
        "body": [
            "CALLBACK_PARAM_TARGETTILE"
        ]
    },
    "CALLBACK_PARAM_TARGETCREATURE": {
        "prefix": "CALLBACK_PARAM_TARGETCREATURE",
        "body": [
            "CALLBACK_PARAM_TARGETCREATURE"
        ]
    },
    "CALLBACK_PARAM_CHAINVALUE": {
        "prefix": "CALLBACK_PARAM_CHAINVALUE",
        "body": [
            "CALLBACK_PARAM_CHAINVALUE"
        ]
    },
    "CALLBACK_PARAM_CHAINPICKER": {
        "prefix": "CALLBACK_PARAM_CHAINPICKER",
        "body": [
            "CALLBACK_PARAM_CHAINPICKER"
        ]
    },
    "COMBAT_FORMULA_UNDEFINED": {
        "prefix": "COMBAT_FORMULA_UNDEFINED",
        "body": [
            "COMBAT_FORMULA_UNDEFINED"
        ]
    },
    "COMBAT_FORMULA_LEVELMAGIC": {
        "prefix": "COMBAT_FORMULA_LEVELMAGIC",
        "body": [
            "COMBAT_FORMULA_LEVELMAGIC"
        ]
    },
    "COMBAT_FORMULA_SKILL": {
        "prefix": "COMBAT_FORMULA_SKILL",
        "body": [
            "COMBAT_FORMULA_SKILL"
        ]
    },
    "COMBAT_FORMULA_DAMAGE": {
        "prefix": "COMBAT_FORMULA_DAMAGE",
        "body": [
            "COMBAT_FORMULA_DAMAGE"
        ]
    },
    "NORTH": {
        "prefix": "NORTH",
        "body": [
            "NORTH"
        ]
    },
    "EAST": {
        "prefix": "EAST",
        "body": [
            "EAST"
        ]
    },
    "SOUTH": {
        "prefix": "SOUTH",
        "body": [
            "SOUTH"
        ]
    },
    "WEST": {
        "prefix": "WEST",
        "body": [
            "WEST"
        ]
    },
    "SOUTHWEST": {
        "prefix": "SOUTHWEST",
        "body": [
            "SOUTHWEST"
        ]
    },
    "SOUTHEAST": {
        "prefix": "SOUTHEAST",
        "body": [
            "SOUTHEAST"
        ]
    },
    "NORTHWEST": {
        "prefix": "NORTHWEST",
        "body": [
            "NORTHWEST"
        ]
    },
    "NORTHEAST": {
        "prefix": "NORTHEAST",
        "body": [
            "NORTHEAST"
        ]
    },
    "COMBAT_NONE": {
        "prefix": "COMBAT_NONE",
        "body": [
            "COMBAT_NONE"
        ]
    },
    "COMBAT_PHYSICALDAMAGE": {
        "prefix": "COMBAT_PHYSICALDAMAGE",
        "body": [
            "COMBAT_PHYSICALDAMAGE"
        ]
    },
    "COMBAT_ENERGYDAMAGE": {
        "prefix": "COMBAT_ENERGYDAMAGE",
        "body": [
            "COMBAT_ENERGYDAMAGE"
        ]
    },
    "COMBAT_EARTHDAMAGE": {
        "prefix": "COMBAT_EARTHDAMAGE",
        "body": [
            "COMBAT_EARTHDAMAGE"
        ]
    },
    "COMBAT_FIREDAMAGE": {
        "prefix": "COMBAT_FIREDAMAGE",
        "body": [
            "COMBAT_FIREDAMAGE"
        ]
    },
    "COMBAT_UNDEFINEDDAMAGE": {
        "prefix": "COMBAT_UNDEFINEDDAMAGE",
        "body": [
            "COMBAT_UNDEFINEDDAMAGE"
        ]
    },
    "COMBAT_LIFEDRAIN": {
        "prefix": "COMBAT_LIFEDRAIN",
        "body": [
            "COMBAT_LIFEDRAIN"
        ]
    },
    "COMBAT_MANADRAIN": {
        "prefix": "COMBAT_MANADRAIN",
        "body": [
            "COMBAT_MANADRAIN"
        ]
    },
    "COMBAT_HEALING": {
        "prefix": "COMBAT_HEALING",
        "body": [
            "COMBAT_HEALING"
        ]
    },
    "COMBAT_DROWNDAMAGE": {
        "prefix": "COMBAT_DROWNDAMAGE",
        "body": [
            "COMBAT_DROWNDAMAGE"
        ]
    },
    "COMBAT_ICEDAMAGE": {
        "prefix": "COMBAT_ICEDAMAGE",
        "body": [
            "COMBAT_ICEDAMAGE"
        ]
    },
    "COMBAT_HOLYDAMAGE": {
        "prefix": "COMBAT_HOLYDAMAGE",
        "body": [
            "COMBAT_HOLYDAMAGE"
        ]
    },
    "COMBAT_DEATHDAMAGE": {
        "prefix": "COMBAT_DEATHDAMAGE",
        "body": [
            "COMBAT_DEATHDAMAGE"
        ]
    },
    "COMBAT_AGONYDAMAGE": {
        "prefix": "COMBAT_AGONYDAMAGE",
        "body": [
            "COMBAT_AGONYDAMAGE"
        ]
    },
    "COMBAT_NEUTRALDAMAGE": {
        "prefix": "COMBAT_NEUTRALDAMAGE",
        "body": [
            "COMBAT_NEUTRALDAMAGE"
        ]
    },
    "COMBAT_PARAM_TYPE": {
        "prefix": "COMBAT_PARAM_TYPE",
        "body": [
            "COMBAT_PARAM_TYPE"
        ]
    },
    "COMBAT_PARAM_EFFECT": {
        "prefix": "COMBAT_PARAM_EFFECT",
        "body": [
            "COMBAT_PARAM_EFFECT"
        ]
    },
    "COMBAT_PARAM_DISTANCEEFFECT": {
        "prefix": "COMBAT_PARAM_DISTANCEEFFECT",
        "body": [
            "COMBAT_PARAM_DISTANCEEFFECT"
        ]
    },
    "COMBAT_PARAM_BLOCKSHIELD": {
        "prefix": "COMBAT_PARAM_BLOCKSHIELD",
        "body": [
            "COMBAT_PARAM_BLOCKSHIELD"
        ]
    },
    "COMBAT_PARAM_BLOCKARMOR": {
        "prefix": "COMBAT_PARAM_BLOCKARMOR",
        "body": [
            "COMBAT_PARAM_BLOCKARMOR"
        ]
    },
    "COMBAT_PARAM_TARGETCASTERORTOPMOST": {
        "prefix": "COMBAT_PARAM_TARGETCASTERORTOPMOST",
        "body": [
            "COMBAT_PARAM_TARGETCASTERORTOPMOST"
        ]
    },
    "COMBAT_PARAM_CREATEITEM": {
        "prefix": "COMBAT_PARAM_CREATEITEM",
        "body": [
            "COMBAT_PARAM_CREATEITEM"
        ]
    },
    "COMBAT_PARAM_AGGRESSIVE": {
        "prefix": "COMBAT_PARAM_AGGRESSIVE",
        "body": [
            "COMBAT_PARAM_AGGRESSIVE"
        ]
    },
    "COMBAT_PARAM_DISPEL": {
        "prefix": "COMBAT_PARAM_DISPEL",
        "body": [
            "COMBAT_PARAM_DISPEL"
        ]
    },
    "COMBAT_PARAM_USECHARGES": {
        "prefix": "COMBAT_PARAM_USECHARGES",
        "body": [
            "COMBAT_PARAM_USECHARGES"
        ]
    },
    "COMBAT_PARAM_CASTSOUND": {
        "prefix": "COMBAT_PARAM_CASTSOUND",
        "body": [
            "COMBAT_PARAM_CASTSOUND"
        ]
    },
    "COMBAT_PARAM_IMPACTSOUND": {
        "prefix": "COMBAT_PARAM_IMPACTSOUND",
        "body": [
            "COMBAT_PARAM_IMPACTSOUND"
        ]
    },
    "COMBAT_PARAM_CHAIN_EFFECT": {
        "prefix": "COMBAT_PARAM_CHAIN_EFFECT",
        "body": [
            "COMBAT_PARAM_CHAIN_EFFECT"
        ]
    },
    "CONDITION_NONE": {
        "prefix": "CONDITION_NONE",
        "body": [
            "CONDITION_NONE"
        ]
    },
    "CONDITION_POISON": {
        "prefix": "CONDITION_POISON",
        "body": [
            "CONDITION_POISON"
        ]
    },
    "CONDITION_FIRE": {
        "prefix": "CONDITION_FIRE",
        "body": [
            "CONDITION_FIRE"
        ]
    },
    "CONDITION_ENERGY": {
        "prefix": "CONDITION_ENERGY",
        "body": [
            "CONDITION_ENERGY"
        ]
    },
    "CONDITION_BLEEDING": {
        "prefix": "CONDITION_BLEEDING",
        "body": [
            "CONDITION_BLEEDING"
        ]
    },
    "CONDITION_HASTE": {
        "prefix": "CONDITION_HASTE",
        "body": [
            "CONDITION_HASTE"
        ]
    },
    "CONDITION_PARALYZE": {
        "prefix": "CONDITION_PARALYZE",
        "body": [
            "CONDITION_PARALYZE"
        ]
    },
    "CONDITION_OUTFIT": {
        "prefix": "CONDITION_OUTFIT",
        "body": [
            "CONDITION_OUTFIT"
        ]
    },
    "CONDITION_INVISIBLE": {
        "prefix": "CONDITION_INVISIBLE",
        "body": [
            "CONDITION_INVISIBLE"
        ]
    },
    "CONDITION_LIGHT": {
        "prefix": "CONDITION_LIGHT",
        "body": [
            "CONDITION_LIGHT"
        ]
    },
    "CONDITION_MANASHIELD": {
        "prefix": "CONDITION_MANASHIELD",
        "body": [
            "CONDITION_MANASHIELD"
        ]
    },
    "CONDITION_INFIGHT": {
        "prefix": "CONDITION_INFIGHT",
        "body": [
            "CONDITION_INFIGHT"
        ]
    },
    "CONDITION_DRUNK": {
        "prefix": "CONDITION_DRUNK",
        "body": [
            "CONDITION_DRUNK"
        ]
    },
    "CONDITION_EXHAUST": {
        "prefix": "CONDITION_EXHAUST",
        "body": [
            "CONDITION_EXHAUST"
        ]
    },
    "CONDITION_REGENERATION": {
        "prefix": "CONDITION_REGENERATION",
        "body": [
            "CONDITION_REGENERATION"
        ]
    },
    "CONDITION_SOUL": {
        "prefix": "CONDITION_SOUL",
        "body": [
            "CONDITION_SOUL"
        ]
    },
    "CONDITION_DROWN": {
        "prefix": "CONDITION_DROWN",
        "body": [
            "CONDITION_DROWN"
        ]
    },
    "CONDITION_MUTED": {
        "prefix": "CONDITION_MUTED",
        "body": [
            "CONDITION_MUTED"
        ]
    },
    "CONDITION_CHANNELMUTEDTICKS": {
        "prefix": "CONDITION_CHANNELMUTEDTICKS",
        "body": [
            "CONDITION_CHANNELMUTEDTICKS"
        ]
    },
    "CONDITION_YELLTICKS": {
        "prefix": "CONDITION_YELLTICKS",
        "body": [
            "CONDITION_YELLTICKS"
        ]
    },
    "CONDITION_ATTRIBUTES": {
        "prefix": "CONDITION_ATTRIBUTES",
        "body": [
            "CONDITION_ATTRIBUTES"
        ]
    },
    "CONDITION_FREEZING": {
        "prefix": "CONDITION_FREEZING",
        "body": [
            "CONDITION_FREEZING"
        ]
    },
    "CONDITION_DAZZLED": {
        "prefix": "CONDITION_DAZZLED",
        "body": [
            "CONDITION_DAZZLED"
        ]
    },
    "CONDITION_CURSED": {
        "prefix": "CONDITION_CURSED",
        "body": [
            "CONDITION_CURSED"
        ]
    },
    "CONDITION_EXHAUST_COMBAT": {
        "prefix": "CONDITION_EXHAUST_COMBAT",
        "body": [
            "CONDITION_EXHAUST_COMBAT"
        ]
    },
    "CONDITION_EXHAUST_HEAL": {
        "prefix": "CONDITION_EXHAUST_HEAL",
        "body": [
            "CONDITION_EXHAUST_HEAL"
        ]
    },
    "CONDITION_PACIFIED": {
        "prefix": "CONDITION_PACIFIED",
        "body": [
            "CONDITION_PACIFIED"
        ]
    },
    "CONDITION_SPELLCOOLDOWN": {
        "prefix": "CONDITION_SPELLCOOLDOWN",
        "body": [
            "CONDITION_SPELLCOOLDOWN"
        ]
    },
    "CONDITION_SPELLGROUPCOOLDOWN": {
        "prefix": "CONDITION_SPELLGROUPCOOLDOWN",
        "body": [
            "CONDITION_SPELLGROUPCOOLDOWN"
        ]
    },
    "CONDITION_ROOTED": {
        "prefix": "CONDITION_ROOTED",
        "body": [
            "CONDITION_ROOTED"
        ]
    },
    "CONDITION_FEARED": {
        "prefix": "CONDITION_FEARED",
        "body": [
            "CONDITION_FEARED"
        ]
    },
    "CONDITION_LESSERHEX": {
        "prefix": "CONDITION_LESSERHEX",
        "body": [
            "CONDITION_LESSERHEX"
        ]
    },
    "CONDITION_INTENSEHEX": {
        "prefix": "CONDITION_INTENSEHEX",
        "body": [
            "CONDITION_INTENSEHEX"
        ]
    },
    "CONDITION_GREATERHEX": {
        "prefix": "CONDITION_GREATERHEX",
        "body": [
            "CONDITION_GREATERHEX"
        ]
    },
    "CONDITION_BAKRAGORE": {
        "prefix": "CONDITION_BAKRAGORE",
        "body": [
            "CONDITION_BAKRAGORE"
        ]
    },
    "CONDITION_GOSHNARTAINT": {
        "prefix": "CONDITION_GOSHNARTAINT",
        "body": [
            "CONDITION_GOSHNARTAINT"
        ]
    },
    "CONDITIONID_DEFAULT": {
        "prefix": "CONDITIONID_DEFAULT",
        "body": [
            "CONDITIONID_DEFAULT"
        ]
    },
    "CONDITIONID_COMBAT": {
        "prefix": "CONDITIONID_COMBAT",
        "body": [
            "CONDITIONID_COMBAT"
        ]
    },
    "CONDITIONID_HEAD": {
        "prefix": "CONDITIONID_HEAD",
        "body": [
            "CONDITIONID_HEAD"
        ]
    },
    "CONDITIONID_NECKLACE": {
        "prefix": "CONDITIONID_NECKLACE",
        "body": [
            "CONDITIONID_NECKLACE"
        ]
    },
    "CONDITIONID_BACKPACK": {
        "prefix": "CONDITIONID_BACKPACK",
        "body": [
            "CONDITIONID_BACKPACK"
        ]
    },
    "CONDITIONID_ARMOR": {
        "prefix": "CONDITIONID_ARMOR",
        "body": [
            "CONDITIONID_ARMOR"
        ]
    },
    "CONDITIONID_RIGHT": {
        "prefix": "CONDITIONID_RIGHT",
        "body": [
            "CONDITIONID_RIGHT"
        ]
    },
    "CONDITIONID_LEFT": {
        "prefix": "CONDITIONID_LEFT",
        "body": [
            "CONDITIONID_LEFT"
        ]
    },
    "CONDITIONID_LEGS": {
        "prefix": "CONDITIONID_LEGS",
        "body": [
            "CONDITIONID_LEGS"
        ]
    },
    "CONDITIONID_FEET": {
        "prefix": "CONDITIONID_FEET",
        "body": [
            "CONDITIONID_FEET"
        ]
    },
    "CONDITIONID_RING": {
        "prefix": "CONDITIONID_RING",
        "body": [
            "CONDITIONID_RING"
        ]
    },
    "CONDITIONID_AMMO": {
        "prefix": "CONDITIONID_AMMO",
        "body": [
            "CONDITIONID_AMMO"
        ]
    },
    "CONDITION_PARAM_OWNER": {
        "prefix": "CONDITION_PARAM_OWNER",
        "body": [
            "CONDITION_PARAM_OWNER"
        ]
    },
    "CONDITION_PARAM_TICKS": {
        "prefix": "CONDITION_PARAM_TICKS",
        "body": [
            "CONDITION_PARAM_TICKS"
        ]
    },
    "CONDITION_PARAM_HEALTHGAIN": {
        "prefix": "CONDITION_PARAM_HEALTHGAIN",
        "body": [
            "CONDITION_PARAM_HEALTHGAIN"
        ]
    },
    "CONDITION_PARAM_HEALTHTICKS": {
        "prefix": "CONDITION_PARAM_HEALTHTICKS",
        "body": [
            "CONDITION_PARAM_HEALTHTICKS"
        ]
    },
    "CONDITION_PARAM_MANAGAIN": {
        "prefix": "CONDITION_PARAM_MANAGAIN",
        "body": [
            "CONDITION_PARAM_MANAGAIN"
        ]
    },
    "CONDITION_PARAM_MANATICKS": {
        "prefix": "CONDITION_PARAM_MANATICKS",
        "body": [
            "CONDITION_PARAM_MANATICKS"
        ]
    },
    "CONDITION_PARAM_DELAYED": {
        "prefix": "CONDITION_PARAM_DELAYED",
        "body": [
            "CONDITION_PARAM_DELAYED"
        ]
    },
    "CONDITION_PARAM_SPEED": {
        "prefix": "CONDITION_PARAM_SPEED",
        "body": [
            "CONDITION_PARAM_SPEED"
        ]
    },
    "CONDITION_PARAM_LIGHT_LEVEL": {
        "prefix": "CONDITION_PARAM_LIGHT_LEVEL",
        "body": [
            "CONDITION_PARAM_LIGHT_LEVEL"
        ]
    },
    "CONDITION_PARAM_LIGHT_COLOR": {
        "prefix": "CONDITION_PARAM_LIGHT_COLOR",
        "body": [
            "CONDITION_PARAM_LIGHT_COLOR"
        ]
    },
    "CONDITION_PARAM_SOULGAIN": {
        "prefix": "CONDITION_PARAM_SOULGAIN",
        "body": [
            "CONDITION_PARAM_SOULGAIN"
        ]
    },
    "CONDITION_PARAM_SOULTICKS": {
        "prefix": "CONDITION_PARAM_SOULTICKS",
        "body": [
            "CONDITION_PARAM_SOULTICKS"
        ]
    },
    "CONDITION_PARAM_MINVALUE": {
        "prefix": "CONDITION_PARAM_MINVALUE",
        "body": [
            "CONDITION_PARAM_MINVALUE"
        ]
    },
    "CONDITION_PARAM_MAXVALUE": {
        "prefix": "CONDITION_PARAM_MAXVALUE",
        "body": [
            "CONDITION_PARAM_MAXVALUE"
        ]
    },
    "CONDITION_PARAM_STARTVALUE": {
        "prefix": "CONDITION_PARAM_STARTVALUE",
        "body": [
            "CONDITION_PARAM_STARTVALUE"
        ]
    },
    "CONDITION_PARAM_TICKINTERVAL": {
        "prefix": "CONDITION_PARAM_TICKINTERVAL",
        "body": [
            "CONDITION_PARAM_TICKINTERVAL"
        ]
    },
    "CONDITION_PARAM_FORCEUPDATE": {
        "prefix": "CONDITION_PARAM_FORCEUPDATE",
        "body": [
            "CONDITION_PARAM_FORCEUPDATE"
        ]
    },
    "CONDITION_PARAM_SKILL_MELEE": {
        "prefix": "CONDITION_PARAM_SKILL_MELEE",
        "body": [
            "CONDITION_PARAM_SKILL_MELEE"
        ]
    },
    "CONDITION_PARAM_SKILL_FIST": {
        "prefix": "CONDITION_PARAM_SKILL_FIST",
        "body": [
            "CONDITION_PARAM_SKILL_FIST"
        ]
    },
    "CONDITION_PARAM_SKILL_CLUB": {
        "prefix": "CONDITION_PARAM_SKILL_CLUB",
        "body": [
            "CONDITION_PARAM_SKILL_CLUB"
        ]
    },
    "CONDITION_PARAM_SKILL_SWORD": {
        "prefix": "CONDITION_PARAM_SKILL_SWORD",
        "body": [
            "CONDITION_PARAM_SKILL_SWORD"
        ]
    },
    "CONDITION_PARAM_SKILL_AXE": {
        "prefix": "CONDITION_PARAM_SKILL_AXE",
        "body": [
            "CONDITION_PARAM_SKILL_AXE"
        ]
    },
    "CONDITION_PARAM_SKILL_DISTANCE": {
        "prefix": "CONDITION_PARAM_SKILL_DISTANCE",
        "body": [
            "CONDITION_PARAM_SKILL_DISTANCE"
        ]
    },
    "CONDITION_PARAM_SKILL_SHIELD": {
        "prefix": "CONDITION_PARAM_SKILL_SHIELD",
        "body": [
            "CONDITION_PARAM_SKILL_SHIELD"
        ]
    },
    "CONDITION_PARAM_SKILL_FISHING": {
        "prefix": "CONDITION_PARAM_SKILL_FISHING",
        "body": [
            "CONDITION_PARAM_SKILL_FISHING"
        ]
    },
    "CONDITION_PARAM_STAT_MAXHITPOINTS": {
        "prefix": "CONDITION_PARAM_STAT_MAXHITPOINTS",
        "body": [
            "CONDITION_PARAM_STAT_MAXHITPOINTS"
        ]
    },
    "CONDITION_PARAM_STAT_MAXMANAPOINTS": {
        "prefix": "CONDITION_PARAM_STAT_MAXMANAPOINTS",
        "body": [
            "CONDITION_PARAM_STAT_MAXMANAPOINTS"
        ]
    },
    "CONDITION_PARAM_STAT_MAGICPOINTS": {
        "prefix": "CONDITION_PARAM_STAT_MAGICPOINTS",
        "body": [
            "CONDITION_PARAM_STAT_MAGICPOINTS"
        ]
    },
    "CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT": {
        "prefix": "CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT",
        "body": [
            "CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT"
        ]
    },
    "CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT": {
        "prefix": "CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT",
        "body": [
            "CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT"
        ]
    },
    "CONDITION_PARAM_STAT_MAGICPOINTSPERCENT": {
        "prefix": "CONDITION_PARAM_STAT_MAGICPOINTSPERCENT",
        "body": [
            "CONDITION_PARAM_STAT_MAGICPOINTSPERCENT"
        ]
    },
    "CONDITION_PARAM_PERIODICDAMAGE": {
        "prefix": "CONDITION_PARAM_PERIODICDAMAGE",
        "body": [
            "CONDITION_PARAM_PERIODICDAMAGE"
        ]
    },
    "CONDITION_PARAM_SKILL_MELEEPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_MELEEPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_MELEEPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_FISTPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_FISTPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_FISTPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_CLUBPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_CLUBPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_CLUBPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_SWORDPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_SWORDPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_SWORDPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_AXEPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_AXEPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_AXEPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_DISTANCEPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_DISTANCEPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_DISTANCEPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_SHIELDPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_SHIELDPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_SHIELDPERCENT"
        ]
    },
    "CONDITION_PARAM_SKILL_FISHINGPERCENT": {
        "prefix": "CONDITION_PARAM_SKILL_FISHINGPERCENT",
        "body": [
            "CONDITION_PARAM_SKILL_FISHINGPERCENT"
        ]
    },
    "CONDITION_PARAM_BUFF_SPELL": {
        "prefix": "CONDITION_PARAM_BUFF_SPELL",
        "body": [
            "CONDITION_PARAM_BUFF_SPELL"
        ]
    },
    "CONDITION_PARAM_SUBID": {
        "prefix": "CONDITION_PARAM_SUBID",
        "body": [
            "CONDITION_PARAM_SUBID"
        ]
    },
    "CONDITION_PARAM_FIELD": {
        "prefix": "CONDITION_PARAM_FIELD",
        "body": [
            "CONDITION_PARAM_FIELD"
        ]
    },
    "CONDITION_PARAM_SKILL_CRITICAL_HIT_CHANCE": {
        "prefix": "CONDITION_PARAM_SKILL_CRITICAL_HIT_CHANCE",
        "body": [
            "CONDITION_PARAM_SKILL_CRITICAL_HIT_CHANCE"
        ]
    },
    "CONDITION_PARAM_SKILL_CRITICAL_HIT_DAMAGE": {
        "prefix": "CONDITION_PARAM_SKILL_CRITICAL_HIT_DAMAGE",
        "body": [
            "CONDITION_PARAM_SKILL_CRITICAL_HIT_DAMAGE"
        ]
    },
    "CONDITION_PARAM_SKILL_LIFE_LEECH_CHANCE": {
        "prefix": "CONDITION_PARAM_SKILL_LIFE_LEECH_CHANCE",
        "body": [
            "CONDITION_PARAM_SKILL_LIFE_LEECH_CHANCE"
        ]
    },
    "CONDITION_PARAM_SKILL_LIFE_LEECH_AMOUNT": {
        "prefix": "CONDITION_PARAM_SKILL_LIFE_LEECH_AMOUNT",
        "body": [
            "CONDITION_PARAM_SKILL_LIFE_LEECH_AMOUNT"
        ]
    },
    "CONDITION_PARAM_SKILL_MANA_LEECH_CHANCE": {
        "prefix": "CONDITION_PARAM_SKILL_MANA_LEECH_CHANCE",
        "body": [
            "CONDITION_PARAM_SKILL_MANA_LEECH_CHANCE"
        ]
    },
    "CONDITION_PARAM_SKILL_MANA_LEECH_AMOUNT": {
        "prefix": "CONDITION_PARAM_SKILL_MANA_LEECH_AMOUNT",
        "body": [
            "CONDITION_PARAM_SKILL_MANA_LEECH_AMOUNT"
        ]
    },
    "CONDITION_PARAM_DISABLE_DEFENSE": {
        "prefix": "CONDITION_PARAM_DISABLE_DEFENSE",
        "body": [
            "CONDITION_PARAM_DISABLE_DEFENSE"
        ]
    },
    "CONDITION_PARAM_STAT_CAPACITYPERCENT": {
        "prefix": "CONDITION_PARAM_STAT_CAPACITYPERCENT",
        "body": [
            "CONDITION_PARAM_STAT_CAPACITYPERCENT"
        ]
    },
    "CONDITION_PARAM_MANASHIELD": {
        "prefix": "CONDITION_PARAM_MANASHIELD",
        "body": [
            "CONDITION_PARAM_MANASHIELD"
        ]
    },
    "CONDITION_PARAM_BUFF_DAMAGEDEALT": {
        "prefix": "CONDITION_PARAM_BUFF_DAMAGEDEALT",
        "body": [
            "CONDITION_PARAM_BUFF_DAMAGEDEALT"
        ]
    },
    "CONDITION_PARAM_BUFF_DAMAGERECEIVED": {
        "prefix": "CONDITION_PARAM_BUFF_DAMAGERECEIVED",
        "body": [
            "CONDITION_PARAM_BUFF_DAMAGERECEIVED"
        ]
    },
    "CONDITION_PARAM_SOUND_TICK": {
        "prefix": "CONDITION_PARAM_SOUND_TICK",
        "body": [
            "CONDITION_PARAM_SOUND_TICK"
        ]
    },
    "CONDITION_PARAM_SOUND_ADD": {
        "prefix": "CONDITION_PARAM_SOUND_ADD",
        "body": [
            "CONDITION_PARAM_SOUND_ADD"
        ]
    },
    "CONDITION_PARAM_CASTER_POSITION": {
        "prefix": "CONDITION_PARAM_CASTER_POSITION",
        "body": [
            "CONDITION_PARAM_CASTER_POSITION"
        ]
    },
    "CONDITION_PARAM_DRAIN_BODY": {
        "prefix": "CONDITION_PARAM_DRAIN_BODY",
        "body": [
            "CONDITION_PARAM_DRAIN_BODY"
        ]
    },
    "CONDITION_PARAM_ABSORB_PHYSICALPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_PHYSICALPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_PHYSICALPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_FIREPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_FIREPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_FIREPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_ENERGYPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_ENERGYPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_ENERGYPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_ICEPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_ICEPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_ICEPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_EARTHPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_EARTHPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_EARTHPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_DEATHPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_DEATHPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_DEATHPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_HOLYPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_HOLYPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_HOLYPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_LIFEDRAINPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_LIFEDRAINPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_LIFEDRAINPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_MANADRAINPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_MANADRAINPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_MANADRAINPERCENT"
        ]
    },
    "CONDITION_PARAM_ABSORB_DROWNPERCENT": {
        "prefix": "CONDITION_PARAM_ABSORB_DROWNPERCENT",
        "body": [
            "CONDITION_PARAM_ABSORB_DROWNPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_PHYSICALPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_PHYSICALPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_PHYSICALPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_FIREPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_FIREPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_FIREPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_ENERGYPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_ENERGYPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_ENERGYPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_ICEPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_ICEPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_ICEPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_EARTHPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_EARTHPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_EARTHPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_DEATHPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_DEATHPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_DEATHPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_HOLYPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_HOLYPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_HOLYPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_LIFEDRAINPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_LIFEDRAINPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_LIFEDRAINPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_MANADRAINPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_MANADRAINPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_MANADRAINPERCENT"
        ]
    },
    "CONDITION_PARAM_INCREASE_DROWNPERCENT": {
        "prefix": "CONDITION_PARAM_INCREASE_DROWNPERCENT",
        "body": [
            "CONDITION_PARAM_INCREASE_DROWNPERCENT"
        ]
    },
    "CONDITION_PARAM_CHARM_CHANCE_MODIFIER": {
        "prefix": "CONDITION_PARAM_CHARM_CHANCE_MODIFIER",
        "body": [
            "CONDITION_PARAM_CHARM_CHANCE_MODIFIER"
        ]
    },
    "CONST_ME_NONE": {
        "prefix": "CONST_ME_NONE",
        "body": [
            "CONST_ME_NONE"
        ]
    },
    "CONST_ME_DRAWBLOOD": {
        "prefix": "CONST_ME_DRAWBLOOD",
        "body": [
            "CONST_ME_DRAWBLOOD"
        ]
    },
    "CONST_ME_LOSEENERGY": {
        "prefix": "CONST_ME_LOSEENERGY",
        "body": [
            "CONST_ME_LOSEENERGY"
        ]
    },
    "CONST_ME_POFF": {
        "prefix": "CONST_ME_POFF",
        "body": [
            "CONST_ME_POFF"
        ]
    },
    "CONST_ME_BLOCKHIT": {
        "prefix": "CONST_ME_BLOCKHIT",
        "body": [
            "CONST_ME_BLOCKHIT"
        ]
    },
    "CONST_ME_EXPLOSIONAREA": {
        "prefix": "CONST_ME_EXPLOSIONAREA",
        "body": [
            "CONST_ME_EXPLOSIONAREA"
        ]
    },
    "CONST_ME_EXPLOSIONHIT": {
        "prefix": "CONST_ME_EXPLOSIONHIT",
        "body": [
            "CONST_ME_EXPLOSIONHIT"
        ]
    },
    "CONST_ME_FIREAREA": {
        "prefix": "CONST_ME_FIREAREA",
        "body": [
            "CONST_ME_FIREAREA"
        ]
    },
    "CONST_ME_YELLOW_RINGS": {
        "prefix": "CONST_ME_YELLOW_RINGS",
        "body": [
            "CONST_ME_YELLOW_RINGS"
        ]
    },
    "CONST_ME_GREEN_RINGS": {
        "prefix": "CONST_ME_GREEN_RINGS",
        "body": [
            "CONST_ME_GREEN_RINGS"
        ]
    },
    "CONST_ME_HITAREA": {
        "prefix": "CONST_ME_HITAREA",
        "body": [
            "CONST_ME_HITAREA"
        ]
    },
    "CONST_ME_TELEPORT": {
        "prefix": "CONST_ME_TELEPORT",
        "body": [
            "CONST_ME_TELEPORT"
        ]
    },
    "CONST_ME_ENERGYHIT": {
        "prefix": "CONST_ME_ENERGYHIT",
        "body": [
            "CONST_ME_ENERGYHIT"
        ]
    },
    "CONST_ME_MAGIC_BLUE": {
        "prefix": "CONST_ME_MAGIC_BLUE",
        "body": [
            "CONST_ME_MAGIC_BLUE"
        ]
    },
    "CONST_ME_MAGIC_RED": {
        "prefix": "CONST_ME_MAGIC_RED",
        "body": [
            "CONST_ME_MAGIC_RED"
        ]
    },
    "CONST_ME_MAGIC_GREEN": {
        "prefix": "CONST_ME_MAGIC_GREEN",
        "body": [
            "CONST_ME_MAGIC_GREEN"
        ]
    },
    "CONST_ME_HITBYFIRE": {
        "prefix": "CONST_ME_HITBYFIRE",
        "body": [
            "CONST_ME_HITBYFIRE"
        ]
    },
    "CONST_ME_HITBYPOISON": {
        "prefix": "CONST_ME_HITBYPOISON",
        "body": [
            "CONST_ME_HITBYPOISON"
        ]
    },
    "CONST_ME_MORTAREA": {
        "prefix": "CONST_ME_MORTAREA",
        "body": [
            "CONST_ME_MORTAREA"
        ]
    },
    "CONST_ME_SOUND_GREEN": {
        "prefix": "CONST_ME_SOUND_GREEN",
        "body": [
            "CONST_ME_SOUND_GREEN"
        ]
    },
    "CONST_ME_SOUND_RED": {
        "prefix": "CONST_ME_SOUND_RED",
        "body": [
            "CONST_ME_SOUND_RED"
        ]
    },
    "CONST_ME_POISONAREA": {
        "prefix": "CONST_ME_POISONAREA",
        "body": [
            "CONST_ME_POISONAREA"
        ]
    },
    "CONST_ME_SOUND_YELLOW": {
        "prefix": "CONST_ME_SOUND_YELLOW",
        "body": [
            "CONST_ME_SOUND_YELLOW"
        ]
    },
    "CONST_ME_SOUND_PURPLE": {
        "prefix": "CONST_ME_SOUND_PURPLE",
        "body": [
            "CONST_ME_SOUND_PURPLE"
        ]
    },
    "CONST_ME_SOUND_BLUE": {
        "prefix": "CONST_ME_SOUND_BLUE",
        "body": [
            "CONST_ME_SOUND_BLUE"
        ]
    },
    "CONST_ME_SOUND_WHITE": {
        "prefix": "CONST_ME_SOUND_WHITE",
        "body": [
            "CONST_ME_SOUND_WHITE"
        ]
    },
    "CONST_ME_BUBBLES": {
        "prefix": "CONST_ME_BUBBLES",
        "body": [
            "CONST_ME_BUBBLES"
        ]
    },
    "CONST_ME_CRAPS": {
        "prefix": "CONST_ME_CRAPS",
        "body": [
            "CONST_ME_CRAPS"
        ]
    },
    "CONST_ME_GIFT_WRAPS": {
        "prefix": "CONST_ME_GIFT_WRAPS",
        "body": [
            "CONST_ME_GIFT_WRAPS"
        ]
    },
    "CONST_ME_FIREWORK_YELLOW": {
        "prefix": "CONST_ME_FIREWORK_YELLOW",
        "body": [
            "CONST_ME_FIREWORK_YELLOW"
        ]
    },
    "CONST_ME_FIREWORK_RED": {
        "prefix": "CONST_ME_FIREWORK_RED",
        "body": [
            "CONST_ME_FIREWORK_RED"
        ]
    },
    "CONST_ME_FIREWORK_BLUE": {
        "prefix": "CONST_ME_FIREWORK_BLUE",
        "body": [
            "CONST_ME_FIREWORK_BLUE"
        ]
    },
    "CONST_ME_STUN": {
        "prefix": "CONST_ME_STUN",
        "body": [
            "CONST_ME_STUN"
        ]
    },
    "CONST_ME_SLEEP": {
        "prefix": "CONST_ME_SLEEP",
        "body": [
            "CONST_ME_SLEEP"
        ]
    },
    "CONST_ME_WATERCREATURE": {
        "prefix": "CONST_ME_WATERCREATURE",
        "body": [
            "CONST_ME_WATERCREATURE"
        ]
    },
    "CONST_ME_GROUNDSHAKER": {
        "prefix": "CONST_ME_GROUNDSHAKER",
        "body": [
            "CONST_ME_GROUNDSHAKER"
        ]
    },
    "CONST_ME_HEARTS": {
        "prefix": "CONST_ME_HEARTS",
        "body": [
            "CONST_ME_HEARTS"
        ]
    },
    "CONST_ME_FIREATTACK": {
        "prefix": "CONST_ME_FIREATTACK",
        "body": [
            "CONST_ME_FIREATTACK"
        ]
    },
    "CONST_ME_ENERGYAREA": {
        "prefix": "CONST_ME_ENERGYAREA",
        "body": [
            "CONST_ME_ENERGYAREA"
        ]
    },
    "CONST_ME_SMALLCLOUDS": {
        "prefix": "CONST_ME_SMALLCLOUDS",
        "body": [
            "CONST_ME_SMALLCLOUDS"
        ]
    },
    "CONST_ME_HOLYDAMAGE": {
        "prefix": "CONST_ME_HOLYDAMAGE",
        "body": [
            "CONST_ME_HOLYDAMAGE"
        ]
    },
    "CONST_ME_BIGCLOUDS": {
        "prefix": "CONST_ME_BIGCLOUDS",
        "body": [
            "CONST_ME_BIGCLOUDS"
        ]
    },
    "CONST_ME_ICEAREA": {
        "prefix": "CONST_ME_ICEAREA",
        "body": [
            "CONST_ME_ICEAREA"
        ]
    },
    "CONST_ME_ICETORNADO": {
        "prefix": "CONST_ME_ICETORNADO",
        "body": [
            "CONST_ME_ICETORNADO"
        ]
    },
    "CONST_ME_ICEATTACK": {
        "prefix": "CONST_ME_ICEATTACK",
        "body": [
            "CONST_ME_ICEATTACK"
        ]
    },
    "CONST_ME_STONES": {
        "prefix": "CONST_ME_STONES",
        "body": [
            "CONST_ME_STONES"
        ]
    },
    "CONST_ME_SMALLPLANTS": {
        "prefix": "CONST_ME_SMALLPLANTS",
        "body": [
            "CONST_ME_SMALLPLANTS"
        ]
    },
    "CONST_ME_CARNIPHILA": {
        "prefix": "CONST_ME_CARNIPHILA",
        "body": [
            "CONST_ME_CARNIPHILA"
        ]
    },
    "CONST_ME_PURPLEENERGY": {
        "prefix": "CONST_ME_PURPLEENERGY",
        "body": [
            "CONST_ME_PURPLEENERGY"
        ]
    },
    "CONST_ME_YELLOWENERGY": {
        "prefix": "CONST_ME_YELLOWENERGY",
        "body": [
            "CONST_ME_YELLOWENERGY"
        ]
    },
    "CONST_ME_HOLYAREA": {
        "prefix": "CONST_ME_HOLYAREA",
        "body": [
            "CONST_ME_HOLYAREA"
        ]
    },
    "CONST_ME_BIGPLANTS": {
        "prefix": "CONST_ME_BIGPLANTS",
        "body": [
            "CONST_ME_BIGPLANTS"
        ]
    },
    "CONST_ME_CAKE": {
        "prefix": "CONST_ME_CAKE",
        "body": [
            "CONST_ME_CAKE"
        ]
    },
    "CONST_ME_GIANTICE": {
        "prefix": "CONST_ME_GIANTICE",
        "body": [
            "CONST_ME_GIANTICE"
        ]
    },
    "CONST_ME_WATERSPLASH": {
        "prefix": "CONST_ME_WATERSPLASH",
        "body": [
            "CONST_ME_WATERSPLASH"
        ]
    },
    "CONST_ME_PLANTATTACK": {
        "prefix": "CONST_ME_PLANTATTACK",
        "body": [
            "CONST_ME_PLANTATTACK"
        ]
    },
    "CONST_ME_TUTORIALARROW": {
        "prefix": "CONST_ME_TUTORIALARROW",
        "body": [
            "CONST_ME_TUTORIALARROW"
        ]
    },
    "CONST_ME_TUTORIALSQUARE": {
        "prefix": "CONST_ME_TUTORIALSQUARE",
        "body": [
            "CONST_ME_TUTORIALSQUARE"
        ]
    },
    "CONST_ME_MIRRORHORIZONTAL": {
        "prefix": "CONST_ME_MIRRORHORIZONTAL",
        "body": [
            "CONST_ME_MIRRORHORIZONTAL"
        ]
    },
    "CONST_ME_MIRRORVERTICAL": {
        "prefix": "CONST_ME_MIRRORVERTICAL",
        "body": [
            "CONST_ME_MIRRORVERTICAL"
        ]
    },
    "CONST_ME_SKULLHORIZONTAL": {
        "prefix": "CONST_ME_SKULLHORIZONTAL",
        "body": [
            "CONST_ME_SKULLHORIZONTAL"
        ]
    },
    "CONST_ME_SKULLVERTICAL": {
        "prefix": "CONST_ME_SKULLVERTICAL",
        "body": [
            "CONST_ME_SKULLVERTICAL"
        ]
    },
    "CONST_ME_ASSASSIN": {
        "prefix": "CONST_ME_ASSASSIN",
        "body": [
            "CONST_ME_ASSASSIN"
        ]
    },
    "CONST_ME_STEPSHORIZONTAL": {
        "prefix": "CONST_ME_STEPSHORIZONTAL",
        "body": [
            "CONST_ME_STEPSHORIZONTAL"
        ]
    },
    "CONST_ME_BLOODYSTEPS": {
        "prefix": "CONST_ME_BLOODYSTEPS",
        "body": [
            "CONST_ME_BLOODYSTEPS"
        ]
    },
    "CONST_ME_STEPSVERTICAL": {
        "prefix": "CONST_ME_STEPSVERTICAL",
        "body": [
            "CONST_ME_STEPSVERTICAL"
        ]
    },
    "CONST_ME_YALAHARIGHOST": {
        "prefix": "CONST_ME_YALAHARIGHOST",
        "body": [
            "CONST_ME_YALAHARIGHOST"
        ]
    },
    "CONST_ME_BATS": {
        "prefix": "CONST_ME_BATS",
        "body": [
            "CONST_ME_BATS"
        ]
    },
    "CONST_ME_SMOKE": {
        "prefix": "CONST_ME_SMOKE",
        "body": [
            "CONST_ME_SMOKE"
        ]
    },
    "CONST_ME_INSECTS": {
        "prefix": "CONST_ME_INSECTS",
        "body": [
            "CONST_ME_INSECTS"
        ]
    },
    "CONST_ME_DRAGONHEAD": {
        "prefix": "CONST_ME_DRAGONHEAD",
        "body": [
            "CONST_ME_DRAGONHEAD"
        ]
    },
    "CONST_ME_ORCSHAMAN": {
        "prefix": "CONST_ME_ORCSHAMAN",
        "body": [
            "CONST_ME_ORCSHAMAN"
        ]
    },
    "CONST_ME_ORCSHAMAN_FIRE": {
        "prefix": "CONST_ME_ORCSHAMAN_FIRE",
        "body": [
            "CONST_ME_ORCSHAMAN_FIRE"
        ]
    },
    "CONST_ME_THUNDER": {
        "prefix": "CONST_ME_THUNDER",
        "body": [
            "CONST_ME_THUNDER"
        ]
    },
    "CONST_ME_FERUMBRAS": {
        "prefix": "CONST_ME_FERUMBRAS",
        "body": [
            "CONST_ME_FERUMBRAS"
        ]
    },
    "CONST_ME_CONFETTI_HORIZONTAL": {
        "prefix": "CONST_ME_CONFETTI_HORIZONTAL",
        "body": [
            "CONST_ME_CONFETTI_HORIZONTAL"
        ]
    },
    "CONST_ME_CONFETTI_VERTICAL": {
        "prefix": "CONST_ME_CONFETTI_VERTICAL",
        "body": [
            "CONST_ME_CONFETTI_VERTICAL"
        ]
    },
    "CONST_ME_BLACKSMOKE": {
        "prefix": "CONST_ME_BLACKSMOKE",
        "body": [
            "CONST_ME_BLACKSMOKE"
        ]
    },
    "CONST_ME_REDSMOKE": {
        "prefix": "CONST_ME_REDSMOKE",
        "body": [
            "CONST_ME_REDSMOKE"
        ]
    },
    "CONST_ME_YELLOWSMOKE": {
        "prefix": "CONST_ME_YELLOWSMOKE",
        "body": [
            "CONST_ME_YELLOWSMOKE"
        ]
    },
    "CONST_ME_GREENSMOKE": {
        "prefix": "CONST_ME_GREENSMOKE",
        "body": [
            "CONST_ME_GREENSMOKE"
        ]
    },
    "CONST_ME_PURPLESMOKE": {
        "prefix": "CONST_ME_PURPLESMOKE",
        "body": [
            "CONST_ME_PURPLESMOKE"
        ]
    },
    "CONST_ME_EARLY_THUNDER": {
        "prefix": "CONST_ME_EARLY_THUNDER",
        "body": [
            "CONST_ME_EARLY_THUNDER"
        ]
    },
    "CONST_ME_RAGIAZ_BONECAPSULE": {
        "prefix": "CONST_ME_RAGIAZ_BONECAPSULE",
        "body": [
            "CONST_ME_RAGIAZ_BONECAPSULE"
        ]
    },
    "CONST_ME_CRITICAL_DAMAGE": {
        "prefix": "CONST_ME_CRITICAL_DAMAGE",
        "body": [
            "CONST_ME_CRITICAL_DAMAGE"
        ]
    },
    "CONST_ME_PLUNGING_FISH": {
        "prefix": "CONST_ME_PLUNGING_FISH",
        "body": [
            "CONST_ME_PLUNGING_FISH"
        ]
    },
    "CONST_ME_BLUE_ENERGY_SPARK": {
        "prefix": "CONST_ME_BLUE_ENERGY_SPARK",
        "body": [
            "CONST_ME_BLUE_ENERGY_SPARK"
        ]
    },
    "CONST_ME_ORANGE_ENERGY_SPARK": {
        "prefix": "CONST_ME_ORANGE_ENERGY_SPARK",
        "body": [
            "CONST_ME_ORANGE_ENERGY_SPARK"
        ]
    },
    "CONST_ME_GREEN_ENERGY_SPARK": {
        "prefix": "CONST_ME_GREEN_ENERGY_SPARK",
        "body": [
            "CONST_ME_GREEN_ENERGY_SPARK"
        ]
    },
    "CONST_ME_PINK_ENERGY_SPARK": {
        "prefix": "CONST_ME_PINK_ENERGY_SPARK",
        "body": [
            "CONST_ME_PINK_ENERGY_SPARK"
        ]
    },
    "CONST_ME_WHITE_ENERGY_SPARK": {
        "prefix": "CONST_ME_WHITE_ENERGY_SPARK",
        "body": [
            "CONST_ME_WHITE_ENERGY_SPARK"
        ]
    },
    "CONST_ME_YELLOW_ENERGY_SPARK": {
        "prefix": "CONST_ME_YELLOW_ENERGY_SPARK",
        "body": [
            "CONST_ME_YELLOW_ENERGY_SPARK"
        ]
    },
    "CONST_ME_MAGIC_POWDER": {
        "prefix": "CONST_ME_MAGIC_POWDER",
        "body": [
            "CONST_ME_MAGIC_POWDER"
        ]
    },
    "CONST_ME_PIXIE_EXPLOSION": {
        "prefix": "CONST_ME_PIXIE_EXPLOSION",
        "body": [
            "CONST_ME_PIXIE_EXPLOSION"
        ]
    },
    "CONST_ME_PIXIE_COMING": {
        "prefix": "CONST_ME_PIXIE_COMING",
        "body": [
            "CONST_ME_PIXIE_COMING"
        ]
    },
    "CONST_ME_PIXIE_GOING": {
        "prefix": "CONST_ME_PIXIE_GOING",
        "body": [
            "CONST_ME_PIXIE_GOING"
        ]
    },
    "CONST_ME_STORM": {
        "prefix": "CONST_ME_STORM",
        "body": [
            "CONST_ME_STORM"
        ]
    },
    "CONST_ME_STONE_STORM": {
        "prefix": "CONST_ME_STONE_STORM",
        "body": [
            "CONST_ME_STONE_STORM"
        ]
    },
    "CONST_ME_BLUE_GHOST": {
        "prefix": "CONST_ME_BLUE_GHOST",
        "body": [
            "CONST_ME_BLUE_GHOST"
        ]
    },
    "CONST_ME_PINK_VORTEX": {
        "prefix": "CONST_ME_PINK_VORTEX",
        "body": [
            "CONST_ME_PINK_VORTEX"
        ]
    },
    "CONST_ME_TREASURE_MAP": {
        "prefix": "CONST_ME_TREASURE_MAP",
        "body": [
            "CONST_ME_TREASURE_MAP"
        ]
    },
    "CONST_ME_PINK_BEAM": {
        "prefix": "CONST_ME_PINK_BEAM",
        "body": [
            "CONST_ME_PINK_BEAM"
        ]
    },
    "CONST_ME_GREEN_FIREWORKS": {
        "prefix": "CONST_ME_GREEN_FIREWORKS",
        "body": [
            "CONST_ME_GREEN_FIREWORKS"
        ]
    },
    "CONST_ME_ORANGE_FIREWORKS": {
        "prefix": "CONST_ME_ORANGE_FIREWORKS",
        "body": [
            "CONST_ME_ORANGE_FIREWORKS"
        ]
    },
    "CONST_ME_PINK_FIREWORKS": {
        "prefix": "CONST_ME_PINK_FIREWORKS",
        "body": [
            "CONST_ME_PINK_FIREWORKS"
        ]
    },
    "CONST_ME_BLUE_FIREWORKS": {
        "prefix": "CONST_ME_BLUE_FIREWORKS",
        "body": [
            "CONST_ME_BLUE_FIREWORKS"
        ]
    },
    "CONST_ME_SUPREME_CUBE": {
        "prefix": "CONST_ME_SUPREME_CUBE",
        "body": [
            "CONST_ME_SUPREME_CUBE"
        ]
    },
    "CONST_ME_BLACK_BLOOD": {
        "prefix": "CONST_ME_BLACK_BLOOD",
        "body": [
            "CONST_ME_BLACK_BLOOD"
        ]
    },
    "CONST_ME_PRISMATIC_SPARK": {
        "prefix": "CONST_ME_PRISMATIC_SPARK",
        "body": [
            "CONST_ME_PRISMATIC_SPARK"
        ]
    },
    "CONST_ME_THAIAN": {
        "prefix": "CONST_ME_THAIAN",
        "body": [
            "CONST_ME_THAIAN"
        ]
    },
    "CONST_ME_THAIAN_GHOST": {
        "prefix": "CONST_ME_THAIAN_GHOST",
        "body": [
            "CONST_ME_THAIAN_GHOST"
        ]
    },
    "CONST_ME_GHOST_SMOKE": {
        "prefix": "CONST_ME_GHOST_SMOKE",
        "body": [
            "CONST_ME_GHOST_SMOKE"
        ]
    },
    "CONST_ME_WATER_BLOCK_FLOATING": {
        "prefix": "CONST_ME_WATER_BLOCK_FLOATING",
        "body": [
            "CONST_ME_WATER_BLOCK_FLOATING"
        ]
    },
    "CONST_ME_WATER_BLOCK": {
        "prefix": "CONST_ME_WATER_BLOCK",
        "body": [
            "CONST_ME_WATER_BLOCK"
        ]
    },
    "CONST_ME_ROOTS": {
        "prefix": "CONST_ME_ROOTS",
        "body": [
            "CONST_ME_ROOTS"
        ]
    },
    "CONST_ME_GHOSTLY_SCRATCH": {
        "prefix": "CONST_ME_GHOSTLY_SCRATCH",
        "body": [
            "CONST_ME_GHOSTLY_SCRATCH"
        ]
    },
    "CONST_ME_GHOSTLY_BITE": {
        "prefix": "CONST_ME_GHOSTLY_BITE",
        "body": [
            "CONST_ME_GHOSTLY_BITE"
        ]
    },
    "CONST_ME_BIG_SCRATCH": {
        "prefix": "CONST_ME_BIG_SCRATCH",
        "body": [
            "CONST_ME_BIG_SCRATCH"
        ]
    },
    "CONST_ME_SLASH": {
        "prefix": "CONST_ME_SLASH",
        "body": [
            "CONST_ME_SLASH"
        ]
    },
    "CONST_ME_BITE": {
        "prefix": "CONST_ME_BITE",
        "body": [
            "CONST_ME_BITE"
        ]
    },
    "CONST_ME_CHIVALRIOUS_CHALLENGE": {
        "prefix": "CONST_ME_CHIVALRIOUS_CHALLENGE",
        "body": [
            "CONST_ME_CHIVALRIOUS_CHALLENGE"
        ]
    },
    "CONST_ME_DIVINE_DAZZLE": {
        "prefix": "CONST_ME_DIVINE_DAZZLE",
        "body": [
            "CONST_ME_DIVINE_DAZZLE"
        ]
    },
    "CONST_ME_ELECTRICALSPARK": {
        "prefix": "CONST_ME_ELECTRICALSPARK",
        "body": [
            "CONST_ME_ELECTRICALSPARK"
        ]
    },
    "CONST_ME_PURPLETELEPORT": {
        "prefix": "CONST_ME_PURPLETELEPORT",
        "body": [
            "CONST_ME_PURPLETELEPORT"
        ]
    },
    "CONST_ME_REDTELEPORT": {
        "prefix": "CONST_ME_REDTELEPORT",
        "body": [
            "CONST_ME_REDTELEPORT"
        ]
    },
    "CONST_ME_ORANGETELEPORT": {
        "prefix": "CONST_ME_ORANGETELEPORT",
        "body": [
            "CONST_ME_ORANGETELEPORT"
        ]
    },
    "CONST_ME_GREYTELEPORT": {
        "prefix": "CONST_ME_GREYTELEPORT",
        "body": [
            "CONST_ME_GREYTELEPORT"
        ]
    },
    "CONST_ME_LIGHTBLUETELEPORT": {
        "prefix": "CONST_ME_LIGHTBLUETELEPORT",
        "body": [
            "CONST_ME_LIGHTBLUETELEPORT"
        ]
    },
    "CONST_ME_FATAL": {
        "prefix": "CONST_ME_FATAL",
        "body": [
            "CONST_ME_FATAL"
        ]
    },
    "CONST_ME_DODGE": {
        "prefix": "CONST_ME_DODGE",
        "body": [
            "CONST_ME_DODGE"
        ]
    },
    "CONST_ME_HOURGLASS": {
        "prefix": "CONST_ME_HOURGLASS",
        "body": [
            "CONST_ME_HOURGLASS"
        ]
    },
    "CONST_ME_DAZZLING": {
        "prefix": "CONST_ME_DAZZLING",
        "body": [
            "CONST_ME_DAZZLING"
        ]
    },
    "CONST_ME_SPARKLING": {
        "prefix": "CONST_ME_SPARKLING",
        "body": [
            "CONST_ME_SPARKLING"
        ]
    },
    "CONST_ME_FERUMBRAS_1": {
        "prefix": "CONST_ME_FERUMBRAS_1",
        "body": [
            "CONST_ME_FERUMBRAS_1"
        ]
    },
    "CONST_ME_GAZHARAGOTH": {
        "prefix": "CONST_ME_GAZHARAGOTH",
        "body": [
            "CONST_ME_GAZHARAGOTH"
        ]
    },
    "CONST_ME_MAD_MAGE": {
        "prefix": "CONST_ME_MAD_MAGE",
        "body": [
            "CONST_ME_MAD_MAGE"
        ]
    },
    "CONST_ME_HORESTIS": {
        "prefix": "CONST_ME_HORESTIS",
        "body": [
            "CONST_ME_HORESTIS"
        ]
    },
    "CONST_ME_DEVOVORGA": {
        "prefix": "CONST_ME_DEVOVORGA",
        "body": [
            "CONST_ME_DEVOVORGA"
        ]
    },
    "CONST_ME_FERUMBRAS_2": {
        "prefix": "CONST_ME_FERUMBRAS_2",
        "body": [
            "CONST_ME_FERUMBRAS_2"
        ]
    },
    "CONST_ME_WHITE_SMOKE": {
        "prefix": "CONST_ME_WHITE_SMOKE",
        "body": [
            "CONST_ME_WHITE_SMOKE"
        ]
    },
    "CONST_ME_WHITE_SMOKES": {
        "prefix": "CONST_ME_WHITE_SMOKES",
        "body": [
            "CONST_ME_WHITE_SMOKES"
        ]
    },
    "CONST_ME_WATER_DROP": {
        "prefix": "CONST_ME_WATER_DROP",
        "body": [
            "CONST_ME_WATER_DROP"
        ]
    },
    "CONST_ME_AVATAR_APPEAR": {
        "prefix": "CONST_ME_AVATAR_APPEAR",
        "body": [
            "CONST_ME_AVATAR_APPEAR"
        ]
    },
    "CONST_ME_DIVINE_GRENADE": {
        "prefix": "CONST_ME_DIVINE_GRENADE",
        "body": [
            "CONST_ME_DIVINE_GRENADE"
        ]
    },
    "CONST_ME_DIVINE_EMPOWERMENT": {
        "prefix": "CONST_ME_DIVINE_EMPOWERMENT",
        "body": [
            "CONST_ME_DIVINE_EMPOWERMENT"
        ]
    },
    "CONST_ME_WATER_FLOATING_THRASH": {
        "prefix": "CONST_ME_WATER_FLOATING_THRASH",
        "body": [
            "CONST_ME_WATER_FLOATING_THRASH"
        ]
    },
    "CONST_ME_AGONY": {
        "prefix": "CONST_ME_AGONY",
        "body": [
            "CONST_ME_AGONY"
        ]
    },
    "CONST_ANI_NONE": {
        "prefix": "CONST_ANI_NONE",
        "body": [
            "CONST_ANI_NONE"
        ]
    },
    "CONST_ANI_SPEAR": {
        "prefix": "CONST_ANI_SPEAR",
        "body": [
            "CONST_ANI_SPEAR"
        ]
    },
    "CONST_ANI_BOLT": {
        "prefix": "CONST_ANI_BOLT",
        "body": [
            "CONST_ANI_BOLT"
        ]
    },
    "CONST_ANI_ARROW": {
        "prefix": "CONST_ANI_ARROW",
        "body": [
            "CONST_ANI_ARROW"
        ]
    },
    "CONST_ANI_FIRE": {
        "prefix": "CONST_ANI_FIRE",
        "body": [
            "CONST_ANI_FIRE"
        ]
    },
    "CONST_ANI_ENERGY": {
        "prefix": "CONST_ANI_ENERGY",
        "body": [
            "CONST_ANI_ENERGY"
        ]
    },
    "CONST_ANI_POISONARROW": {
        "prefix": "CONST_ANI_POISONARROW",
        "body": [
            "CONST_ANI_POISONARROW"
        ]
    },
    "CONST_ANI_BURSTARROW": {
        "prefix": "CONST_ANI_BURSTARROW",
        "body": [
            "CONST_ANI_BURSTARROW"
        ]
    },
    "CONST_ANI_THROWINGSTAR": {
        "prefix": "CONST_ANI_THROWINGSTAR",
        "body": [
            "CONST_ANI_THROWINGSTAR"
        ]
    },
    "CONST_ANI_THROWINGKNIFE": {
        "prefix": "CONST_ANI_THROWINGKNIFE",
        "body": [
            "CONST_ANI_THROWINGKNIFE"
        ]
    },
    "CONST_ANI_SMALLSTONE": {
        "prefix": "CONST_ANI_SMALLSTONE",
        "body": [
            "CONST_ANI_SMALLSTONE"
        ]
    },
    "CONST_ANI_DEATH": {
        "prefix": "CONST_ANI_DEATH",
        "body": [
            "CONST_ANI_DEATH"
        ]
    },
    "CONST_ANI_LARGEROCK": {
        "prefix": "CONST_ANI_LARGEROCK",
        "body": [
            "CONST_ANI_LARGEROCK"
        ]
    },
    "CONST_ANI_SNOWBALL": {
        "prefix": "CONST_ANI_SNOWBALL",
        "body": [
            "CONST_ANI_SNOWBALL"
        ]
    },
    "CONST_ANI_POWERBOLT": {
        "prefix": "CONST_ANI_POWERBOLT",
        "body": [
            "CONST_ANI_POWERBOLT"
        ]
    },
    "CONST_ANI_POISON": {
        "prefix": "CONST_ANI_POISON",
        "body": [
            "CONST_ANI_POISON"
        ]
    },
    "CONST_ANI_INFERNALBOLT": {
        "prefix": "CONST_ANI_INFERNALBOLT",
        "body": [
            "CONST_ANI_INFERNALBOLT"
        ]
    },
    "CONST_ANI_HUNTINGSPEAR": {
        "prefix": "CONST_ANI_HUNTINGSPEAR",
        "body": [
            "CONST_ANI_HUNTINGSPEAR"
        ]
    },
    "CONST_ANI_ENCHANTEDSPEAR": {
        "prefix": "CONST_ANI_ENCHANTEDSPEAR",
        "body": [
            "CONST_ANI_ENCHANTEDSPEAR"
        ]
    },
    "CONST_ANI_REDSTAR": {
        "prefix": "CONST_ANI_REDSTAR",
        "body": [
            "CONST_ANI_REDSTAR"
        ]
    },
    "CONST_ANI_GREENSTAR": {
        "prefix": "CONST_ANI_GREENSTAR",
        "body": [
            "CONST_ANI_GREENSTAR"
        ]
    },
    "CONST_ANI_ROYALSPEAR": {
        "prefix": "CONST_ANI_ROYALSPEAR",
        "body": [
            "CONST_ANI_ROYALSPEAR"
        ]
    },
    "CONST_ANI_SNIPERARROW": {
        "prefix": "CONST_ANI_SNIPERARROW",
        "body": [
            "CONST_ANI_SNIPERARROW"
        ]
    },
    "CONST_ANI_ONYXARROW": {
        "prefix": "CONST_ANI_ONYXARROW",
        "body": [
            "CONST_ANI_ONYXARROW"
        ]
    },
    "CONST_ANI_PIERCINGBOLT": {
        "prefix": "CONST_ANI_PIERCINGBOLT",
        "body": [
            "CONST_ANI_PIERCINGBOLT"
        ]
    },
    "CONST_ANI_WHIRLWINDSWORD": {
        "prefix": "CONST_ANI_WHIRLWINDSWORD",
        "body": [
            "CONST_ANI_WHIRLWINDSWORD"
        ]
    },
    "CONST_ANI_WHIRLWINDAXE": {
        "prefix": "CONST_ANI_WHIRLWINDAXE",
        "body": [
            "CONST_ANI_WHIRLWINDAXE"
        ]
    },
    "CONST_ANI_WHIRLWINDCLUB": {
        "prefix": "CONST_ANI_WHIRLWINDCLUB",
        "body": [
            "CONST_ANI_WHIRLWINDCLUB"
        ]
    },
    "CONST_ANI_ETHEREALSPEAR": {
        "prefix": "CONST_ANI_ETHEREALSPEAR",
        "body": [
            "CONST_ANI_ETHEREALSPEAR"
        ]
    },
    "CONST_ANI_ICE": {
        "prefix": "CONST_ANI_ICE",
        "body": [
            "CONST_ANI_ICE"
        ]
    },
    "CONST_ANI_EARTH": {
        "prefix": "CONST_ANI_EARTH",
        "body": [
            "CONST_ANI_EARTH"
        ]
    },
    "CONST_ANI_HOLY": {
        "prefix": "CONST_ANI_HOLY",
        "body": [
            "CONST_ANI_HOLY"
        ]
    },
    "CONST_ANI_SUDDENDEATH": {
        "prefix": "CONST_ANI_SUDDENDEATH",
        "body": [
            "CONST_ANI_SUDDENDEATH"
        ]
    },
    "CONST_ANI_FLASHARROW": {
        "prefix": "CONST_ANI_FLASHARROW",
        "body": [
            "CONST_ANI_FLASHARROW"
        ]
    },
    "CONST_ANI_FLAMMINGARROW": {
        "prefix": "CONST_ANI_FLAMMINGARROW",
        "body": [
            "CONST_ANI_FLAMMINGARROW"
        ]
    },
    "CONST_ANI_SHIVERARROW": {
        "prefix": "CONST_ANI_SHIVERARROW",
        "body": [
            "CONST_ANI_SHIVERARROW"
        ]
    },
    "CONST_ANI_ENERGYBALL": {
        "prefix": "CONST_ANI_ENERGYBALL",
        "body": [
            "CONST_ANI_ENERGYBALL"
        ]
    },
    "CONST_ANI_SMALLICE": {
        "prefix": "CONST_ANI_SMALLICE",
        "body": [
            "CONST_ANI_SMALLICE"
        ]
    },
    "CONST_ANI_SMALLHOLY": {
        "prefix": "CONST_ANI_SMALLHOLY",
        "body": [
            "CONST_ANI_SMALLHOLY"
        ]
    },
    "CONST_ANI_SMALLEARTH": {
        "prefix": "CONST_ANI_SMALLEARTH",
        "body": [
            "CONST_ANI_SMALLEARTH"
        ]
    },
    "CONST_ANI_EARTHARROW": {
        "prefix": "CONST_ANI_EARTHARROW",
        "body": [
            "CONST_ANI_EARTHARROW"
        ]
    },
    "CONST_ANI_EXPLOSION": {
        "prefix": "CONST_ANI_EXPLOSION",
        "body": [
            "CONST_ANI_EXPLOSION"
        ]
    },
    "CONST_ANI_CAKE": {
        "prefix": "CONST_ANI_CAKE",
        "body": [
            "CONST_ANI_CAKE"
        ]
    },
    "CONST_ANI_TARSALARROW": {
        "prefix": "CONST_ANI_TARSALARROW",
        "body": [
            "CONST_ANI_TARSALARROW"
        ]
    },
    "CONST_ANI_VORTEXBOLT": {
        "prefix": "CONST_ANI_VORTEXBOLT",
        "body": [
            "CONST_ANI_VORTEXBOLT"
        ]
    },
    "CONST_ANI_PRISMATICBOLT": {
        "prefix": "CONST_ANI_PRISMATICBOLT",
        "body": [
            "CONST_ANI_PRISMATICBOLT"
        ]
    },
    "CONST_ANI_CRYSTALLINEARROW": {
        "prefix": "CONST_ANI_CRYSTALLINEARROW",
        "body": [
            "CONST_ANI_CRYSTALLINEARROW"
        ]
    },
    "CONST_ANI_DRILLBOLT": {
        "prefix": "CONST_ANI_DRILLBOLT",
        "body": [
            "CONST_ANI_DRILLBOLT"
        ]
    },
    "CONST_ANI_ENVENOMEDARROW": {
        "prefix": "CONST_ANI_ENVENOMEDARROW",
        "body": [
            "CONST_ANI_ENVENOMEDARROW"
        ]
    },
    "CONST_ANI_GLOOTHSPEAR": {
        "prefix": "CONST_ANI_GLOOTHSPEAR",
        "body": [
            "CONST_ANI_GLOOTHSPEAR"
        ]
    },
    "CONST_ANI_SIMPLEARROW": {
        "prefix": "CONST_ANI_SIMPLEARROW",
        "body": [
            "CONST_ANI_SIMPLEARROW"
        ]
    },
    "CONST_ANI_LEAFSTAR": {
        "prefix": "CONST_ANI_LEAFSTAR",
        "body": [
            "CONST_ANI_LEAFSTAR"
        ]
    },
    "CONST_ANI_DIAMONDARROW": {
        "prefix": "CONST_ANI_DIAMONDARROW",
        "body": [
            "CONST_ANI_DIAMONDARROW"
        ]
    },
    "CONST_ANI_SPECTRALBOLT": {
        "prefix": "CONST_ANI_SPECTRALBOLT",
        "body": [
            "CONST_ANI_SPECTRALBOLT"
        ]
    },
    "CONST_ANI_ROYALSTAR": {
        "prefix": "CONST_ANI_ROYALSTAR",
        "body": [
            "CONST_ANI_ROYALSTAR"
        ]
    },
    "CONST_PROP_BLOCKSOLID": {
        "prefix": "CONST_PROP_BLOCKSOLID",
        "body": [
            "CONST_PROP_BLOCKSOLID"
        ]
    },
    "CONST_PROP_HASHEIGHT": {
        "prefix": "CONST_PROP_HASHEIGHT",
        "body": [
            "CONST_PROP_HASHEIGHT"
        ]
    },
    "CONST_PROP_BLOCKPROJECTILE": {
        "prefix": "CONST_PROP_BLOCKPROJECTILE",
        "body": [
            "CONST_PROP_BLOCKPROJECTILE"
        ]
    },
    "CONST_PROP_BLOCKPATH": {
        "prefix": "CONST_PROP_BLOCKPATH",
        "body": [
            "CONST_PROP_BLOCKPATH"
        ]
    },
    "CONST_PROP_ISVERTICAL": {
        "prefix": "CONST_PROP_ISVERTICAL",
        "body": [
            "CONST_PROP_ISVERTICAL"
        ]
    },
    "CONST_PROP_ISHORIZONTAL": {
        "prefix": "CONST_PROP_ISHORIZONTAL",
        "body": [
            "CONST_PROP_ISHORIZONTAL"
        ]
    },
    "CONST_PROP_MOVEABLE": {
        "prefix": "CONST_PROP_MOVEABLE",
        "body": [
            "CONST_PROP_MOVEABLE"
        ]
    },
    "CONST_PROP_IMMOVABLEBLOCKSOLID": {
        "prefix": "CONST_PROP_IMMOVABLEBLOCKSOLID",
        "body": [
            "CONST_PROP_IMMOVABLEBLOCKSOLID"
        ]
    },
    "CONST_PROP_IMMOVABLEBLOCKPATH": {
        "prefix": "CONST_PROP_IMMOVABLEBLOCKPATH",
        "body": [
            "CONST_PROP_IMMOVABLEBLOCKPATH"
        ]
    },
    "CONST_PROP_IMMOVABLENOFIELDBLOCKPATH": {
        "prefix": "CONST_PROP_IMMOVABLENOFIELDBLOCKPATH",
        "body": [
            "CONST_PROP_IMMOVABLENOFIELDBLOCKPATH"
        ]
    },
    "CONST_PROP_NOFIELDBLOCKPATH": {
        "prefix": "CONST_PROP_NOFIELDBLOCKPATH",
        "body": [
            "CONST_PROP_NOFIELDBLOCKPATH"
        ]
    },
    "CONST_PROP_SUPPORTHANGABLE": {
        "prefix": "CONST_PROP_SUPPORTHANGABLE",
        "body": [
            "CONST_PROP_SUPPORTHANGABLE"
        ]
    },
    "CONST_SLOT_HEAD": {
        "prefix": "CONST_SLOT_HEAD",
        "body": [
            "CONST_SLOT_HEAD"
        ]
    },
    "CONST_SLOT_NECKLACE": {
        "prefix": "CONST_SLOT_NECKLACE",
        "body": [
            "CONST_SLOT_NECKLACE"
        ]
    },
    "CONST_SLOT_BACKPACK": {
        "prefix": "CONST_SLOT_BACKPACK",
        "body": [
            "CONST_SLOT_BACKPACK"
        ]
    },
    "CONST_SLOT_ARMOR": {
        "prefix": "CONST_SLOT_ARMOR",
        "body": [
            "CONST_SLOT_ARMOR"
        ]
    },
    "CONST_SLOT_RIGHT": {
        "prefix": "CONST_SLOT_RIGHT",
        "body": [
            "CONST_SLOT_RIGHT"
        ]
    },
    "CONST_SLOT_LEFT": {
        "prefix": "CONST_SLOT_LEFT",
        "body": [
            "CONST_SLOT_LEFT"
        ]
    },
    "CONST_SLOT_LEGS": {
        "prefix": "CONST_SLOT_LEGS",
        "body": [
            "CONST_SLOT_LEGS"
        ]
    },
    "CONST_SLOT_FEET": {
        "prefix": "CONST_SLOT_FEET",
        "body": [
            "CONST_SLOT_FEET"
        ]
    },
    "CONST_SLOT_RING": {
        "prefix": "CONST_SLOT_RING",
        "body": [
            "CONST_SLOT_RING"
        ]
    },
    "CONST_SLOT_AMMO": {
        "prefix": "CONST_SLOT_AMMO",
        "body": [
            "CONST_SLOT_AMMO"
        ]
    },
    "CONST_SLOT_STORE_INBOX": {
        "prefix": "CONST_SLOT_STORE_INBOX",
        "body": [
            "CONST_SLOT_STORE_INBOX"
        ]
    },
    "GAME_STATE_STARTUP": {
        "prefix": "GAME_STATE_STARTUP",
        "body": [
            "GAME_STATE_STARTUP"
        ]
    },
    "GAME_STATE_INIT": {
        "prefix": "GAME_STATE_INIT",
        "body": [
            "GAME_STATE_INIT"
        ]
    },
    "GAME_STATE_NORMAL": {
        "prefix": "GAME_STATE_NORMAL",
        "body": [
            "GAME_STATE_NORMAL"
        ]
    },
    "GAME_STATE_CLOSED": {
        "prefix": "GAME_STATE_CLOSED",
        "body": [
            "GAME_STATE_CLOSED"
        ]
    },
    "GAME_STATE_SHUTDOWN": {
        "prefix": "GAME_STATE_SHUTDOWN",
        "body": [
            "GAME_STATE_SHUTDOWN"
        ]
    },
    "GAME_STATE_CLOSING": {
        "prefix": "GAME_STATE_CLOSING",
        "body": [
            "GAME_STATE_CLOSING"
        ]
    },
    "GAME_STATE_MAINTAIN": {
        "prefix": "GAME_STATE_MAINTAIN",
        "body": [
            "GAME_STATE_MAINTAIN"
        ]
    },
    "MESSAGE_GAMEMASTER_CONSOLE": {
        "prefix": "MESSAGE_GAMEMASTER_CONSOLE",
        "body": [
            "MESSAGE_GAMEMASTER_CONSOLE"
        ]
    },
    "MESSAGE_LOGIN": {
        "prefix": "MESSAGE_LOGIN",
        "body": [
            "MESSAGE_LOGIN"
        ]
    },
    "MESSAGE_ADMINISTRATOR": {
        "prefix": "MESSAGE_ADMINISTRATOR",
        "body": [
            "MESSAGE_ADMINISTRATOR"
        ]
    },
    "MESSAGE_EVENT_ADVANCE": {
        "prefix": "MESSAGE_EVENT_ADVANCE",
        "body": [
            "MESSAGE_EVENT_ADVANCE"
        ]
    },
    "MESSAGE_GAME_HIGHLIGHT": {
        "prefix": "MESSAGE_GAME_HIGHLIGHT",
        "body": [
            "MESSAGE_GAME_HIGHLIGHT"
        ]
    },
    "MESSAGE_FAILURE": {
        "prefix": "MESSAGE_FAILURE",
        "body": [
            "MESSAGE_FAILURE"
        ]
    },
    "MESSAGE_LOOK": {
        "prefix": "MESSAGE_LOOK",
        "body": [
            "MESSAGE_LOOK"
        ]
    },
    "MESSAGE_DAMAGE_DEALT": {
        "prefix": "MESSAGE_DAMAGE_DEALT",
        "body": [
            "MESSAGE_DAMAGE_DEALT"
        ]
    },
    "MESSAGE_DAMAGE_RECEIVED": {
        "prefix": "MESSAGE_DAMAGE_RECEIVED",
        "body": [
            "MESSAGE_DAMAGE_RECEIVED"
        ]
    },
    "MESSAGE_HEALED": {
        "prefix": "MESSAGE_HEALED",
        "body": [
            "MESSAGE_HEALED"
        ]
    },
    "MESSAGE_EXPERIENCE": {
        "prefix": "MESSAGE_EXPERIENCE",
        "body": [
            "MESSAGE_EXPERIENCE"
        ]
    },
    "MESSAGE_DAMAGE_OTHERS": {
        "prefix": "MESSAGE_DAMAGE_OTHERS",
        "body": [
            "MESSAGE_DAMAGE_OTHERS"
        ]
    },
    "MESSAGE_HEALED_OTHERS": {
        "prefix": "MESSAGE_HEALED_OTHERS",
        "body": [
            "MESSAGE_HEALED_OTHERS"
        ]
    },
    "MESSAGE_EXPERIENCE_OTHERS": {
        "prefix": "MESSAGE_EXPERIENCE_OTHERS",
        "body": [
            "MESSAGE_EXPERIENCE_OTHERS"
        ]
    },
    "MESSAGE_STATUS": {
        "prefix": "MESSAGE_STATUS",
        "body": [
            "MESSAGE_STATUS"
        ]
    },
    "MESSAGE_LOOT": {
        "prefix": "MESSAGE_LOOT",
        "body": [
            "MESSAGE_LOOT"
        ]
    },
    "MESSAGE_TRADE": {
        "prefix": "MESSAGE_TRADE",
        "body": [
            "MESSAGE_TRADE"
        ]
    },
    "MESSAGE_GUILD": {
        "prefix": "MESSAGE_GUILD",
        "body": [
            "MESSAGE_GUILD"
        ]
    },
    "MESSAGE_PARTY_MANAGEMENT": {
        "prefix": "MESSAGE_PARTY_MANAGEMENT",
        "body": [
            "MESSAGE_PARTY_MANAGEMENT"
        ]
    },
    "MESSAGE_PARTY": {
        "prefix": "MESSAGE_PARTY",
        "body": [
            "MESSAGE_PARTY"
        ]
    },
    "MESSAGE_REPORT": {
        "prefix": "MESSAGE_REPORT",
        "body": [
            "MESSAGE_REPORT"
        ]
    },
    "MESSAGE_HOTKEY_PRESSED": {
        "prefix": "MESSAGE_HOTKEY_PRESSED",
        "body": [
            "MESSAGE_HOTKEY_PRESSED"
        ]
    },
    "MESSAGE_TUTORIAL_HINT": {
        "prefix": "MESSAGE_TUTORIAL_HINT",
        "body": [
            "MESSAGE_TUTORIAL_HINT"
        ]
    },
    "MESSAGE_THANK_YOU": {
        "prefix": "MESSAGE_THANK_YOU",
        "body": [
            "MESSAGE_THANK_YOU"
        ]
    },
    "MESSAGE_MARKET": {
        "prefix": "MESSAGE_MARKET",
        "body": [
            "MESSAGE_MARKET"
        ]
    },
    "MESSAGE_MANA": {
        "prefix": "MESSAGE_MANA",
        "body": [
            "MESSAGE_MANA"
        ]
    },
    "MESSAGE_BEYOND_LAST": {
        "prefix": "MESSAGE_BEYOND_LAST",
        "body": [
            "MESSAGE_BEYOND_LAST"
        ]
    },
    "MESSAGE_ATTENTION": {
        "prefix": "MESSAGE_ATTENTION",
        "body": [
            "MESSAGE_ATTENTION"
        ]
    },
    "MESSAGE_BOOSTED_CREATURE": {
        "prefix": "MESSAGE_BOOSTED_CREATURE",
        "body": [
            "MESSAGE_BOOSTED_CREATURE"
        ]
    },
    "MESSAGE_OFFLINE_TRAINING": {
        "prefix": "MESSAGE_OFFLINE_TRAINING",
        "body": [
            "MESSAGE_OFFLINE_TRAINING"
        ]
    },
    "MESSAGE_TRANSACTION": {
        "prefix": "MESSAGE_TRANSACTION",
        "body": [
            "MESSAGE_TRANSACTION"
        ]
    },
    "MESSAGE_POTION": {
        "prefix": "MESSAGE_POTION",
        "body": [
            "MESSAGE_POTION"
        ]
    },
    "CLIENTOS_LINUX": {
        "prefix": "CLIENTOS_LINUX",
        "body": [
            "CLIENTOS_LINUX"
        ]
    },
    "CLIENTOS_WINDOWS": {
        "prefix": "CLIENTOS_WINDOWS",
        "body": [
            "CLIENTOS_WINDOWS"
        ]
    },
    "CLIENTOS_FLASH": {
        "prefix": "CLIENTOS_FLASH",
        "body": [
            "CLIENTOS_FLASH"
        ]
    },
    "CLIENTOS_OTCLIENT_LINUX": {
        "prefix": "CLIENTOS_OTCLIENT_LINUX",
        "body": [
            "CLIENTOS_OTCLIENT_LINUX"
        ]
    },
    "CLIENTOS_OTCLIENT_WINDOWS": {
        "prefix": "CLIENTOS_OTCLIENT_WINDOWS",
        "body": [
            "CLIENTOS_OTCLIENT_WINDOWS"
        ]
    },
    "CLIENTOS_OTCLIENT_MAC": {
        "prefix": "CLIENTOS_OTCLIENT_MAC",
        "body": [
            "CLIENTOS_OTCLIENT_MAC"
        ]
    },
    "ITEM_ATTRIBUTE_NONE": {
        "prefix": "ITEM_ATTRIBUTE_NONE",
        "body": [
            "ITEM_ATTRIBUTE_NONE"
        ]
    },
    "ITEM_ATTRIBUTE_ACTIONID": {
        "prefix": "ITEM_ATTRIBUTE_ACTIONID",
        "body": [
            "ITEM_ATTRIBUTE_ACTIONID"
        ]
    },
    "ITEM_ATTRIBUTE_UNIQUEID": {
        "prefix": "ITEM_ATTRIBUTE_UNIQUEID",
        "body": [
            "ITEM_ATTRIBUTE_UNIQUEID"
        ]
    },
    "ITEM_ATTRIBUTE_DESCRIPTION": {
        "prefix": "ITEM_ATTRIBUTE_DESCRIPTION",
        "body": [
            "ITEM_ATTRIBUTE_DESCRIPTION"
        ]
    },
    "ITEM_ATTRIBUTE_TEXT": {
        "prefix": "ITEM_ATTRIBUTE_TEXT",
        "body": [
            "ITEM_ATTRIBUTE_TEXT"
        ]
    },
    "ITEM_ATTRIBUTE_DATE": {
        "prefix": "ITEM_ATTRIBUTE_DATE",
        "body": [
            "ITEM_ATTRIBUTE_DATE"
        ]
    },
    "ITEM_ATTRIBUTE_WRITER": {
        "prefix": "ITEM_ATTRIBUTE_WRITER",
        "body": [
            "ITEM_ATTRIBUTE_WRITER"
        ]
    },
    "ITEM_ATTRIBUTE_NAME": {
        "prefix": "ITEM_ATTRIBUTE_NAME",
        "body": [
            "ITEM_ATTRIBUTE_NAME"
        ]
    },
    "ITEM_ATTRIBUTE_ARTICLE": {
        "prefix": "ITEM_ATTRIBUTE_ARTICLE",
        "body": [
            "ITEM_ATTRIBUTE_ARTICLE"
        ]
    },
    "ITEM_ATTRIBUTE_PLURALNAME": {
        "prefix": "ITEM_ATTRIBUTE_PLURALNAME",
        "body": [
            "ITEM_ATTRIBUTE_PLURALNAME"
        ]
    },
    "ITEM_ATTRIBUTE_WEIGHT": {
        "prefix": "ITEM_ATTRIBUTE_WEIGHT",
        "body": [
            "ITEM_ATTRIBUTE_WEIGHT"
        ]
    },
    "ITEM_ATTRIBUTE_ATTACK": {
        "prefix": "ITEM_ATTRIBUTE_ATTACK",
        "body": [
            "ITEM_ATTRIBUTE_ATTACK"
        ]
    },
    "ITEM_ATTRIBUTE_DEFENSE": {
        "prefix": "ITEM_ATTRIBUTE_DEFENSE",
        "body": [
            "ITEM_ATTRIBUTE_DEFENSE"
        ]
    },
    "ITEM_ATTRIBUTE_EXTRADEFENSE": {
        "prefix": "ITEM_ATTRIBUTE_EXTRADEFENSE",
        "body": [
            "ITEM_ATTRIBUTE_EXTRADEFENSE"
        ]
    },
    "ITEM_ATTRIBUTE_ARMOR": {
        "prefix": "ITEM_ATTRIBUTE_ARMOR",
        "body": [
            "ITEM_ATTRIBUTE_ARMOR"
        ]
    },
    "ITEM_ATTRIBUTE_HITCHANCE": {
        "prefix": "ITEM_ATTRIBUTE_HITCHANCE",
        "body": [
            "ITEM_ATTRIBUTE_HITCHANCE"
        ]
    },
    "ITEM_ATTRIBUTE_SHOOTRANGE": {
        "prefix": "ITEM_ATTRIBUTE_SHOOTRANGE",
        "body": [
            "ITEM_ATTRIBUTE_SHOOTRANGE"
        ]
    },
    "ITEM_ATTRIBUTE_OWNER": {
        "prefix": "ITEM_ATTRIBUTE_OWNER",
        "body": [
            "ITEM_ATTRIBUTE_OWNER"
        ]
    },
    "ITEM_ATTRIBUTE_DURATION": {
        "prefix": "ITEM_ATTRIBUTE_DURATION",
        "body": [
            "ITEM_ATTRIBUTE_DURATION"
        ]
    },
    "ITEM_ATTRIBUTE_DECAYSTATE": {
        "prefix": "ITEM_ATTRIBUTE_DECAYSTATE",
        "body": [
            "ITEM_ATTRIBUTE_DECAYSTATE"
        ]
    },
    "ITEM_ATTRIBUTE_CORPSEOWNER": {
        "prefix": "ITEM_ATTRIBUTE_CORPSEOWNER",
        "body": [
            "ITEM_ATTRIBUTE_CORPSEOWNER"
        ]
    },
    "ITEM_ATTRIBUTE_CHARGES": {
        "prefix": "ITEM_ATTRIBUTE_CHARGES",
        "body": [
            "ITEM_ATTRIBUTE_CHARGES"
        ]
    },
    "ITEM_ATTRIBUTE_FLUIDTYPE": {
        "prefix": "ITEM_ATTRIBUTE_FLUIDTYPE",
        "body": [
            "ITEM_ATTRIBUTE_FLUIDTYPE"
        ]
    },
    "ITEM_ATTRIBUTE_DOORID": {
        "prefix": "ITEM_ATTRIBUTE_DOORID",
        "body": [
            "ITEM_ATTRIBUTE_DOORID"
        ]
    },
    "ITEM_ATTRIBUTE_SPECIAL": {
        "prefix": "ITEM_ATTRIBUTE_SPECIAL",
        "body": [
            "ITEM_ATTRIBUTE_SPECIAL"
        ]
    },
    "ITEM_ATTRIBUTE_IMBUEMENT_SLOT": {
        "prefix": "ITEM_ATTRIBUTE_IMBUEMENT_SLOT",
        "body": [
            "ITEM_ATTRIBUTE_IMBUEMENT_SLOT"
        ]
    },
    "ITEM_ATTRIBUTE_OPENCONTAINER": {
        "prefix": "ITEM_ATTRIBUTE_OPENCONTAINER",
        "body": [
            "ITEM_ATTRIBUTE_OPENCONTAINER"
        ]
    },
    "ITEM_ATTRIBUTE_QUICKLOOTCONTAINER": {
        "prefix": "ITEM_ATTRIBUTE_QUICKLOOTCONTAINER",
        "body": [
            "ITEM_ATTRIBUTE_QUICKLOOTCONTAINER"
        ]
    },
    "ITEM_ATTRIBUTE_DURATION_TIMESTAMP": {
        "prefix": "ITEM_ATTRIBUTE_DURATION_TIMESTAMP",
        "body": [
            "ITEM_ATTRIBUTE_DURATION_TIMESTAMP"
        ]
    },
    "ITEM_ATTRIBUTE_AMOUNT": {
        "prefix": "ITEM_ATTRIBUTE_AMOUNT",
        "body": [
            "ITEM_ATTRIBUTE_AMOUNT"
        ]
    },
    "ITEM_ATTRIBUTE_TIER": {
        "prefix": "ITEM_ATTRIBUTE_TIER",
        "body": [
            "ITEM_ATTRIBUTE_TIER"
        ]
    },
    "ITEM_ATTRIBUTE_STORE": {
        "prefix": "ITEM_ATTRIBUTE_STORE",
        "body": [
            "ITEM_ATTRIBUTE_STORE"
        ]
    },
    "ITEM_ATTRIBUTE_CUSTOM": {
        "prefix": "ITEM_ATTRIBUTE_CUSTOM",
        "body": [
            "ITEM_ATTRIBUTE_CUSTOM"
        ]
    },
    "ITEM_ATTRIBUTE_LOOTMESSAGE_SUFFIX": {
        "prefix": "ITEM_ATTRIBUTE_LOOTMESSAGE_SUFFIX",
        "body": [
            "ITEM_ATTRIBUTE_LOOTMESSAGE_SUFFIX"
        ]
    },
    "ITEM_ATTRIBUTE_STORE_INBOX_CATEGORY": {
        "prefix": "ITEM_ATTRIBUTE_STORE_INBOX_CATEGORY",
        "body": [
            "ITEM_ATTRIBUTE_STORE_INBOX_CATEGORY"
        ]
    },
    "ITEM_ATTRIBUTE_OBTAINCONTAINER": {
        "prefix": "ITEM_ATTRIBUTE_OBTAINCONTAINER",
        "body": [
            "ITEM_ATTRIBUTE_OBTAINCONTAINER"
        ]
    },
    "ITEM_ATTRIBUTE_AUGMENTS": {
        "prefix": "ITEM_ATTRIBUTE_AUGMENTS",
        "body": [
            "ITEM_ATTRIBUTE_AUGMENTS"
        ]
    },
    "ITEM_TYPE_NONE": {
        "prefix": "ITEM_TYPE_NONE",
        "body": [
            "ITEM_TYPE_NONE"
        ]
    },
    "ITEM_TYPE_ARMOR": {
        "prefix": "ITEM_TYPE_ARMOR",
        "body": [
            "ITEM_TYPE_ARMOR"
        ]
    },
    "ITEM_TYPE_AMULET": {
        "prefix": "ITEM_TYPE_AMULET",
        "body": [
            "ITEM_TYPE_AMULET"
        ]
    },
    "ITEM_TYPE_BOOTS": {
        "prefix": "ITEM_TYPE_BOOTS",
        "body": [
            "ITEM_TYPE_BOOTS"
        ]
    },
    "ITEM_TYPE_CONTAINER": {
        "prefix": "ITEM_TYPE_CONTAINER",
        "body": [
            "ITEM_TYPE_CONTAINER"
        ]
    },
    "ITEM_TYPE_DECORATION": {
        "prefix": "ITEM_TYPE_DECORATION",
        "body": [
            "ITEM_TYPE_DECORATION"
        ]
    },
    "ITEM_TYPE_FOOD": {
        "prefix": "ITEM_TYPE_FOOD",
        "body": [
            "ITEM_TYPE_FOOD"
        ]
    },
    "ITEM_TYPE_HELMET": {
        "prefix": "ITEM_TYPE_HELMET",
        "body": [
            "ITEM_TYPE_HELMET"
        ]
    },
    "ITEM_TYPE_LEGS": {
        "prefix": "ITEM_TYPE_LEGS",
        "body": [
            "ITEM_TYPE_LEGS"
        ]
    },
    "ITEM_TYPE_OTHER": {
        "prefix": "ITEM_TYPE_OTHER",
        "body": [
            "ITEM_TYPE_OTHER"
        ]
    },
    "ITEM_TYPE_POTION": {
        "prefix": "ITEM_TYPE_POTION",
        "body": [
            "ITEM_TYPE_POTION"
        ]
    },
    "ITEM_TYPE_RING": {
        "prefix": "ITEM_TYPE_RING",
        "body": [
            "ITEM_TYPE_RING"
        ]
    },
    "ITEM_TYPE_RUNE": {
        "prefix": "ITEM_TYPE_RUNE",
        "body": [
            "ITEM_TYPE_RUNE"
        ]
    },
    "ITEM_TYPE_SHIELD": {
        "prefix": "ITEM_TYPE_SHIELD",
        "body": [
            "ITEM_TYPE_SHIELD"
        ]
    },
    "ITEM_TYPE_TOOLS": {
        "prefix": "ITEM_TYPE_TOOLS",
        "body": [
            "ITEM_TYPE_TOOLS"
        ]
    },
    "ITEM_TYPE_VALUABLE": {
        "prefix": "ITEM_TYPE_VALUABLE",
        "body": [
            "ITEM_TYPE_VALUABLE"
        ]
    },
    "ITEM_TYPE_AMMO": {
        "prefix": "ITEM_TYPE_AMMO",
        "body": [
            "ITEM_TYPE_AMMO"
        ]
    },
    "ITEM_TYPE_AXE": {
        "prefix": "ITEM_TYPE_AXE",
        "body": [
            "ITEM_TYPE_AXE"
        ]
    },
    "ITEM_TYPE_CLUB": {
        "prefix": "ITEM_TYPE_CLUB",
        "body": [
            "ITEM_TYPE_CLUB"
        ]
    },
    "ITEM_TYPE_DISTANCE": {
        "prefix": "ITEM_TYPE_DISTANCE",
        "body": [
            "ITEM_TYPE_DISTANCE"
        ]
    },
    "ITEM_TYPE_SWORD": {
        "prefix": "ITEM_TYPE_SWORD",
        "body": [
            "ITEM_TYPE_SWORD"
        ]
    },
    "ITEM_TYPE_WAND": {
        "prefix": "ITEM_TYPE_WAND",
        "body": [
            "ITEM_TYPE_WAND"
        ]
    },
    "ITEM_TYPE_PREMIUMSCROLL": {
        "prefix": "ITEM_TYPE_PREMIUMSCROLL",
        "body": [
            "ITEM_TYPE_PREMIUMSCROLL"
        ]
    },
    "ITEM_TYPE_TIBIACOIN": {
        "prefix": "ITEM_TYPE_TIBIACOIN",
        "body": [
            "ITEM_TYPE_TIBIACOIN"
        ]
    },
    "ITEM_TYPE_CREATUREPRODUCT": {
        "prefix": "ITEM_TYPE_CREATUREPRODUCT",
        "body": [
            "ITEM_TYPE_CREATUREPRODUCT"
        ]
    },
    "ITEM_TYPE_QUIVER": {
        "prefix": "ITEM_TYPE_QUIVER",
        "body": [
            "ITEM_TYPE_QUIVER"
        ]
    },
    "ITEM_TYPE_DEPOT": {
        "prefix": "ITEM_TYPE_DEPOT",
        "body": [
            "ITEM_TYPE_DEPOT"
        ]
    },
    "ITEM_TYPE_MAILBOX": {
        "prefix": "ITEM_TYPE_MAILBOX",
        "body": [
            "ITEM_TYPE_MAILBOX"
        ]
    },
    "ITEM_TYPE_TRASHHOLDER": {
        "prefix": "ITEM_TYPE_TRASHHOLDER",
        "body": [
            "ITEM_TYPE_TRASHHOLDER"
        ]
    },
    "ITEM_TYPE_DOOR": {
        "prefix": "ITEM_TYPE_DOOR",
        "body": [
            "ITEM_TYPE_DOOR"
        ]
    },
    "ITEM_TYPE_MAGICFIELD": {
        "prefix": "ITEM_TYPE_MAGICFIELD",
        "body": [
            "ITEM_TYPE_MAGICFIELD"
        ]
    },
    "ITEM_TYPE_TELEPORT": {
        "prefix": "ITEM_TYPE_TELEPORT",
        "body": [
            "ITEM_TYPE_TELEPORT"
        ]
    },
    "ITEM_TYPE_BED": {
        "prefix": "ITEM_TYPE_BED",
        "body": [
            "ITEM_TYPE_BED"
        ]
    },
    "ITEM_TYPE_KEY": {
        "prefix": "ITEM_TYPE_KEY",
        "body": [
            "ITEM_TYPE_KEY"
        ]
    },
    "ITEM_TYPE_SUPPLY": {
        "prefix": "ITEM_TYPE_SUPPLY",
        "body": [
            "ITEM_TYPE_SUPPLY"
        ]
    },
    "ITEM_TYPE_REWARDCHEST": {
        "prefix": "ITEM_TYPE_REWARDCHEST",
        "body": [
            "ITEM_TYPE_REWARDCHEST"
        ]
    },
    "ITEM_TYPE_CARPET": {
        "prefix": "ITEM_TYPE_CARPET",
        "body": [
            "ITEM_TYPE_CARPET"
        ]
    },
    "ITEM_TYPE_RETRIEVE": {
        "prefix": "ITEM_TYPE_RETRIEVE",
        "body": [
            "ITEM_TYPE_RETRIEVE"
        ]
    },
    "ITEM_TYPE_GOLD": {
        "prefix": "ITEM_TYPE_GOLD",
        "body": [
            "ITEM_TYPE_GOLD"
        ]
    },
    "ITEM_TYPE_UNASSIGNED": {
        "prefix": "ITEM_TYPE_UNASSIGNED",
        "body": [
            "ITEM_TYPE_UNASSIGNED"
        ]
    },
    "ITEM_TYPE_LADDER": {
        "prefix": "ITEM_TYPE_LADDER",
        "body": [
            "ITEM_TYPE_LADDER"
        ]
    },
    "ITEM_TYPE_DUMMY": {
        "prefix": "ITEM_TYPE_DUMMY",
        "body": [
            "ITEM_TYPE_DUMMY"
        ]
    },
    "ITEM_TYPE_LAST": {
        "prefix": "ITEM_TYPE_LAST",
        "body": [
            "ITEM_TYPE_LAST"
        ]
    },
    "ITEM_BAG": {
        "prefix": "ITEM_BAG",
        "body": [
            "ITEM_BAG"
        ]
    },
    "ITEM_SHOPPING_BAG": {
        "prefix": "ITEM_SHOPPING_BAG",
        "body": [
            "ITEM_SHOPPING_BAG"
        ]
    },
    "ITEM_GOLD_COIN": {
        "prefix": "ITEM_GOLD_COIN",
        "body": [
            "ITEM_GOLD_COIN"
        ]
    },
    "ITEM_PLATINUM_COIN": {
        "prefix": "ITEM_PLATINUM_COIN",
        "body": [
            "ITEM_PLATINUM_COIN"
        ]
    },
    "ITEM_CRYSTAL_COIN": {
        "prefix": "ITEM_CRYSTAL_COIN",
        "body": [
            "ITEM_CRYSTAL_COIN"
        ]
    },
    "ITEM_NUGGET_COIN": {
        "prefix": "ITEM_NUGGET_COIN",
        "body": [
            "ITEM_NUGGET_COIN"
        ]
    },
    "ITEM_STORE_COIN": {
        "prefix": "ITEM_STORE_COIN",
        "body": [
            "ITEM_STORE_COIN"
        ]
    },
    "ITEM_REWARD_CHEST": {
        "prefix": "ITEM_REWARD_CHEST",
        "body": [
            "ITEM_REWARD_CHEST"
        ]
    },
    "ITEM_REWARD_CONTAINER": {
        "prefix": "ITEM_REWARD_CONTAINER",
        "body": [
            "ITEM_REWARD_CONTAINER"
        ]
    },
    "ITEM_AMULETOFLOSS": {
        "prefix": "ITEM_AMULETOFLOSS",
        "body": [
            "ITEM_AMULETOFLOSS"
        ]
    },
    "ITEM_PARCEL": {
        "prefix": "ITEM_PARCEL",
        "body": [
            "ITEM_PARCEL"
        ]
    },
    "ITEM_PARCEL_STAMPED": {
        "prefix": "ITEM_PARCEL_STAMPED",
        "body": [
            "ITEM_PARCEL_STAMPED"
        ]
    },
    "ITEM_LABEL": {
        "prefix": "ITEM_LABEL",
        "body": [
            "ITEM_LABEL"
        ]
    },
    "ITEM_FIREFIELD_PVP_FULL": {
        "prefix": "ITEM_FIREFIELD_PVP_FULL",
        "body": [
            "ITEM_FIREFIELD_PVP_FULL"
        ]
    },
    "ITEM_FIREFIELD_PVP_MEDIUM": {
        "prefix": "ITEM_FIREFIELD_PVP_MEDIUM",
        "body": [
            "ITEM_FIREFIELD_PVP_MEDIUM"
        ]
    },
    "ITEM_FIREFIELD_PVP_SMALL": {
        "prefix": "ITEM_FIREFIELD_PVP_SMALL",
        "body": [
            "ITEM_FIREFIELD_PVP_SMALL"
        ]
    },
    "ITEM_FIREFIELD_PERSISTENT_FULL": {
        "prefix": "ITEM_FIREFIELD_PERSISTENT_FULL",
        "body": [
            "ITEM_FIREFIELD_PERSISTENT_FULL"
        ]
    },
    "ITEM_FIREFIELD_PERSISTENT_MEDIUM": {
        "prefix": "ITEM_FIREFIELD_PERSISTENT_MEDIUM",
        "body": [
            "ITEM_FIREFIELD_PERSISTENT_MEDIUM"
        ]
    },
    "ITEM_FIREFIELD_PERSISTENT_SMALL": {
        "prefix": "ITEM_FIREFIELD_PERSISTENT_SMALL",
        "body": [
            "ITEM_FIREFIELD_PERSISTENT_SMALL"
        ]
    },
    "ITEM_FIREFIELD_NOPVP": {
        "prefix": "ITEM_FIREFIELD_NOPVP",
        "body": [
            "ITEM_FIREFIELD_NOPVP"
        ]
    },
    "ITEM_POISONFIELD_PVP": {
        "prefix": "ITEM_POISONFIELD_PVP",
        "body": [
            "ITEM_POISONFIELD_PVP"
        ]
    },
    "ITEM_POISONFIELD_PERSISTENT": {
        "prefix": "ITEM_POISONFIELD_PERSISTENT",
        "body": [
            "ITEM_POISONFIELD_PERSISTENT"
        ]
    },
    "ITEM_POISONFIELD_NOPVP": {
        "prefix": "ITEM_POISONFIELD_NOPVP",
        "body": [
            "ITEM_POISONFIELD_NOPVP"
        ]
    },
    "ITEM_ENERGYFIELD_PVP": {
        "prefix": "ITEM_ENERGYFIELD_PVP",
        "body": [
            "ITEM_ENERGYFIELD_PVP"
        ]
    },
    "ITEM_ENERGYFIELD_PERSISTENT": {
        "prefix": "ITEM_ENERGYFIELD_PERSISTENT",
        "body": [
            "ITEM_ENERGYFIELD_PERSISTENT"
        ]
    },
    "ITEM_ENERGYFIELD_NOPVP": {
        "prefix": "ITEM_ENERGYFIELD_NOPVP",
        "body": [
            "ITEM_ENERGYFIELD_NOPVP"
        ]
    },
    "ITEM_MAGICWALL": {
        "prefix": "ITEM_MAGICWALL",
        "body": [
            "ITEM_MAGICWALL"
        ]
    },
    "ITEM_MAGICWALL_PERSISTENT": {
        "prefix": "ITEM_MAGICWALL_PERSISTENT",
        "body": [
            "ITEM_MAGICWALL_PERSISTENT"
        ]
    },
    "ITEM_MAGICWALL_SAFE": {
        "prefix": "ITEM_MAGICWALL_SAFE",
        "body": [
            "ITEM_MAGICWALL_SAFE"
        ]
    },
    "ITEM_WILDGROWTH": {
        "prefix": "ITEM_WILDGROWTH",
        "body": [
            "ITEM_WILDGROWTH"
        ]
    },
    "ITEM_WILDGROWTH_PERSISTENT": {
        "prefix": "ITEM_WILDGROWTH_PERSISTENT",
        "body": [
            "ITEM_WILDGROWTH_PERSISTENT"
        ]
    },
    "ITEM_WILDGROWTH_SAFE": {
        "prefix": "ITEM_WILDGROWTH_SAFE",
        "body": [
            "ITEM_WILDGROWTH_SAFE"
        ]
    },
    "ITEM_EXERCISE_START": {
        "prefix": "ITEM_EXERCISE_START",
        "body": [
            "ITEM_EXERCISE_START"
        ]
    },
    "ITEM_EXERCISE_END": {
        "prefix": "ITEM_EXERCISE_END",
        "body": [
            "ITEM_EXERCISE_END"
        ]
    },
    "ITEM_HEALTH_CASK_START": {
        "prefix": "ITEM_HEALTH_CASK_START",
        "body": [
            "ITEM_HEALTH_CASK_START"
        ]
    },
    "ITEM_HEALTH_CASK_END": {
        "prefix": "ITEM_HEALTH_CASK_END",
        "body": [
            "ITEM_HEALTH_CASK_END"
        ]
    },
    "ITEM_MANA_CASK_START": {
        "prefix": "ITEM_MANA_CASK_START",
        "body": [
            "ITEM_MANA_CASK_START"
        ]
    },
    "ITEM_MANA_CASK_END": {
        "prefix": "ITEM_MANA_CASK_END",
        "body": [
            "ITEM_MANA_CASK_END"
        ]
    },
    "ITEM_SPIRIT_CASK_START": {
        "prefix": "ITEM_SPIRIT_CASK_START",
        "body": [
            "ITEM_SPIRIT_CASK_START"
        ]
    },
    "ITEM_SPIRIT_CASK_END": {
        "prefix": "ITEM_SPIRIT_CASK_END",
        "body": [
            "ITEM_SPIRIT_CASK_END"
        ]
    },
    "ITEM_KEG_START": {
        "prefix": "ITEM_KEG_START",
        "body": [
            "ITEM_KEG_START"
        ]
    },
    "ITEM_KEG_END": {
        "prefix": "ITEM_KEG_END",
        "body": [
            "ITEM_KEG_END"
        ]
    },
    "ITEM_STONE_SKIN_AMULET": {
        "prefix": "ITEM_STONE_SKIN_AMULET",
        "body": [
            "ITEM_STONE_SKIN_AMULET"
        ]
    },
    "ITEM_OLD_DIAMOND_ARROW": {
        "prefix": "ITEM_OLD_DIAMOND_ARROW",
        "body": [
            "ITEM_OLD_DIAMOND_ARROW"
        ]
    },
    "ITEM_DIAMOND_ARROW": {
        "prefix": "ITEM_DIAMOND_ARROW",
        "body": [
            "ITEM_DIAMOND_ARROW"
        ]
    },
    "ITEM_GOLD_POUCH": {
        "prefix": "ITEM_GOLD_POUCH",
        "body": [
            "ITEM_GOLD_POUCH"
        ]
    },
    "ITEM_STORE_INBOX": {
        "prefix": "ITEM_STORE_INBOX",
        "body": [
            "ITEM_STORE_INBOX"
        ]
    },
    "ITEM_DIVINE_EMPOWERMENT": {
        "prefix": "ITEM_DIVINE_EMPOWERMENT",
        "body": [
            "ITEM_DIVINE_EMPOWERMENT"
        ]
    },
    "ITEM_FORGE_SLIVER": {
        "prefix": "ITEM_FORGE_SLIVER",
        "body": [
            "ITEM_FORGE_SLIVER"
        ]
    },
    "ITEM_FORGE_CORE": {
        "prefix": "ITEM_FORGE_CORE",
        "body": [
            "ITEM_FORGE_CORE"
        ]
    },
    "ITEM_PRIMAL_POD": {
        "prefix": "ITEM_PRIMAL_POD",
        "body": [
            "ITEM_PRIMAL_POD"
        ]
    },
    "ITEM_DECORATION_KIT": {
        "prefix": "ITEM_DECORATION_KIT",
        "body": [
            "ITEM_DECORATION_KIT"
        ]
    },
    "HIRELING_LAMP": {
        "prefix": "HIRELING_LAMP",
        "body": [
            "HIRELING_LAMP"
        ]
    },
    "PLAYERSEX_FEMALE": {
        "prefix": "PLAYERSEX_FEMALE",
        "body": [
            "PLAYERSEX_FEMALE"
        ]
    },
    "PLAYERSEX_MALE": {
        "prefix": "PLAYERSEX_MALE",
        "body": [
            "PLAYERSEX_MALE"
        ]
    },
    "SKILL_NONE": {
        "prefix": "SKILL_NONE",
        "body": [
            "SKILL_NONE"
        ]
    },
    "SKILL_FIST": {
        "prefix": "SKILL_FIST",
        "body": [
            "SKILL_FIST"
        ]
    },
    "SKILL_CLUB": {
        "prefix": "SKILL_CLUB",
        "body": [
            "SKILL_CLUB"
        ]
    },
    "SKILL_SWORD": {
        "prefix": "SKILL_SWORD",
        "body": [
            "SKILL_SWORD"
        ]
    },
    "SKILL_AXE": {
        "prefix": "SKILL_AXE",
        "body": [
            "SKILL_AXE"
        ]
    },
    "SKILL_DISTANCE": {
        "prefix": "SKILL_DISTANCE",
        "body": [
            "SKILL_DISTANCE"
        ]
    },
    "SKILL_SHIELD": {
        "prefix": "SKILL_SHIELD",
        "body": [
            "SKILL_SHIELD"
        ]
    },
    "SKILL_FISHING": {
        "prefix": "SKILL_FISHING",
        "body": [
            "SKILL_FISHING"
        ]
    },
    "SKILL_CRITICAL_HIT_CHANCE": {
        "prefix": "SKILL_CRITICAL_HIT_CHANCE",
        "body": [
            "SKILL_CRITICAL_HIT_CHANCE"
        ]
    },
    "SKILL_CRITICAL_HIT_DAMAGE": {
        "prefix": "SKILL_CRITICAL_HIT_DAMAGE",
        "body": [
            "SKILL_CRITICAL_HIT_DAMAGE"
        ]
    },
    "SKILL_LIFE_LEECH_CHANCE": {
        "prefix": "SKILL_LIFE_LEECH_CHANCE",
        "body": [
            "SKILL_LIFE_LEECH_CHANCE"
        ]
    },
    "SKILL_LIFE_LEECH_AMOUNT": {
        "prefix": "SKILL_LIFE_LEECH_AMOUNT",
        "body": [
            "SKILL_LIFE_LEECH_AMOUNT"
        ]
    },
    "SKILL_MANA_LEECH_CHANCE": {
        "prefix": "SKILL_MANA_LEECH_CHANCE",
        "body": [
            "SKILL_MANA_LEECH_CHANCE"
        ]
    },
    "SKILL_MANA_LEECH_AMOUNT": {
        "prefix": "SKILL_MANA_LEECH_AMOUNT",
        "body": [
            "SKILL_MANA_LEECH_AMOUNT"
        ]
    },
    "SKILL_MAGLEVEL": {
        "prefix": "SKILL_MAGLEVEL",
        "body": [
            "SKILL_MAGLEVEL"
        ]
    },
    "SKILL_LEVEL": {
        "prefix": "SKILL_LEVEL",
        "body": [
            "SKILL_LEVEL"
        ]
    },
    "SKULL_NONE": {
        "prefix": "SKULL_NONE",
        "body": [
            "SKULL_NONE"
        ]
    },
    "SKULL_YELLOW": {
        "prefix": "SKULL_YELLOW",
        "body": [
            "SKULL_YELLOW"
        ]
    },
    "SKULL_GREEN": {
        "prefix": "SKULL_GREEN",
        "body": [
            "SKULL_GREEN"
        ]
    },
    "SKULL_WHITE": {
        "prefix": "SKULL_WHITE",
        "body": [
            "SKULL_WHITE"
        ]
    },
    "SKULL_RED": {
        "prefix": "SKULL_RED",
        "body": [
            "SKULL_RED"
        ]
    },
    "SKULL_BLACK": {
        "prefix": "SKULL_BLACK",
        "body": [
            "SKULL_BLACK"
        ]
    },
    "SKULL_ORANGE": {
        "prefix": "SKULL_ORANGE",
        "body": [
            "SKULL_ORANGE"
        ]
    },
    "TALKTYPE_SAY": {
        "prefix": "TALKTYPE_SAY",
        "body": [
            "TALKTYPE_SAY"
        ]
    },
    "TALKTYPE_WHISPER": {
        "prefix": "TALKTYPE_WHISPER",
        "body": [
            "TALKTYPE_WHISPER"
        ]
    },
    "TALKTYPE_YELL": {
        "prefix": "TALKTYPE_YELL",
        "body": [
            "TALKTYPE_YELL"
        ]
    },
    "TALKTYPE_PRIVATE_FROM": {
        "prefix": "TALKTYPE_PRIVATE_FROM",
        "body": [
            "TALKTYPE_PRIVATE_FROM"
        ]
    },
    "TALKTYPE_PRIVATE_TO": {
        "prefix": "TALKTYPE_PRIVATE_TO",
        "body": [
            "TALKTYPE_PRIVATE_TO"
        ]
    },
    "TALKTYPE_CHANNEL_Y": {
        "prefix": "TALKTYPE_CHANNEL_Y",
        "body": [
            "TALKTYPE_CHANNEL_Y"
        ]
    },
    "TALKTYPE_CHANNEL_O": {
        "prefix": "TALKTYPE_CHANNEL_O",
        "body": [
            "TALKTYPE_CHANNEL_O"
        ]
    },
    "TALKTYPE_PRIVATE_NP": {
        "prefix": "TALKTYPE_PRIVATE_NP",
        "body": [
            "TALKTYPE_PRIVATE_NP"
        ]
    },
    "TALKTYPE_PRIVATE_PN": {
        "prefix": "TALKTYPE_PRIVATE_PN",
        "body": [
            "TALKTYPE_PRIVATE_PN"
        ]
    },
    "TALKTYPE_BROADCAST": {
        "prefix": "TALKTYPE_BROADCAST",
        "body": [
            "TALKTYPE_BROADCAST"
        ]
    },
    "TALKTYPE_CHANNEL_R1": {
        "prefix": "TALKTYPE_CHANNEL_R1",
        "body": [
            "TALKTYPE_CHANNEL_R1"
        ]
    },
    "TALKTYPE_PRIVATE_RED_FROM": {
        "prefix": "TALKTYPE_PRIVATE_RED_FROM",
        "body": [
            "TALKTYPE_PRIVATE_RED_FROM"
        ]
    },
    "TALKTYPE_PRIVATE_RED_TO": {
        "prefix": "TALKTYPE_PRIVATE_RED_TO",
        "body": [
            "TALKTYPE_PRIVATE_RED_TO"
        ]
    },
    "TALKTYPE_MONSTER_SAY": {
        "prefix": "TALKTYPE_MONSTER_SAY",
        "body": [
            "TALKTYPE_MONSTER_SAY"
        ]
    },
    "TALKTYPE_MONSTER_YELL": {
        "prefix": "TALKTYPE_MONSTER_YELL",
        "body": [
            "TALKTYPE_MONSTER_YELL"
        ]
    },
    "TALKTYPE_CHANNEL_R2": {
        "prefix": "TALKTYPE_CHANNEL_R2",
        "body": [
            "TALKTYPE_CHANNEL_R2"
        ]
    },
    "TALKTYPE_CHANNEL_W": {
        "prefix": "TALKTYPE_CHANNEL_W",
        "body": [
            "TALKTYPE_CHANNEL_W"
        ]
    },
    "TEXTCOLOR_BLUE": {
        "prefix": "TEXTCOLOR_BLUE",
        "body": [
            "TEXTCOLOR_BLUE"
        ]
    },
    "TEXTCOLOR_LIGHTGREEN": {
        "prefix": "TEXTCOLOR_LIGHTGREEN",
        "body": [
            "TEXTCOLOR_LIGHTGREEN"
        ]
    },
    "TEXTCOLOR_LIGHTBLUE": {
        "prefix": "TEXTCOLOR_LIGHTBLUE",
        "body": [
            "TEXTCOLOR_LIGHTBLUE"
        ]
    },
    "TEXTCOLOR_DARKBROWN": {
        "prefix": "TEXTCOLOR_DARKBROWN",
        "body": [
            "TEXTCOLOR_DARKBROWN"
        ]
    },
    "TEXTCOLOR_DARKGREY": {
        "prefix": "TEXTCOLOR_DARKGREY",
        "body": [
            "TEXTCOLOR_DARKGREY"
        ]
    },
    "TEXTCOLOR_MAYABLUE": {
        "prefix": "TEXTCOLOR_MAYABLUE",
        "body": [
            "TEXTCOLOR_MAYABLUE"
        ]
    },
    "TEXTCOLOR_DARKRED": {
        "prefix": "TEXTCOLOR_DARKRED",
        "body": [
            "TEXTCOLOR_DARKRED"
        ]
    },
    "TEXTCOLOR_NEUTRALDAMAGE": {
        "prefix": "TEXTCOLOR_NEUTRALDAMAGE",
        "body": [
            "TEXTCOLOR_NEUTRALDAMAGE"
        ]
    },
    "TEXTCOLOR_LIGHTGREY": {
        "prefix": "TEXTCOLOR_LIGHTGREY",
        "body": [
            "TEXTCOLOR_LIGHTGREY"
        ]
    },
    "TEXTCOLOR_SKYBLUE": {
        "prefix": "TEXTCOLOR_SKYBLUE",
        "body": [
            "TEXTCOLOR_SKYBLUE"
        ]
    },
    "TEXTCOLOR_PURPLE": {
        "prefix": "TEXTCOLOR_PURPLE",
        "body": [
            "TEXTCOLOR_PURPLE"
        ]
    },
    "TEXTCOLOR_ELECTRICPURPLE": {
        "prefix": "TEXTCOLOR_ELECTRICPURPLE",
        "body": [
            "TEXTCOLOR_ELECTRICPURPLE"
        ]
    },
    "TEXTCOLOR_RED": {
        "prefix": "TEXTCOLOR_RED",
        "body": [
            "TEXTCOLOR_RED"
        ]
    },
    "TEXTCOLOR_PASTELRED": {
        "prefix": "TEXTCOLOR_PASTELRED",
        "body": [
            "TEXTCOLOR_PASTELRED"
        ]
    },
    "TEXTCOLOR_ORANGE": {
        "prefix": "TEXTCOLOR_ORANGE",
        "body": [
            "TEXTCOLOR_ORANGE"
        ]
    },
    "TEXTCOLOR_LIGHTPURPLE": {
        "prefix": "TEXTCOLOR_LIGHTPURPLE",
        "body": [
            "TEXTCOLOR_LIGHTPURPLE"
        ]
    },
    "TEXTCOLOR_YELLOW": {
        "prefix": "TEXTCOLOR_YELLOW",
        "body": [
            "TEXTCOLOR_YELLOW"
        ]
    },
    "TEXTCOLOR_WHITE_EXP": {
        "prefix": "TEXTCOLOR_WHITE_EXP",
        "body": [
            "TEXTCOLOR_WHITE_EXP"
        ]
    },
    "TEXTCOLOR_NONE": {
        "prefix": "TEXTCOLOR_NONE",
        "body": [
            "TEXTCOLOR_NONE"
        ]
    },
    "TILESTATE_NONE": {
        "prefix": "TILESTATE_NONE",
        "body": [
            "TILESTATE_NONE"
        ]
    },
    "TILESTATE_PROTECTIONZONE": {
        "prefix": "TILESTATE_PROTECTIONZONE",
        "body": [
            "TILESTATE_PROTECTIONZONE"
        ]
    },
    "TILESTATE_NOPVPZONE": {
        "prefix": "TILESTATE_NOPVPZONE",
        "body": [
            "TILESTATE_NOPVPZONE"
        ]
    },
    "TILESTATE_NOLOGOUT": {
        "prefix": "TILESTATE_NOLOGOUT",
        "body": [
            "TILESTATE_NOLOGOUT"
        ]
    },
    "TILESTATE_PVPZONE": {
        "prefix": "TILESTATE_PVPZONE",
        "body": [
            "TILESTATE_PVPZONE"
        ]
    },
    "TILESTATE_FLOORCHANGE": {
        "prefix": "TILESTATE_FLOORCHANGE",
        "body": [
            "TILESTATE_FLOORCHANGE"
        ]
    },
    "TILESTATE_FLOORCHANGE_DOWN": {
        "prefix": "TILESTATE_FLOORCHANGE_DOWN",
        "body": [
            "TILESTATE_FLOORCHANGE_DOWN"
        ]
    },
    "TILESTATE_FLOORCHANGE_NORTH": {
        "prefix": "TILESTATE_FLOORCHANGE_NORTH",
        "body": [
            "TILESTATE_FLOORCHANGE_NORTH"
        ]
    },
    "TILESTATE_FLOORCHANGE_SOUTH": {
        "prefix": "TILESTATE_FLOORCHANGE_SOUTH",
        "body": [
            "TILESTATE_FLOORCHANGE_SOUTH"
        ]
    },
    "TILESTATE_FLOORCHANGE_EAST": {
        "prefix": "TILESTATE_FLOORCHANGE_EAST",
        "body": [
            "TILESTATE_FLOORCHANGE_EAST"
        ]
    },
    "TILESTATE_FLOORCHANGE_WEST": {
        "prefix": "TILESTATE_FLOORCHANGE_WEST",
        "body": [
            "TILESTATE_FLOORCHANGE_WEST"
        ]
    },
    "TILESTATE_TELEPORT": {
        "prefix": "TILESTATE_TELEPORT",
        "body": [
            "TILESTATE_TELEPORT"
        ]
    },
    "TILESTATE_MAGICFIELD": {
        "prefix": "TILESTATE_MAGICFIELD",
        "body": [
            "TILESTATE_MAGICFIELD"
        ]
    },
    "TILESTATE_MAILBOX": {
        "prefix": "TILESTATE_MAILBOX",
        "body": [
            "TILESTATE_MAILBOX"
        ]
    },
    "TILESTATE_TRASHHOLDER": {
        "prefix": "TILESTATE_TRASHHOLDER",
        "body": [
            "TILESTATE_TRASHHOLDER"
        ]
    },
    "TILESTATE_BED": {
        "prefix": "TILESTATE_BED",
        "body": [
            "TILESTATE_BED"
        ]
    },
    "TILESTATE_DEPOT": {
        "prefix": "TILESTATE_DEPOT",
        "body": [
            "TILESTATE_DEPOT"
        ]
    },
    "TILESTATE_BLOCKSOLID": {
        "prefix": "TILESTATE_BLOCKSOLID",
        "body": [
            "TILESTATE_BLOCKSOLID"
        ]
    },
    "TILESTATE_BLOCKPATH": {
        "prefix": "TILESTATE_BLOCKPATH",
        "body": [
            "TILESTATE_BLOCKPATH"
        ]
    },
    "TILESTATE_IMMOVABLEBLOCKSOLID": {
        "prefix": "TILESTATE_IMMOVABLEBLOCKSOLID",
        "body": [
            "TILESTATE_IMMOVABLEBLOCKSOLID"
        ]
    },
    "TILESTATE_IMMOVABLEBLOCKPATH": {
        "prefix": "TILESTATE_IMMOVABLEBLOCKPATH",
        "body": [
            "TILESTATE_IMMOVABLEBLOCKPATH"
        ]
    },
    "TILESTATE_IMMOVABLENOFIELDBLOCKPATH": {
        "prefix": "TILESTATE_IMMOVABLENOFIELDBLOCKPATH",
        "body": [
            "TILESTATE_IMMOVABLENOFIELDBLOCKPATH"
        ]
    },
    "TILESTATE_NOFIELDBLOCKPATH": {
        "prefix": "TILESTATE_NOFIELDBLOCKPATH",
        "body": [
            "TILESTATE_NOFIELDBLOCKPATH"
        ]
    },
    "TILESTATE_FLOORCHANGE_SOUTH_ALT": {
        "prefix": "TILESTATE_FLOORCHANGE_SOUTH_ALT",
        "body": [
            "TILESTATE_FLOORCHANGE_SOUTH_ALT"
        ]
    },
    "TILESTATE_FLOORCHANGE_EAST_ALT": {
        "prefix": "TILESTATE_FLOORCHANGE_EAST_ALT",
        "body": [
            "TILESTATE_FLOORCHANGE_EAST_ALT"
        ]
    },
    "TILESTATE_SUPPORTS_HANGABLE": {
        "prefix": "TILESTATE_SUPPORTS_HANGABLE",
        "body": [
            "TILESTATE_SUPPORTS_HANGABLE"
        ]
    },
    "WEAPON_NONE": {
        "prefix": "WEAPON_NONE",
        "body": [
            "WEAPON_NONE"
        ]
    },
    "WEAPON_SWORD": {
        "prefix": "WEAPON_SWORD",
        "body": [
            "WEAPON_SWORD"
        ]
    },
    "WEAPON_CLUB": {
        "prefix": "WEAPON_CLUB",
        "body": [
            "WEAPON_CLUB"
        ]
    },
    "WEAPON_AXE": {
        "prefix": "WEAPON_AXE",
        "body": [
            "WEAPON_AXE"
        ]
    },
    "WEAPON_SHIELD": {
        "prefix": "WEAPON_SHIELD",
        "body": [
            "WEAPON_SHIELD"
        ]
    },
    "WEAPON_DISTANCE": {
        "prefix": "WEAPON_DISTANCE",
        "body": [
            "WEAPON_DISTANCE"
        ]
    },
    "WEAPON_WAND": {
        "prefix": "WEAPON_WAND",
        "body": [
            "WEAPON_WAND"
        ]
    },
    "WEAPON_AMMO": {
        "prefix": "WEAPON_AMMO",
        "body": [
            "WEAPON_AMMO"
        ]
    },
    "WEAPON_MISSILE": {
        "prefix": "WEAPON_MISSILE",
        "body": [
            "WEAPON_MISSILE"
        ]
    },
    "WORLD_TYPE_NO_PVP": {
        "prefix": "WORLD_TYPE_NO_PVP",
        "body": [
            "WORLD_TYPE_NO_PVP"
        ]
    },
    "WORLD_TYPE_PVP": {
        "prefix": "WORLD_TYPE_PVP",
        "body": [
            "WORLD_TYPE_PVP"
        ]
    },
    "WORLD_TYPE_PVP_ENFORCED": {
        "prefix": "WORLD_TYPE_PVP_ENFORCED",
        "body": [
            "WORLD_TYPE_PVP_ENFORCED"
        ]
    },
    "FLAG_NOLIMIT": {
        "prefix": "FLAG_NOLIMIT",
        "body": [
            "FLAG_NOLIMIT"
        ]
    },
    "FLAG_IGNOREBLOCKITEM": {
        "prefix": "FLAG_IGNOREBLOCKITEM",
        "body": [
            "FLAG_IGNOREBLOCKITEM"
        ]
    },
    "FLAG_IGNOREBLOCKCREATURE": {
        "prefix": "FLAG_IGNOREBLOCKCREATURE",
        "body": [
            "FLAG_IGNOREBLOCKCREATURE"
        ]
    },
    "FLAG_CHILDISOWNER": {
        "prefix": "FLAG_CHILDISOWNER",
        "body": [
            "FLAG_CHILDISOWNER"
        ]
    },
    "FLAG_PATHFINDING": {
        "prefix": "FLAG_PATHFINDING",
        "body": [
            "FLAG_PATHFINDING"
        ]
    },
    "FLAG_IGNOREFIELDDAMAGE": {
        "prefix": "FLAG_IGNOREFIELDDAMAGE",
        "body": [
            "FLAG_IGNOREFIELDDAMAGE"
        ]
    },
    "FLAG_IGNORENOTMOVEABLE": {
        "prefix": "FLAG_IGNORENOTMOVEABLE",
        "body": [
            "FLAG_IGNORENOTMOVEABLE"
        ]
    },
    "FLAG_IGNOREAUTOSTACK": {
        "prefix": "FLAG_IGNOREAUTOSTACK",
        "body": [
            "FLAG_IGNOREAUTOSTACK"
        ]
    },
    "SLOTP_WHEREEVER": {
        "prefix": "SLOTP_WHEREEVER",
        "body": [
            "SLOTP_WHEREEVER"
        ]
    },
    "SLOTP_HEAD": {
        "prefix": "SLOTP_HEAD",
        "body": [
            "SLOTP_HEAD"
        ]
    },
    "SLOTP_NECKLACE": {
        "prefix": "SLOTP_NECKLACE",
        "body": [
            "SLOTP_NECKLACE"
        ]
    },
    "SLOTP_BACKPACK": {
        "prefix": "SLOTP_BACKPACK",
        "body": [
            "SLOTP_BACKPACK"
        ]
    },
    "SLOTP_ARMOR": {
        "prefix": "SLOTP_ARMOR",
        "body": [
            "SLOTP_ARMOR"
        ]
    },
    "SLOTP_RIGHT": {
        "prefix": "SLOTP_RIGHT",
        "body": [
            "SLOTP_RIGHT"
        ]
    },
    "SLOTP_LEFT": {
        "prefix": "SLOTP_LEFT",
        "body": [
            "SLOTP_LEFT"
        ]
    },
    "SLOTP_LEGS": {
        "prefix": "SLOTP_LEGS",
        "body": [
            "SLOTP_LEGS"
        ]
    },
    "SLOTP_FEET": {
        "prefix": "SLOTP_FEET",
        "body": [
            "SLOTP_FEET"
        ]
    },
    "SLOTP_RING": {
        "prefix": "SLOTP_RING",
        "body": [
            "SLOTP_RING"
        ]
    },
    "SLOTP_AMMO": {
        "prefix": "SLOTP_AMMO",
        "body": [
            "SLOTP_AMMO"
        ]
    },
    "SLOTP_DEPOT": {
        "prefix": "SLOTP_DEPOT",
        "body": [
            "SLOTP_DEPOT"
        ]
    },
    "SLOTP_TWO_HAND": {
        "prefix": "SLOTP_TWO_HAND",
        "body": [
            "SLOTP_TWO_HAND"
        ]
    },
    "ORIGIN_NONE": {
        "prefix": "ORIGIN_NONE",
        "body": [
            "ORIGIN_NONE"
        ]
    },
    "ORIGIN_CONDITION": {
        "prefix": "ORIGIN_CONDITION",
        "body": [
            "ORIGIN_CONDITION"
        ]
    },
    "ORIGIN_SPELL": {
        "prefix": "ORIGIN_SPELL",
        "body": [
            "ORIGIN_SPELL"
        ]
    },
    "ORIGIN_MELEE": {
        "prefix": "ORIGIN_MELEE",
        "body": [
            "ORIGIN_MELEE"
        ]
    },
    "ORIGIN_RANGED": {
        "prefix": "ORIGIN_RANGED",
        "body": [
            "ORIGIN_RANGED"
        ]
    },
    "GUEST_LIST": {
        "prefix": "GUEST_LIST",
        "body": [
            "GUEST_LIST"
        ]
    },
    "SUBOWNER_LIST": {
        "prefix": "SUBOWNER_LIST",
        "body": [
            "SUBOWNER_LIST"
        ]
    },
    "SPEECHBUBBLE_NONE": {
        "prefix": "SPEECHBUBBLE_NONE",
        "body": [
            "SPEECHBUBBLE_NONE"
        ]
    },
    "SPEECHBUBBLE_NORMAL": {
        "prefix": "SPEECHBUBBLE_NORMAL",
        "body": [
            "SPEECHBUBBLE_NORMAL"
        ]
    },
    "SPEECHBUBBLE_TRADE": {
        "prefix": "SPEECHBUBBLE_TRADE",
        "body": [
            "SPEECHBUBBLE_TRADE"
        ]
    },
    "SPEECHBUBBLE_QUEST": {
        "prefix": "SPEECHBUBBLE_QUEST",
        "body": [
            "SPEECHBUBBLE_QUEST"
        ]
    },
    "SPEECHBUBBLE_QUESTTRADER": {
        "prefix": "SPEECHBUBBLE_QUESTTRADER",
        "body": [
            "SPEECHBUBBLE_QUESTTRADER"
        ]
    },
    "SPEECHBUBBLE_HIRELING": {
        "prefix": "SPEECHBUBBLE_HIRELING",
        "body": [
            "SPEECHBUBBLE_HIRELING"
        ]
    },
    "MAPMARK_TICK": {
        "prefix": "MAPMARK_TICK",
        "body": [
            "MAPMARK_TICK"
        ]
    },
    "MAPMARK_QUESTION": {
        "prefix": "MAPMARK_QUESTION",
        "body": [
            "MAPMARK_QUESTION"
        ]
    },
    "MAPMARK_EXCLAMATION": {
        "prefix": "MAPMARK_EXCLAMATION",
        "body": [
            "MAPMARK_EXCLAMATION"
        ]
    },
    "MAPMARK_STAR": {
        "prefix": "MAPMARK_STAR",
        "body": [
            "MAPMARK_STAR"
        ]
    },
    "MAPMARK_CROSS": {
        "prefix": "MAPMARK_CROSS",
        "body": [
            "MAPMARK_CROSS"
        ]
    },
    "MAPMARK_TEMPLE": {
        "prefix": "MAPMARK_TEMPLE",
        "body": [
            "MAPMARK_TEMPLE"
        ]
    },
    "MAPMARK_KISS": {
        "prefix": "MAPMARK_KISS",
        "body": [
            "MAPMARK_KISS"
        ]
    },
    "MAPMARK_SHOVEL": {
        "prefix": "MAPMARK_SHOVEL",
        "body": [
            "MAPMARK_SHOVEL"
        ]
    },
    "MAPMARK_SWORD": {
        "prefix": "MAPMARK_SWORD",
        "body": [
            "MAPMARK_SWORD"
        ]
    },
    "MAPMARK_FLAG": {
        "prefix": "MAPMARK_FLAG",
        "body": [
            "MAPMARK_FLAG"
        ]
    },
    "MAPMARK_LOCK": {
        "prefix": "MAPMARK_LOCK",
        "body": [
            "MAPMARK_LOCK"
        ]
    },
    "MAPMARK_BAG": {
        "prefix": "MAPMARK_BAG",
        "body": [
            "MAPMARK_BAG"
        ]
    },
    "MAPMARK_SKULL": {
        "prefix": "MAPMARK_SKULL",
        "body": [
            "MAPMARK_SKULL"
        ]
    },
    "MAPMARK_DOLLAR": {
        "prefix": "MAPMARK_DOLLAR",
        "body": [
            "MAPMARK_DOLLAR"
        ]
    },
    "MAPMARK_REDNORTH": {
        "prefix": "MAPMARK_REDNORTH",
        "body": [
            "MAPMARK_REDNORTH"
        ]
    },
    "MAPMARK_REDSOUTH": {
        "prefix": "MAPMARK_REDSOUTH",
        "body": [
            "MAPMARK_REDSOUTH"
        ]
    },
    "MAPMARK_REDEAST": {
        "prefix": "MAPMARK_REDEAST",
        "body": [
            "MAPMARK_REDEAST"
        ]
    },
    "MAPMARK_REDWEST": {
        "prefix": "MAPMARK_REDWEST",
        "body": [
            "MAPMARK_REDWEST"
        ]
    },
    "MAPMARK_GREENNORTH": {
        "prefix": "MAPMARK_GREENNORTH",
        "body": [
            "MAPMARK_GREENNORTH"
        ]
    },
    "MAPMARK_GREENSOUTH": {
        "prefix": "MAPMARK_GREENSOUTH",
        "body": [
            "MAPMARK_GREENSOUTH"
        ]
    },
    "RETURNVALUE_NOERROR": {
        "prefix": "RETURNVALUE_NOERROR",
        "body": [
            "RETURNVALUE_NOERROR"
        ]
    },
    "RETURNVALUE_NOTBOUGHTINSTORE": {
        "prefix": "RETURNVALUE_NOTBOUGHTINSTORE",
        "body": [
            "RETURNVALUE_NOTBOUGHTINSTORE"
        ]
    },
    "RETURNVALUE_ITEMCANNOTBEMOVEDTHERE": {
        "prefix": "RETURNVALUE_ITEMCANNOTBEMOVEDTHERE",
        "body": [
            "RETURNVALUE_ITEMCANNOTBEMOVEDTHERE"
        ]
    },
    "RETURNVALUE_ITEMCANNOTBEMOVEDPOUCH": {
        "prefix": "RETURNVALUE_ITEMCANNOTBEMOVEDPOUCH",
        "body": [
            "RETURNVALUE_ITEMCANNOTBEMOVEDPOUCH"
        ]
    },
    "RETURNVALUE_NOTPOSSIBLE": {
        "prefix": "RETURNVALUE_NOTPOSSIBLE",
        "body": [
            "RETURNVALUE_NOTPOSSIBLE"
        ]
    },
    "RETURNVALUE_NOTENOUGHROOM": {
        "prefix": "RETURNVALUE_NOTENOUGHROOM",
        "body": [
            "RETURNVALUE_NOTENOUGHROOM"
        ]
    },
    "RETURNVALUE_PLAYERISPZLOCKED": {
        "prefix": "RETURNVALUE_PLAYERISPZLOCKED",
        "body": [
            "RETURNVALUE_PLAYERISPZLOCKED"
        ]
    },
    "RETURNVALUE_PLAYERISNOTINVITED": {
        "prefix": "RETURNVALUE_PLAYERISNOTINVITED",
        "body": [
            "RETURNVALUE_PLAYERISNOTINVITED"
        ]
    },
    "RETURNVALUE_CANNOTTHROW": {
        "prefix": "RETURNVALUE_CANNOTTHROW",
        "body": [
            "RETURNVALUE_CANNOTTHROW"
        ]
    },
    "RETURNVALUE_THEREISNOWAY": {
        "prefix": "RETURNVALUE_THEREISNOWAY",
        "body": [
            "RETURNVALUE_THEREISNOWAY"
        ]
    },
    "RETURNVALUE_DESTINATIONOUTOFREACH": {
        "prefix": "RETURNVALUE_DESTINATIONOUTOFREACH",
        "body": [
            "RETURNVALUE_DESTINATIONOUTOFREACH"
        ]
    },
    "RETURNVALUE_CREATUREBLOCK": {
        "prefix": "RETURNVALUE_CREATUREBLOCK",
        "body": [
            "RETURNVALUE_CREATUREBLOCK"
        ]
    },
    "RETURNVALUE_NOTMOVABLE": {
        "prefix": "RETURNVALUE_NOTMOVABLE",
        "body": [
            "RETURNVALUE_NOTMOVABLE"
        ]
    },
    "RETURNVALUE_DROPTWOHANDEDITEM": {
        "prefix": "RETURNVALUE_DROPTWOHANDEDITEM",
        "body": [
            "RETURNVALUE_DROPTWOHANDEDITEM"
        ]
    },
    "RETURNVALUE_BOTHHANDSNEEDTOBEFREE": {
        "prefix": "RETURNVALUE_BOTHHANDSNEEDTOBEFREE",
        "body": [
            "RETURNVALUE_BOTHHANDSNEEDTOBEFREE"
        ]
    },
    "RETURNVALUE_CANONLYUSEONEWEAPON": {
        "prefix": "RETURNVALUE_CANONLYUSEONEWEAPON",
        "body": [
            "RETURNVALUE_CANONLYUSEONEWEAPON"
        ]
    },
    "RETURNVALUE_NEEDEXCHANGE": {
        "prefix": "RETURNVALUE_NEEDEXCHANGE",
        "body": [
            "RETURNVALUE_NEEDEXCHANGE"
        ]
    },
    "RETURNVALUE_CANNOTBEDRESSED": {
        "prefix": "RETURNVALUE_CANNOTBEDRESSED",
        "body": [
            "RETURNVALUE_CANNOTBEDRESSED"
        ]
    },
    "RETURNVALUE_PUTTHISOBJECTINYOURHAND": {
        "prefix": "RETURNVALUE_PUTTHISOBJECTINYOURHAND",
        "body": [
            "RETURNVALUE_PUTTHISOBJECTINYOURHAND"
        ]
    },
    "RETURNVALUE_PUTTHISOBJECTINBOTHHANDS": {
        "prefix": "RETURNVALUE_PUTTHISOBJECTINBOTHHANDS",
        "body": [
            "RETURNVALUE_PUTTHISOBJECTINBOTHHANDS"
        ]
    },
    "RETURNVALUE_TOOFARAWAY": {
        "prefix": "RETURNVALUE_TOOFARAWAY",
        "body": [
            "RETURNVALUE_TOOFARAWAY"
        ]
    },
    "RETURNVALUE_FIRSTGODOWNSTAIRS": {
        "prefix": "RETURNVALUE_FIRSTGODOWNSTAIRS",
        "body": [
            "RETURNVALUE_FIRSTGODOWNSTAIRS"
        ]
    },
    "RETURNVALUE_FIRSTGOUPSTAIRS": {
        "prefix": "RETURNVALUE_FIRSTGOUPSTAIRS",
        "body": [
            "RETURNVALUE_FIRSTGOUPSTAIRS"
        ]
    },
    "RETURNVALUE_CONTAINERNOTENOUGHROOM": {
        "prefix": "RETURNVALUE_CONTAINERNOTENOUGHROOM",
        "body": [
            "RETURNVALUE_CONTAINERNOTENOUGHROOM"
        ]
    },
    "RETURNVALUE_NOTENOUGHCAPACITY": {
        "prefix": "RETURNVALUE_NOTENOUGHCAPACITY",
        "body": [
            "RETURNVALUE_NOTENOUGHCAPACITY"
        ]
    },
    "RETURNVALUE_CANNOTPICKUP": {
        "prefix": "RETURNVALUE_CANNOTPICKUP",
        "body": [
            "RETURNVALUE_CANNOTPICKUP"
        ]
    },
    "RETURNVALUE_THISISIMPOSSIBLE": {
        "prefix": "RETURNVALUE_THISISIMPOSSIBLE",
        "body": [
            "RETURNVALUE_THISISIMPOSSIBLE"
        ]
    },
    "RETURNVALUE_DEPOTISFULL": {
        "prefix": "RETURNVALUE_DEPOTISFULL",
        "body": [
            "RETURNVALUE_DEPOTISFULL"
        ]
    },
    "RETURNVALUE_CREATUREDOESNOTEXIST": {
        "prefix": "RETURNVALUE_CREATUREDOESNOTEXIST",
        "body": [
            "RETURNVALUE_CREATUREDOESNOTEXIST"
        ]
    },
    "RETURNVALUE_CANNOTUSETHISOBJECT": {
        "prefix": "RETURNVALUE_CANNOTUSETHISOBJECT",
        "body": [
            "RETURNVALUE_CANNOTUSETHISOBJECT"
        ]
    },
    "RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE": {
        "prefix": "RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE",
        "body": [
            "RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE"
        ]
    },
    "RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE": {
        "prefix": "RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE",
        "body": [
            "RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE"
        ]
    },
    "RETURNVALUE_YOUAREALREADYTRADING": {
        "prefix": "RETURNVALUE_YOUAREALREADYTRADING",
        "body": [
            "RETURNVALUE_YOUAREALREADYTRADING"
        ]
    },
    "RETURNVALUE_THISPLAYERISALREADYTRADING": {
        "prefix": "RETURNVALUE_THISPLAYERISALREADYTRADING",
        "body": [
            "RETURNVALUE_THISPLAYERISALREADYTRADING"
        ]
    },
    "RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT": {
        "prefix": "RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT",
        "body": [
            "RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT"
        ]
    },
    "RETURNVALUE_DIRECTPLAYERSHOOT": {
        "prefix": "RETURNVALUE_DIRECTPLAYERSHOOT",
        "body": [
            "RETURNVALUE_DIRECTPLAYERSHOOT"
        ]
    },
    "RETURNVALUE_NOTENOUGHLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHMAGICLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHMAGICLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHMAGICLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHMANA": {
        "prefix": "RETURNVALUE_NOTENOUGHMANA",
        "body": [
            "RETURNVALUE_NOTENOUGHMANA"
        ]
    },
    "RETURNVALUE_NOTENOUGHSOUL": {
        "prefix": "RETURNVALUE_NOTENOUGHSOUL",
        "body": [
            "RETURNVALUE_NOTENOUGHSOUL"
        ]
    },
    "RETURNVALUE_YOUAREEXHAUSTED": {
        "prefix": "RETURNVALUE_YOUAREEXHAUSTED",
        "body": [
            "RETURNVALUE_YOUAREEXHAUSTED"
        ]
    },
    "RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST": {
        "prefix": "RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST",
        "body": [
            "RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST"
        ]
    },
    "RETURNVALUE_PLAYERISNOTREACHABLE": {
        "prefix": "RETURNVALUE_PLAYERISNOTREACHABLE",
        "body": [
            "RETURNVALUE_PLAYERISNOTREACHABLE"
        ]
    },
    "RETURNVALUE_CANONLYUSETHISRUNEONCREATURES": {
        "prefix": "RETURNVALUE_CANONLYUSETHISRUNEONCREATURES",
        "body": [
            "RETURNVALUE_CANONLYUSETHISRUNEONCREATURES"
        ]
    },
    "RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE": {
        "prefix": "RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE",
        "body": [
            "RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE"
        ]
    },
    "RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER": {
        "prefix": "RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER",
        "body": [
            "RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER"
        ]
    },
    "RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE": {
        "prefix": "RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE",
        "body": [
            "RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE"
        ]
    },
    "RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE": {
        "prefix": "RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE",
        "body": [
            "RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE"
        ]
    },
    "RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE": {
        "prefix": "RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE",
        "body": [
            "RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE"
        ]
    },
    "RETURNVALUE_YOUCANONLYUSEITONCREATURES": {
        "prefix": "RETURNVALUE_YOUCANONLYUSEITONCREATURES",
        "body": [
            "RETURNVALUE_YOUCANONLYUSEITONCREATURES"
        ]
    },
    "RETURNVALUE_CREATUREISNOTREACHABLE": {
        "prefix": "RETURNVALUE_CREATUREISNOTREACHABLE",
        "body": [
            "RETURNVALUE_CREATUREISNOTREACHABLE"
        ]
    },
    "RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS": {
        "prefix": "RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS",
        "body": [
            "RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS"
        ]
    },
    "RETURNVALUE_YOUNEEDPREMIUMACCOUNT": {
        "prefix": "RETURNVALUE_YOUNEEDPREMIUMACCOUNT",
        "body": [
            "RETURNVALUE_YOUNEEDPREMIUMACCOUNT"
        ]
    },
    "RETURNVALUE_YOUNEEDTOLEARNTHISSPELL": {
        "prefix": "RETURNVALUE_YOUNEEDTOLEARNTHISSPELL",
        "body": [
            "RETURNVALUE_YOUNEEDTOLEARNTHISSPELL"
        ]
    },
    "RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL": {
        "prefix": "RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL",
        "body": [
            "RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL"
        ]
    },
    "RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL": {
        "prefix": "RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL",
        "body": [
            "RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL"
        ]
    },
    "RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE": {
        "prefix": "RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE",
        "body": [
            "RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE"
        ]
    },
    "RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE": {
        "prefix": "RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE",
        "body": [
            "RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE"
        ]
    },
    "RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE": {
        "prefix": "RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE",
        "body": [
            "RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE"
        ]
    },
    "RETURNVALUE_YOUCANNOTLOGOUTHERE": {
        "prefix": "RETURNVALUE_YOUCANNOTLOGOUTHERE",
        "body": [
            "RETURNVALUE_YOUCANNOTLOGOUTHERE"
        ]
    },
    "RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL": {
        "prefix": "RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL",
        "body": [
            "RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL"
        ]
    },
    "RETURNVALUE_CANNOTCONJUREITEMHERE": {
        "prefix": "RETURNVALUE_CANNOTCONJUREITEMHERE",
        "body": [
            "RETURNVALUE_CANNOTCONJUREITEMHERE"
        ]
    },
    "RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS": {
        "prefix": "RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS",
        "body": [
            "RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS"
        ]
    },
    "RETURNVALUE_NAMEISTOOAMBIGUOUS": {
        "prefix": "RETURNVALUE_NAMEISTOOAMBIGUOUS",
        "body": [
            "RETURNVALUE_NAMEISTOOAMBIGUOUS"
        ]
    },
    "RETURNVALUE_CANONLYUSEONESHIELD": {
        "prefix": "RETURNVALUE_CANONLYUSEONESHIELD",
        "body": [
            "RETURNVALUE_CANONLYUSEONESHIELD"
        ]
    },
    "RETURNVALUE_NOPARTYMEMBERSINRANGE": {
        "prefix": "RETURNVALUE_NOPARTYMEMBERSINRANGE",
        "body": [
            "RETURNVALUE_NOPARTYMEMBERSINRANGE"
        ]
    },
    "RETURNVALUE_YOUARENOTTHEOWNER": {
        "prefix": "RETURNVALUE_YOUARENOTTHEOWNER",
        "body": [
            "RETURNVALUE_YOUARENOTTHEOWNER"
        ]
    },
    "RETURNVALUE_TRADEPLAYERFARAWAY": {
        "prefix": "RETURNVALUE_TRADEPLAYERFARAWAY",
        "body": [
            "RETURNVALUE_TRADEPLAYERFARAWAY"
        ]
    },
    "RETURNVALUE_YOUDONTOWNTHISHOUSE": {
        "prefix": "RETURNVALUE_YOUDONTOWNTHISHOUSE",
        "body": [
            "RETURNVALUE_YOUDONTOWNTHISHOUSE"
        ]
    },
    "RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE": {
        "prefix": "RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE",
        "body": [
            "RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE"
        ]
    },
    "RETURNVALUE_TRADEPLAYERHIGHESTBIDDER": {
        "prefix": "RETURNVALUE_TRADEPLAYERHIGHESTBIDDER",
        "body": [
            "RETURNVALUE_TRADEPLAYERHIGHESTBIDDER"
        ]
    },
    "RETURNVALUE_YOUCANNOTTRADETHISHOUSE": {
        "prefix": "RETURNVALUE_YOUCANNOTTRADETHISHOUSE",
        "body": [
            "RETURNVALUE_YOUCANNOTTRADETHISHOUSE"
        ]
    },
    "RETURNVALUE_YOUDONTHAVEREQUIREDPROFESSION": {
        "prefix": "RETURNVALUE_YOUDONTHAVEREQUIREDPROFESSION",
        "body": [
            "RETURNVALUE_YOUDONTHAVEREQUIREDPROFESSION"
        ]
    },
    "RETURNVALUE_NOTENOUGHFISTLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHFISTLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHFISTLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHCLUBLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHCLUBLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHCLUBLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHSWORDLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHSWORDLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHSWORDLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHAXELEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHAXELEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHAXELEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHDISTANCELEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHDISTANCELEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHDISTANCELEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHSHIELDLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHSHIELDLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHSHIELDLEVEL"
        ]
    },
    "RETURNVALUE_NOTENOUGHFISHLEVEL": {
        "prefix": "RETURNVALUE_NOTENOUGHFISHLEVEL",
        "body": [
            "RETURNVALUE_NOTENOUGHFISHLEVEL"
        ]
    },
    "RETURNVALUE_REWARDCHESTISEMPTY": {
        "prefix": "RETURNVALUE_REWARDCHESTISEMPTY",
        "body": [
            "RETURNVALUE_REWARDCHESTISEMPTY"
        ]
    },
    "RETURNVALUE_CONTACTADMINISTRATOR": {
        "prefix": "RETURNVALUE_CONTACTADMINISTRATOR",
        "body": [
            "RETURNVALUE_CONTACTADMINISTRATOR"
        ]
    },
    "RETURNVALUE_ITEMISNOTYOURS": {
        "prefix": "RETURNVALUE_ITEMISNOTYOURS",
        "body": [
            "RETURNVALUE_ITEMISNOTYOURS"
        ]
    },
    "RETURNVALUE_ITEMUNTRADEABLE": {
        "prefix": "RETURNVALUE_ITEMUNTRADEABLE",
        "body": [
            "RETURNVALUE_ITEMUNTRADEABLE"
        ]
    },
    "configKeys.ALLOW_CHANGEOUTFIT": {
        "prefix": "configKeys.ALLOW_CHANGEOUTFIT",
        "body": [
            "configKeys.ALLOW_CHANGEOUTFIT"
        ]
    },
    "configKeys.CANNOT_ATTACK_SAME_LOOKFEET": {
        "prefix": "configKeys.CANNOT_ATTACK_SAME_LOOKFEET",
        "body": [
            "configKeys.CANNOT_ATTACK_SAME_LOOKFEET"
        ]
    },
    "configKeys.ONE_PLAYER_ON_ACCOUNT": {
        "prefix": "configKeys.ONE_PLAYER_ON_ACCOUNT",
        "body": [
            "configKeys.ONE_PLAYER_ON_ACCOUNT"
        ]
    },
    "configKeys.AIMBOT_HOTKEY_ENABLED": {
        "prefix": "configKeys.AIMBOT_HOTKEY_ENABLED",
        "body": [
            "configKeys.AIMBOT_HOTKEY_ENABLED"
        ]
    },
    "configKeys.REMOVE_AMMO": {
        "prefix": "configKeys.REMOVE_AMMO",
        "body": [
            "configKeys.REMOVE_AMMO"
        ]
    },
    "configKeys.REMOVE_RUNE_CHARGES": {
        "prefix": "configKeys.REMOVE_RUNE_CHARGES",
        "body": [
            "configKeys.REMOVE_RUNE_CHARGES"
        ]
    },
    "configKeys.EXPERIENCE_FROM_PLAYERS": {
        "prefix": "configKeys.EXPERIENCE_FROM_PLAYERS",
        "body": [
            "configKeys.EXPERIENCE_FROM_PLAYERS"
        ]
    },
    "configKeys.FREE_PREMIUM": {
        "prefix": "configKeys.FREE_PREMIUM",
        "body": [
            "configKeys.FREE_PREMIUM"
        ]
    },
    "configKeys.REPLACE_KICK_ON_LOGIN": {
        "prefix": "configKeys.REPLACE_KICK_ON_LOGIN",
        "body": [
            "configKeys.REPLACE_KICK_ON_LOGIN"
        ]
    },
    "configKeys.ALLOW_CLONES": {
        "prefix": "configKeys.ALLOW_CLONES",
        "body": [
            "configKeys.ALLOW_CLONES"
        ]
    },
    "configKeys.BIND_ONLY_GLOBAL_ADDRESS": {
        "prefix": "configKeys.BIND_ONLY_GLOBAL_ADDRESS",
        "body": [
            "configKeys.BIND_ONLY_GLOBAL_ADDRESS"
        ]
    },
    "configKeys.OPTIMIZE_DATABASE": {
        "prefix": "configKeys.OPTIMIZE_DATABASE",
        "body": [
            "configKeys.OPTIMIZE_DATABASE"
        ]
    },
    "configKeys.MARKET_PREMIUM": {
        "prefix": "configKeys.MARKET_PREMIUM",
        "body": [
            "configKeys.MARKET_PREMIUM"
        ]
    },
    "configKeys.EMOTE_SPELLS": {
        "prefix": "configKeys.EMOTE_SPELLS",
        "body": [
            "configKeys.EMOTE_SPELLS"
        ]
    },
    "configKeys.STAMINA_SYSTEM": {
        "prefix": "configKeys.STAMINA_SYSTEM",
        "body": [
            "configKeys.STAMINA_SYSTEM"
        ]
    },
    "configKeys.WARN_UNSAFE_SCRIPTS": {
        "prefix": "configKeys.WARN_UNSAFE_SCRIPTS",
        "body": [
            "configKeys.WARN_UNSAFE_SCRIPTS"
        ]
    },
    "configKeys.CONVERT_UNSAFE_SCRIPTS": {
        "prefix": "configKeys.CONVERT_UNSAFE_SCRIPTS",
        "body": [
            "configKeys.CONVERT_UNSAFE_SCRIPTS"
        ]
    },
    "configKeys.MAP_NAME": {
        "prefix": "configKeys.MAP_NAME",
        "body": [
            "configKeys.MAP_NAME"
        ]
    },
    "configKeys.HOUSE_RENT_PERIOD": {
        "prefix": "configKeys.HOUSE_RENT_PERIOD",
        "body": [
            "configKeys.HOUSE_RENT_PERIOD"
        ]
    },
    "configKeys.SERVER_NAME": {
        "prefix": "configKeys.SERVER_NAME",
        "body": [
            "configKeys.SERVER_NAME"
        ]
    },
    "configKeys.OWNER_NAME": {
        "prefix": "configKeys.OWNER_NAME",
        "body": [
            "configKeys.OWNER_NAME"
        ]
    },
    "configKeys.OWNER_EMAIL": {
        "prefix": "configKeys.OWNER_EMAIL",
        "body": [
            "configKeys.OWNER_EMAIL"
        ]
    },
    "configKeys.URL": {
        "prefix": "configKeys.URL",
        "body": [
            "configKeys.URL"
        ]
    },
    "configKeys.LOCATION": {
        "prefix": "configKeys.LOCATION",
        "body": [
            "configKeys.LOCATION"
        ]
    },
    "configKeys.IP": {
        "prefix": "configKeys.IP",
        "body": [
            "configKeys.IP"
        ]
    },
    "configKeys.MOTD": {
        "prefix": "configKeys.MOTD",
        "body": [
            "configKeys.MOTD"
        ]
    },
    "configKeys.WORLD_TYPE": {
        "prefix": "configKeys.WORLD_TYPE",
        "body": [
            "configKeys.WORLD_TYPE"
        ]
    },
    "configKeys.MYSQL_HOST": {
        "prefix": "configKeys.MYSQL_HOST",
        "body": [
            "configKeys.MYSQL_HOST"
        ]
    },
    "configKeys.MYSQL_USER": {
        "prefix": "configKeys.MYSQL_USER",
        "body": [
            "configKeys.MYSQL_USER"
        ]
    },
    "configKeys.MYSQL_PASS": {
        "prefix": "configKeys.MYSQL_PASS",
        "body": [
            "configKeys.MYSQL_PASS"
        ]
    },
    "configKeys.MYSQL_DB": {
        "prefix": "configKeys.MYSQL_DB",
        "body": [
            "configKeys.MYSQL_DB"
        ]
    },
    "configKeys.MYSQL_SOCK": {
        "prefix": "configKeys.MYSQL_SOCK",
        "body": [
            "configKeys.MYSQL_SOCK"
        ]
    },
    "configKeys.DEFAULT_PRIORITY": {
        "prefix": "configKeys.DEFAULT_PRIORITY",
        "body": [
            "configKeys.DEFAULT_PRIORITY"
        ]
    },
    "configKeys.MAP_AUTHOR": {
        "prefix": "configKeys.MAP_AUTHOR",
        "body": [
            "configKeys.MAP_AUTHOR"
        ]
    },
    "configKeys.SQL_PORT": {
        "prefix": "configKeys.SQL_PORT",
        "body": [
            "configKeys.SQL_PORT"
        ]
    },
    "configKeys.MAX_PLAYERS": {
        "prefix": "configKeys.MAX_PLAYERS",
        "body": [
            "configKeys.MAX_PLAYERS"
        ]
    },
    "configKeys.PZ_LOCKED": {
        "prefix": "configKeys.PZ_LOCKED",
        "body": [
            "configKeys.PZ_LOCKED"
        ]
    },
    "configKeys.DEFAULT_DESPAWNRANGE": {
        "prefix": "configKeys.DEFAULT_DESPAWNRANGE",
        "body": [
            "configKeys.DEFAULT_DESPAWNRANGE"
        ]
    },
    "configKeys.DEFAULT_DESPAWNRADIUS": {
        "prefix": "configKeys.DEFAULT_DESPAWNRADIUS",
        "body": [
            "configKeys.DEFAULT_DESPAWNRADIUS"
        ]
    },
    "configKeys.RATE_EXPERIENCE": {
        "prefix": "configKeys.RATE_EXPERIENCE",
        "body": [
            "configKeys.RATE_EXPERIENCE"
        ]
    },
    "configKeys.RATE_SKILL": {
        "prefix": "configKeys.RATE_SKILL",
        "body": [
            "configKeys.RATE_SKILL"
        ]
    },
    "configKeys.RATE_LOOT": {
        "prefix": "configKeys.RATE_LOOT",
        "body": [
            "configKeys.RATE_LOOT"
        ]
    },
    "configKeys.RATE_MAGIC": {
        "prefix": "configKeys.RATE_MAGIC",
        "body": [
            "configKeys.RATE_MAGIC"
        ]
    },
    "configKeys.RATE_SPAWN": {
        "prefix": "configKeys.RATE_SPAWN",
        "body": [
            "configKeys.RATE_SPAWN"
        ]
    },
    "configKeys.HOUSE_PRICE": {
        "prefix": "configKeys.HOUSE_PRICE",
        "body": [
            "configKeys.HOUSE_PRICE"
        ]
    },
    "configKeys.KILLS_TO_RED": {
        "prefix": "configKeys.KILLS_TO_RED",
        "body": [
            "configKeys.KILLS_TO_RED"
        ]
    },
    "configKeys.KILLS_TO_BLACK": {
        "prefix": "configKeys.KILLS_TO_BLACK",
        "body": [
            "configKeys.KILLS_TO_BLACK"
        ]
    },
    "configKeys.MAX_MESSAGEBUFFER": {
        "prefix": "configKeys.MAX_MESSAGEBUFFER",
        "body": [
            "configKeys.MAX_MESSAGEBUFFER"
        ]
    },
    "configKeys.ACTIONS_DELAY_INTERVAL": {
        "prefix": "configKeys.ACTIONS_DELAY_INTERVAL",
        "body": [
            "configKeys.ACTIONS_DELAY_INTERVAL"
        ]
    },
    "configKeys.EX_ACTIONS_DELAY_INTERVAL": {
        "prefix": "configKeys.EX_ACTIONS_DELAY_INTERVAL",
        "body": [
            "configKeys.EX_ACTIONS_DELAY_INTERVAL"
        ]
    },
    "configKeys.KICK_AFTER_MINUTES": {
        "prefix": "configKeys.KICK_AFTER_MINUTES",
        "body": [
            "configKeys.KICK_AFTER_MINUTES"
        ]
    },
    "configKeys.PROTECTION_LEVEL": {
        "prefix": "configKeys.PROTECTION_LEVEL",
        "body": [
            "configKeys.PROTECTION_LEVEL"
        ]
    },
    "configKeys.DEATH_LOSE_PERCENT": {
        "prefix": "configKeys.DEATH_LOSE_PERCENT",
        "body": [
            "configKeys.DEATH_LOSE_PERCENT"
        ]
    },
    "configKeys.STATUSQUERY_TIMEOUT": {
        "prefix": "configKeys.STATUSQUERY_TIMEOUT",
        "body": [
            "configKeys.STATUSQUERY_TIMEOUT"
        ]
    },
    "configKeys.FRAG_TIME": {
        "prefix": "configKeys.FRAG_TIME",
        "body": [
            "configKeys.FRAG_TIME"
        ]
    },
    "configKeys.WHITE_SKULL_TIME": {
        "prefix": "configKeys.WHITE_SKULL_TIME",
        "body": [
            "configKeys.WHITE_SKULL_TIME"
        ]
    },
    "configKeys.GAME_PORT": {
        "prefix": "configKeys.GAME_PORT",
        "body": [
            "configKeys.GAME_PORT"
        ]
    },
    "configKeys.LOGIN_PORT": {
        "prefix": "configKeys.LOGIN_PORT",
        "body": [
            "configKeys.LOGIN_PORT"
        ]
    },
    "configKeys.STATUS_PORT": {
        "prefix": "configKeys.STATUS_PORT",
        "body": [
            "configKeys.STATUS_PORT"
        ]
    },
    "configKeys.STAIRHOP_DELAY": {
        "prefix": "configKeys.STAIRHOP_DELAY",
        "body": [
            "configKeys.STAIRHOP_DELAY"
        ]
    },
    "configKeys.MARKET_OFFER_DURATION": {
        "prefix": "configKeys.MARKET_OFFER_DURATION",
        "body": [
            "configKeys.MARKET_OFFER_DURATION"
        ]
    },
    "configKeys.CHECK_EXPIRED_MARKET_OFFERS_EACH_MINUTES": {
        "prefix": "configKeys.CHECK_EXPIRED_MARKET_OFFERS_EACH_MINUTES",
        "body": [
            "configKeys.CHECK_EXPIRED_MARKET_OFFERS_EACH_MINUTES"
        ]
    },
    "configKeys.MAX_MARKET_OFFERS_AT_A_TIME_PER_PLAYER": {
        "prefix": "configKeys.MAX_MARKET_OFFERS_AT_A_TIME_PER_PLAYER",
        "body": [
            "configKeys.MAX_MARKET_OFFERS_AT_A_TIME_PER_PLAYER"
        ]
    },
    "configKeys.EXP_FROM_PLAYERS_LEVEL_RANGE": {
        "prefix": "configKeys.EXP_FROM_PLAYERS_LEVEL_RANGE",
        "body": [
            "configKeys.EXP_FROM_PLAYERS_LEVEL_RANGE"
        ]
    },
    "configKeys.MAX_PACKETS_PER_SECOND": {
        "prefix": "configKeys.MAX_PACKETS_PER_SECOND",
        "body": [
            "configKeys.MAX_PACKETS_PER_SECOND"
        ]
    },
    "INDEX_WHEREEVER": {
        "prefix": "INDEX_WHEREEVER",
        "body": [
            "INDEX_WHEREEVER"
        ]
    },
    "VIRTUAL_PARENT": {
        "prefix": "VIRTUAL_PARENT",
        "body": [
            "VIRTUAL_PARENT"
        ]
    },
    "Action - onUse Revscript": {
        "prefix": "Action - onUse",
        "body": [
            "local ${1:action} = Action()\n\nfunction ${1:action}.onUse(player, item, fromPosition, target, toPosition, isHotkey)\n\treturn true\nend\n\n--${1:action}:id(ids)\n--${1:action}:aid(aids)\n--${1:action}:uid(uids)\n--${1:action}:allowFarUse(true)\n--${1:action}:blockWalls(true)\n--${1:action}:checkFloor(true)\n${1:action}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onLogin Revscript": {
        "prefix": "CreatureEvent - onLogin",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onLogin(player)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onLogout Revscript": {
        "prefix": "CreatureEvent - onLogout",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onLogout(player)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onThink Revscript": {
        "prefix": "CreatureEvent - onThink",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onThink(creature, interval)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onPrepareDeath Revscript": {
        "prefix": "CreatureEvent - onPrepareDeath",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onPrepareDeath(creature, killer)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onDeath Revscript": {
        "prefix": "CreatureEvent - onDeath",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onDeath(creature, corpse, lastHitKiller, mostDamageKiller, lastHitUnjustified, mostDamageUnjustified)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onAdvance Revscript": {
        "prefix": "CreatureEvent - onAdvance",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onAdvance(player, skill, oldLevel, newLevel)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onKill Revscript": {
        "prefix": "CreatureEvent - onKill",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onKill(creature, target)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onModalWindow Revscript": {
        "prefix": "CreatureEvent - onModalWindow",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onModalWindow(player, modalWindowId, buttonId, choiceId)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onTextEdit Revscript": {
        "prefix": "CreatureEvent - onTextEdit",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onTextEdit(player, item, text)\n\treturn true\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onHealthChange Revscript": {
        "prefix": "CreatureEvent - onHealthChange",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onHealthChange(creature, attacker, primaryDamage, primaryType, secondaryDamage, secondaryType, origin)\n\treturn primaryDamage, primaryType, secondaryDamage, secondaryType\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onManaChange Revscript": {
        "prefix": "CreatureEvent - onManaChange",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onManaChange(creature, attacker, primaryDamage, primaryType, secondaryDamage, secondaryType, origin)\n\treturn primaryDamage, primaryType, secondaryDamage, secondaryType\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "CreatureEvent - onExtendedOpcode Revscript": {
        "prefix": "CreatureEvent - onExtendedOpcode",
        "body": [
            "local ${1:creatureEvent} = CreatureEvent(${2:\"creatureEventName\"})\n\nfunction ${1:creatureEvent}.onExtendedOpcode(player, opcode, buffer)\nend\n\n${1:creatureEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "GlobalEvent - onThink Revscript": {
        "prefix": "GlobalEvent - onThink",
        "body": [
            "local ${1:globalEvent} = GlobalEvent(${2:\"globalEventName\"})\n\nfunction ${1:globalEvent}.onThink(interval)\n\treturn true\nend\n\n\n--${1:globalEvent}:interval(1000)\n${1:globalEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "GlobalEvent - onTime Revscript": {
        "prefix": "GlobalEvent - onTime",
        "body": [
            "local ${1:globalEvent} = GlobalEvent(${2:\"globalEventName\"})\n\nfunction ${1:globalEvent}.onTime(interval)\n\treturn true\nend\n\n--${1:globalEvent}:time(\"12:00:00\")\n${1:globalEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "GlobalEvent - onRecord Revscript": {
        "prefix": "GlobalEvent - onRecord",
        "body": [
            "local ${1:globalEvent} = GlobalEvent(${2:\"globalEventName\"})\n\nfunction ${1:globalEvent}.onRecord(current, old)\n\treturn true\nend\n\n${1:globalEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "GlobalEvent - onShutdown Revscript": {
        "prefix": "GlobalEvent - onShutdown",
        "body": [
            "local ${1:globalEvent} = GlobalEvent(${2:\"globalEventName\"})\n\nfunction ${1:globalEvent}.onShutdown()\n\treturn true\nend\n\n${1:globalEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "GlobalEvent - onStartup Revscript": {
        "prefix": "GlobalEvent - onStartup",
        "body": [
            "local ${1:globalEvent} = GlobalEvent(${2:\"globalEventName\"})\n\nfunction ${1:globalEvent}.onStartup()\n\treturn true\nend\n\n${1:globalEvent}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onStepIn Revscript": {
        "prefix": "MoveEvent - onStepIn",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onStepIn(creature, item, position, fromPosition)\n\treturn true\nend\n\n--${1:moveEvent}:id(ids)\n--${1:moveEvent}:aid(ids)\n--${1:moveEvent}:uid(ids)\n--${1:moveEvent}:position(positions)\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onStepOut Revscript": {
        "prefix": "MoveEvent - onStepOut",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onStepOut(creature, item, position, fromPosition)\n\treturn true\nend\n\n--${1:moveEvent}:id(ids)\n--${1:moveEvent}:aid(ids)\n--${1:moveEvent}:uid(ids)\n--${1:moveEvent}:position(positions)\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onEquip Revscript": {
        "prefix": "MoveEvent - onEquip",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onEquip(player, item, slot, isCheck)\n\treturn RETURNVALUE_NOERROR\nend\n\n--${1:moveEvent}:id(ids)\n--${1:moveEvent}:level(lvl)\n--${1:moveEvent}:magicLevel(lvl)\n--${1:moveEvent}:slot(slot)\n--${1:moveEvent}:premium(bool)\n--${1:moveEvent}:vocation(vocName[, showInDescription = false, lastVoc = false])\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onDeEquip Revscript": {
        "prefix": "MoveEvent - onDeEquip",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onDeEquip(player, item, slot, isCheck)\n\treturn RETURNVALUE_NOERROR\nend\n\n--${1:moveEvent}:id(ids)\n--${1:moveEvent}:level(lvl)\n--${1:moveEvent}:magicLevel(lvl)\n--${1:moveEvent}:slot(slot)\n--${1:moveEvent}:premium(bool)\n--${1:moveEvent}:vocation(vocName[, showInDescription = false, lastVoc = false])\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onAddItem Revscript": {
        "prefix": "MoveEvent - onAddItem",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onAddItem(moveItem, tileItem, position)\n\treturn true\nend\n\n--${1:moveEvent}:tileItem(true)\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "MoveEvent - onRemoveItem Revscript": {
        "prefix": "MoveEvent - onRemoveItem",
        "body": [
            "local ${1:moveEvent} = MoveEvent()\n\nfunction ${1:moveEvent}.onRemoveItem(moveItem, tileItem, position)\n\treturn true\nend\n\n--${1:moveEvent}:tileItem(true)\n${1:moveEvent}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "TalkAction - onSay Revscript": {
        "prefix": "TalkAction - onSay",
        "body": [
            "local ${1:talkAction} = TalkAction(${2:\"!test\"})\n\nfunction ${1:talkAction}.onSay(player, words, param, type)\n\treturn false\nend\n\n--${1:talkAction}:accountType(ACCOUNT_TYPE_GOD)\n--${1:talkAction}:access(true)\n--${1:talkAction}:separator(\" \")\n${1:talkAction}:register()\n$3"
        ],
        "description": "function > R > Revscript"
    },
    "Weapon - onUseWeapon Revscript": {
        "prefix": "Weapon - onUseWeapon",
        "body": [
            "local ${1:weapon} = Weapon(WEAPON_AMMO)\n\nlocal combat = Combat()\n\nfunction ${1:weapon}.onUseWeapon(player, variant)\n\treturn combat:execute(player, variant)\nend\n\n${1:weapon}:register()\n$2"
        ],
        "description": "function > R > Revscript"
    },
    "Spell - onCastSpell Revscript": {
        "prefix": "Spell - onCastSpell",
        "body": [
            "local combat = Combat()\ncombat:setParameter(COMBAT_PARAM_TYPE, COMBAT_FIREDAMAGE)\ncombat:setParameter(COMBAT_PARAM_EFFECT, CONST_ME_FIREAREA)\ncombat:setArea(createCombatArea(AREA_CIRCLE5X5))\n\nfunction onGetFormulaValues(player, level, magicLevel)\n\tlocal min = (level / 5) + (magicLevel * 8) + 50\n\tlocal max = (level / 5) + (magicLevel * 12) + 75\n\treturn -min, -max\nend\n\ncombat:setCallback(CALLBACK_PARAM_LEVELMAGICVALUE, \"onGetFormulaValues\")\n\nlocal spell = Spell(SPELL_INSTANT)\nfunction spell.onCastSpell(creature, variant, isHotkey)\n\treturn combat:execute(creature, variant)\nend\n\nspell:name(\"Hell's Core\")\nspell:words(\"exevo gran mas flam\")\nspell:group(\"attack\")\nspell:vocation(\"sorcerer\", \"master sorcerer\")\nspell:id(24)\nspell:cooldown(40 * 1000)\nspell:groupCooldown(4 * 1000)\nspell:level(60)\nspell:mana(1100)\nspell:isSelfTarget(true)\nspell:isPremium(true)\nspell:register()\n"
        ],
        "description": "function > R > Revscript"
    },
    "Rune - onCastSpell Revscript": {
        "prefix": "Rune - onCastSpell",
        "body": [
            "local combat = Combat()\ncombat:setParameter(COMBAT_PARAM_TYPE, COMBAT_ICEDAMAGE)\ncombat:setParameter(COMBAT_PARAM_EFFECT, CONST_ME_ICEAREA)\ncombat:setParameter(COMBAT_PARAM_DISTANCEEFFECT, CONST_ANI_ICE)\ncombat:setArea(createCombatArea(AREA_CIRCLE3X3))\n\nfunction onGetFormulaValues(player, level, magicLevel)\n\tlocal min = (level / 5) + (magicLevel * 1.2) + 7\n\tlocal max = (level / 5) + (magicLevel * 2.85) + 16\n\treturn -min, -max\nend\n\ncombat:setCallback(CALLBACK_PARAM_LEVELMAGICVALUE, \"onGetFormulaValues\")\n\nlocal rune = Spell(SPELL_RUNE)\nfunction rune.onCastSpell(creature, variant, isHotkey)\n\treturn combat:execute(creature, variant)\nend\n\nrune:name(\"Avalanche Rune\")\nrune:group(\"attack\")\nrune:vocation(\"sorcerer\", \"master sorcerer\")\nrune:runeId(2294)\n--rune:runeSpellName(\"adevo frigo\")\nrune:charges(1)\nrune:id(24)\nrune:cooldown(40 * 1000)\nrune:groupCooldown(4 * 1000)\nrune:level(60)\nrune:magicLevel(14)\nrune:mana(1100)\nrune:allowFarUse(true)\nrune:isPremium(true)\nrune:register()\n"
        ],
        "description": "function > R > Revscript"
    },
    "Creature - onChangeOutfit EventCallback": {
        "prefix": "Creature - onChangeOutfit",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onChangeOutfit(creature, outfit)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Creature - onAreaCombat EventCallback": {
        "prefix": "Creature - onAreaCombat",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onAreaCombat(creature, tile, isAggressive)\n\treturn RETURNVALUE_NOERROR\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Creature - onTargetCombat EventCallback": {
        "prefix": "Creature - onTargetCombat",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onTargetCombat(creature, target)\n\treturn RETURNVALUE_NOERROR\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Creature - onHear EventCallback": {
        "prefix": "Creature - onHear",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onHear(creature, speaker, words, type)\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Monster - onDropLoot EventCallback": {
        "prefix": "Monster - onDropLoot",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onDropLoot(monster, corpse)\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Monster - onSpawn EventCallback": {
        "prefix": "Monster - onSpawn",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onSpawn(monster, position, startup, artificial)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Action - onUseItem EventCallback": {
        "prefix": "Action - onUseItem",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onUseItem(player, item, fromPosition, target, toPosition, isHotkey)\n\treturn RETURNVALUE_NOERROR\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Party - onJoin EventCallback": {
        "prefix": "Party - onJoin",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onJoin(party, player)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Party - onLeave EventCallback": {
        "prefix": "Party - onLeave",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLeave(party, player)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Party - onDisband EventCallback": {
        "prefix": "Party - onDisband",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onDisband(party, player)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Party - onShareExperience EventCallback": {
        "prefix": "Party - onShareExperience",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onShareExperience(party, exp)\n\treturn exp\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onBrowseField EventCallback": {
        "prefix": "Player - onBrowseField",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onBrowseField(player, position)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onLook EventCallback": {
        "prefix": "Player - onLook",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLook(player, thing, position, distance, description)\n\treturn description\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onLookInBattleList EventCallback": {
        "prefix": "Player - onLookInBattleList",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLookInBattleList(player, creature, distance, description)\n\treturn description\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onLookInTrade EventCallback": {
        "prefix": "Player - onLookInTrade",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLookInTrade(player, partner, item, distance, description)\n\treturn description\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onLookInShop EventCallback": {
        "prefix": "Player - onLookInShop",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLookInShop(player, itemType, count, description)\n\treturn description\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onMoveItem EventCallback": {
        "prefix": "Player - onMoveItem",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onMoveItem(player, item, count, fromPosition, toPosition, fromCylinder, toCylinder)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onItemMoved EventCallback": {
        "prefix": "Player - onItemMoved",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onItemMoved(player, item, count, fromPosition, toPosition, fromCylinder, toCylinder)\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onMoveCreature EventCallback": {
        "prefix": "Player - onMoveCreature",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onMoveCreature(player, creature, fromPosition, toPosition)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onReportRuleViolation EventCallback": {
        "prefix": "Player - onReportRuleViolation",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onReportRuleViolation(player, targetName, reportType, reportReason, comment, translation)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onReportBug EventCallback": {
        "prefix": "Player - onReportBug",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onReportBug(player, message, position, category)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onTurn EventCallback": {
        "prefix": "Player - onTurn",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onTurn(player, direction)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onTradeRequest EventCallback": {
        "prefix": "Player - onTradeRequest",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onTradeRequest(player, target, item)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onTradeAccept EventCallback": {
        "prefix": "Player - onTradeAccept",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onTradeAccept(player, target, item, targetItem)\n\treturn true\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onTradeCompleted EventCallback": {
        "prefix": "Player - onTradeCompleted",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onTradeCompleted(player, target, item, targetItem, isSuccess)\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onGainExperience EventCallback": {
        "prefix": "Player - onGainExperience",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onGainExperience(player, source, exp, rawExp)\n\treturn exp\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onLoseExperience EventCallback": {
        "prefix": "Player - onLoseExperience",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onLoseExperience(player, exp)\n\treturn exp\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onGainSkillTries EventCallback": {
        "prefix": "Player - onGainSkillTries",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onGainSkillTries(player, skill, tries)\n\treturn tries\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    },
    "Player - onWrapItem EventCallback": {
        "prefix": "Player - onWrapItem",
        "body": [
            "local ${1:ec} = EventCallback\n\nfunction ${1:ec}.onWrapItem(player, item, position)\nend\n\n${1:ec}:register(--[[0]])\n$2"
        ],
        "description": "namespace > E > EventCallback"
    }
}